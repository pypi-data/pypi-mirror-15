# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Mistral2', [dirname(__file__)])
        except ImportError:
            import _Mistral2
            return _Mistral2
        if fp is not None:
            try:
                _mod = imp.load_module('_Mistral2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Mistral2 = swig_import_helper()
    del swig_import_helper
else:
    import _Mistral2
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Mistral2_Expression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    nbj_ident = _swig_property(_Mistral2.Mistral2_Expression_nbj_ident_get, _Mistral2.Mistral2_Expression_nbj_ident_set)
    _self = _swig_property(_Mistral2.Mistral2_Expression__self_get, _Mistral2.Mistral2_Expression__self_set)
    _solver = _swig_property(_Mistral2.Mistral2_Expression__solver_get, _Mistral2.Mistral2_Expression__solver_set)

    def has_been_added(self):
        return _Mistral2.Mistral2_Expression_has_been_added(self)

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_Expression(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Expression
    __del__ = lambda self: None

    def getVariableId(self):
        return _Mistral2.Mistral2_Expression_getVariableId(self)

    def get_value(self):
        return _Mistral2.Mistral2_Expression_get_value(self)

    def get_size(self):
        return _Mistral2.Mistral2_Expression_get_size(self)

    def get_min(self):
        return _Mistral2.Mistral2_Expression_get_min(self)

    def get_max(self):
        return _Mistral2.Mistral2_Expression_get_max(self)

    def contain(self, v):
        return _Mistral2.Mistral2_Expression_contain(self, v)

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_Expression_add(self, solver, top_level)
Mistral2_Expression_swigregister = _Mistral2.Mistral2_Expression_swigregister
Mistral2_Expression_swigregister(Mistral2_Expression)

class Mistral2_IntVar(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_IntVar(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_IntVar
    __del__ = lambda self: None
Mistral2_IntVar_swigregister = _Mistral2.Mistral2_IntVar_swigregister
Mistral2_IntVar_swigregister(Mistral2_IntVar)

class Mistral2_Min(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_Min(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Min
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_Min_add(self, solver, top_level)
Mistral2_Min_swigregister = _Mistral2.Mistral2_Min_swigregister
Mistral2_Min_swigregister(Mistral2_Min)

class Mistral2_Max(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_Max(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Max
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_Max_add(self, solver, top_level)
Mistral2_Max_swigregister = _Mistral2.Mistral2_Max_swigregister
Mistral2_Max_swigregister(Mistral2_Max)

class Mistral2_AllDiff(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_AllDiff(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_AllDiff
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_AllDiff_add(self, solver, top_level)
Mistral2_AllDiff_swigregister = _Mistral2.Mistral2_AllDiff_swigregister
Mistral2_AllDiff_swigregister(Mistral2_AllDiff)

class Mistral2_Gcc(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vars, vals, lb_card, ub_card):
        this = _Mistral2.new_Mistral2_Gcc(vars, vals, lb_card, ub_card)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Gcc
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_Gcc_add(self, solver, top_level)
Mistral2_Gcc_swigregister = _Mistral2.Mistral2_Gcc_swigregister
Mistral2_Gcc_swigregister(Mistral2_Gcc)

class Mistral2_Element(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vars):
        this = _Mistral2.new_Mistral2_Element(vars)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Element
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_Element_add(self, solver, top_level)
Mistral2_Element_swigregister = _Mistral2.Mistral2_Element_swigregister
Mistral2_Element_swigregister(Mistral2_Element)

class Mistral2_LeqLex(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vars):
        this = _Mistral2.new_Mistral2_LeqLex(vars)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_LeqLex
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_LeqLex_add(self, solver, top_level)
Mistral2_LeqLex_swigregister = _Mistral2.Mistral2_LeqLex_swigregister
Mistral2_LeqLex_swigregister(Mistral2_LeqLex)

class Mistral2_LessLex(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vars):
        this = _Mistral2.new_Mistral2_LessLex(vars)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_LessLex
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_LessLex_add(self, solver, top_level)
Mistral2_LessLex_swigregister = _Mistral2.Mistral2_LessLex_swigregister
Mistral2_LessLex_swigregister(Mistral2_LessLex)

class Mistral2_Sum(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_Sum(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def addVar(self, v):
        return _Mistral2.Mistral2_Sum_addVar(self, v)

    def addWeight(self, w):
        return _Mistral2.Mistral2_Sum_addWeight(self, w)
    __swig_destroy__ = _Mistral2.delete_Mistral2_Sum
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_Sum_add(self, solver, top_level)
Mistral2_Sum_swigregister = _Mistral2.Mistral2_Sum_swigregister
Mistral2_Sum_swigregister(Mistral2_Sum)

class Mistral2_OrderedSum(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vars, l, u):
        this = _Mistral2.new_Mistral2_OrderedSum(vars, l, u)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_OrderedSum
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_OrderedSum_add(self, solver, top_level)
Mistral2_OrderedSum_swigregister = _Mistral2.Mistral2_OrderedSum_swigregister
Mistral2_OrderedSum_swigregister(Mistral2_OrderedSum)

class Mistral2_binop(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def arity(self):
        return _Mistral2.Mistral2_binop_arity(self)
    __swig_destroy__ = _Mistral2.delete_Mistral2_binop
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_binop_add(self, solver, top_level)
Mistral2_binop_swigregister = _Mistral2.Mistral2_binop_swigregister
Mistral2_binop_swigregister(Mistral2_binop)

class Mistral2_Abs(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, var1):
        this = _Mistral2.new_Mistral2_Abs(var1)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Abs
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_Abs_add(self, solver, top_level)
Mistral2_Abs_swigregister = _Mistral2.Mistral2_Abs_swigregister
Mistral2_Abs_swigregister(Mistral2_Abs)

class Mistral2_neg(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, var1):
        this = _Mistral2.new_Mistral2_neg(var1)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_neg
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_neg_add(self, solver, top_level)
Mistral2_neg_swigregister = _Mistral2.Mistral2_neg_swigregister
Mistral2_neg_swigregister(Mistral2_neg)

class Mistral2_mul(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_mul(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_mul
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_mul_add(self, solver, top_level)
Mistral2_mul_swigregister = _Mistral2.Mistral2_mul_swigregister
Mistral2_mul_swigregister(Mistral2_mul)

class Mistral2_div(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_div(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_div
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_div_add(self, solver, top_level)
Mistral2_div_swigregister = _Mistral2.Mistral2_div_swigregister
Mistral2_div_swigregister(Mistral2_div)

class Mistral2_mod(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_mod(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_mod
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_mod_add(self, solver, top_level)
Mistral2_mod_swigregister = _Mistral2.Mistral2_mod_swigregister
Mistral2_mod_swigregister(Mistral2_mod)

class Mistral2_and(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_and(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_and
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_and_add(self, solver, top_level)
Mistral2_and_swigregister = _Mistral2.Mistral2_and_swigregister
Mistral2_and_swigregister(Mistral2_and)

class Mistral2_or(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_or(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_or
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_or_add(self, solver, top_level)
Mistral2_or_swigregister = _Mistral2.Mistral2_or_swigregister
Mistral2_or_swigregister(Mistral2_or)

class Mistral2_eq(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_eq(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_eq
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_eq_add(self, solver, top_level)
Mistral2_eq_swigregister = _Mistral2.Mistral2_eq_swigregister
Mistral2_eq_swigregister(Mistral2_eq)

class Mistral2_ne(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_ne(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_ne
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_ne_add(self, solver, top_level)
Mistral2_ne_swigregister = _Mistral2.Mistral2_ne_swigregister
Mistral2_ne_swigregister(Mistral2_ne)

class Mistral2_NoOverlap(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, var1, var2, d1, d2):
        this = _Mistral2.new_Mistral2_NoOverlap(var1, var2, d1, d2)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_NoOverlap
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_NoOverlap_add(self, solver, top_level)
Mistral2_NoOverlap_swigregister = _Mistral2.Mistral2_NoOverlap_swigregister
Mistral2_NoOverlap_swigregister(Mistral2_NoOverlap)

class Mistral2_le(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_le(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_le
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_le_add(self, solver, top_level)
Mistral2_le_swigregister = _Mistral2.Mistral2_le_swigregister
Mistral2_le_swigregister(Mistral2_le)

class Mistral2_ge(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_ge(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_ge
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_ge_add(self, solver, top_level)
Mistral2_ge_swigregister = _Mistral2.Mistral2_ge_swigregister
Mistral2_ge_swigregister(Mistral2_ge)

class Mistral2_lt(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_lt(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_lt
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_lt_add(self, solver, top_level)
Mistral2_lt_swigregister = _Mistral2.Mistral2_lt_swigregister
Mistral2_lt_swigregister(Mistral2_lt)

class Mistral2_gt(Mistral2_binop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _Mistral2.new_Mistral2_gt(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_gt
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_gt_add(self, solver, top_level)
Mistral2_gt_swigregister = _Mistral2.Mistral2_gt_swigregister
Mistral2_gt_swigregister(Mistral2_gt)

class Mistral2_Minimise(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, var):
        this = _Mistral2.new_Mistral2_Minimise(var)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Minimise
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_Minimise_add(self, solver, top_level)
Mistral2_Minimise_swigregister = _Mistral2.Mistral2_Minimise_swigregister
Mistral2_Minimise_swigregister(Mistral2_Minimise)

class Mistral2_Maximise(Mistral2_Expression):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, var):
        this = _Mistral2.new_Mistral2_Maximise(var)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2_Maximise
    __del__ = lambda self: None

    def add(self, solver, top_level):
        return _Mistral2.Mistral2_Maximise_add(self, solver, top_level)
Mistral2_Maximise_swigregister = _Mistral2.Mistral2_Maximise_swigregister
Mistral2_Maximise_swigregister(Mistral2_Maximise)

class Mistral2Solver(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    solver = _swig_property(_Mistral2.Mistral2Solver_solver_get, _Mistral2.Mistral2Solver_solver_set)
    first_decision_level = _swig_property(_Mistral2.Mistral2Solver_first_decision_level_get, _Mistral2.Mistral2Solver_first_decision_level_set)
    saved_level = _swig_property(_Mistral2.Mistral2Solver_saved_level_get, _Mistral2.Mistral2Solver_saved_level_set)
    _heuristic_randomization = _swig_property(_Mistral2.Mistral2Solver__heuristic_randomization_get, _Mistral2.Mistral2Solver__heuristic_randomization_set)
    _var_heuristic_str = _swig_property(_Mistral2.Mistral2Solver__var_heuristic_str_get, _Mistral2.Mistral2Solver__var_heuristic_str_set)
    _val_heuristic_str = _swig_property(_Mistral2.Mistral2Solver__val_heuristic_str_get, _Mistral2.Mistral2Solver__val_heuristic_str_set)
    _restart_policy_str = _swig_property(_Mistral2.Mistral2Solver__restart_policy_str_get, _Mistral2.Mistral2Solver__restart_policy_str_set)
    _branching_heuristic = _swig_property(_Mistral2.Mistral2Solver__branching_heuristic_get, _Mistral2.Mistral2Solver__branching_heuristic_set)
    _restart_policy = _swig_property(_Mistral2.Mistral2Solver__restart_policy_get, _Mistral2.Mistral2Solver__restart_policy_set)
    _search_goal = _swig_property(_Mistral2.Mistral2Solver__search_goal_get, _Mistral2.Mistral2Solver__search_goal_set)

    def __init__(self):
        this = _Mistral2.new_Mistral2Solver()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2Solver
    __del__ = lambda self: None

    def add(self, arg):
        return _Mistral2.Mistral2Solver_add(self, arg)

    def initialise(self, *args):
        return _Mistral2.Mistral2Solver_initialise(self, *args)

    def solve(self):
        return _Mistral2.Mistral2Solver_solve(self)

    def solveAndRestart(self, policy=0, base=32, factor=1.3333333, decay=0.0, reinit=-1):
        return _Mistral2.Mistral2Solver_solveAndRestart(self, policy, base, factor, decay, reinit)

    def startNewSearch(self):
        return _Mistral2.Mistral2Solver_startNewSearch(self)

    def getNextSolution(self):
        return _Mistral2.Mistral2Solver_getNextSolution(self)

    def sacPreprocess(self, type):
        return _Mistral2.Mistral2Solver_sacPreprocess(self, type)

    def next(self, x, v):
        return _Mistral2.Mistral2Solver_next(self, x, v)

    def get_level(self):
        return _Mistral2.Mistral2Solver_get_level(self)

    def propagate(self):
        return _Mistral2.Mistral2Solver_propagate(self)

    def save(self):
        return _Mistral2.Mistral2Solver_save(self)

    def post(self, op, x, v):
        return _Mistral2.Mistral2Solver_post(self, op, x, v)

    def undo(self, nlevel):
        return _Mistral2.Mistral2Solver_undo(self, nlevel)

    def deduce(self, *args):
        return _Mistral2.Mistral2Solver_deduce(self, *args)

    def branch_right(self):
        return _Mistral2.Mistral2Solver_branch_right(self)

    def store_solution(self):
        return _Mistral2.Mistral2Solver_store_solution(self)

    def setHeuristic(self, var_heuristic, val_heuristic, rand):
        return _Mistral2.Mistral2Solver_setHeuristic(self, var_heuristic, val_heuristic, rand)

    def setFailureLimit(self, cutoff):
        return _Mistral2.Mistral2Solver_setFailureLimit(self, cutoff)

    def setNodeLimit(self, cutoff):
        return _Mistral2.Mistral2Solver_setNodeLimit(self, cutoff)

    def setTimeLimit(self, cutoff):
        return _Mistral2.Mistral2Solver_setTimeLimit(self, cutoff)

    def setVerbosity(self, degree):
        return _Mistral2.Mistral2Solver_setVerbosity(self, degree)

    def setRandomized(self, degree):
        return _Mistral2.Mistral2Solver_setRandomized(self, degree)

    def setRandomSeed(self, seed):
        return _Mistral2.Mistral2Solver_setRandomSeed(self, seed)

    def forceFiniteDomain(self, vars):
        return _Mistral2.Mistral2Solver_forceFiniteDomain(self, vars)

    def addNogood(self, vars, vals):
        return _Mistral2.Mistral2Solver_addNogood(self, vars, vals)

    def guide(self, vars, vals, probs):
        return _Mistral2.Mistral2Solver_guide(self, vars, vals, probs)

    def backtrackTo(self, level):
        return _Mistral2.Mistral2Solver_backtrackTo(self, level)

    def upOneLevel(self):
        return _Mistral2.Mistral2Solver_upOneLevel(self)

    def presolve(self):
        return _Mistral2.Mistral2Solver_presolve(self)

    def assign(self, X, v):
        return _Mistral2.Mistral2Solver_assign(self, X, v)

    def increase_init_level(self, i):
        return _Mistral2.Mistral2Solver_increase_init_level(self, i)

    def decrease_init_level(self, i):
        return _Mistral2.Mistral2Solver_decrease_init_level(self, i)

    def reset(self, full):
        return _Mistral2.Mistral2Solver_reset(self, full)

    def setLowerBounds(self, vars, vals):
        return _Mistral2.Mistral2Solver_setLowerBounds(self, vars, vals)

    def setUpperBounds(self, vars, vals):
        return _Mistral2.Mistral2Solver_setUpperBounds(self, vars, vals)

    def setRestartNogood(self):
        return _Mistral2.Mistral2Solver_setRestartNogood(self)

    def printPython(self):
        return _Mistral2.Mistral2Solver_printPython(self)

    def is_opt(self):
        return _Mistral2.Mistral2Solver_is_opt(self)

    def is_sat(self):
        return _Mistral2.Mistral2Solver_is_sat(self)

    def is_unsat(self):
        return _Mistral2.Mistral2Solver_is_unsat(self)

    def printStatistics(self):
        return _Mistral2.Mistral2Solver_printStatistics(self)

    def getBacktracks(self):
        return _Mistral2.Mistral2Solver_getBacktracks(self)

    def getNodes(self):
        return _Mistral2.Mistral2Solver_getNodes(self)

    def getFailures(self):
        return _Mistral2.Mistral2Solver_getFailures(self)

    def getChecks(self):
        return _Mistral2.Mistral2Solver_getChecks(self)

    def getPropags(self):
        return _Mistral2.Mistral2Solver_getPropags(self)

    def getTime(self):
        return _Mistral2.Mistral2Solver_getTime(self)

    def getRandomNumber(self):
        return _Mistral2.Mistral2Solver_getRandomNumber(self)

    def getNumVariables(self):
        return _Mistral2.Mistral2Solver_getNumVariables(self)

    def getNumConstraints(self):
        return _Mistral2.Mistral2Solver_getNumConstraints(self)

    def num_vars(self):
        return _Mistral2.Mistral2Solver_num_vars(self)

    def get_degree(self, i):
        return _Mistral2.Mistral2Solver_get_degree(self, i)
Mistral2Solver_swigregister = _Mistral2.Mistral2Solver_swigregister
Mistral2Solver_swigregister(Mistral2Solver)

class Mistral2ExpArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _Mistral2.new_Mistral2ExpArray()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2ExpArray
    __del__ = lambda self: None

    def size(self):
        return _Mistral2.Mistral2ExpArray_size(self)

    def add(self, arg):
        return _Mistral2.Mistral2ExpArray_add(self, arg)

    def get_item(self, i):
        return _Mistral2.Mistral2ExpArray_get_item(self, i)

    def set_item(self, i, item):
        return _Mistral2.Mistral2ExpArray_set_item(self, i, item)
Mistral2ExpArray_swigregister = _Mistral2.Mistral2ExpArray_swigregister
Mistral2ExpArray_swigregister(Mistral2ExpArray)

class Mistral2IntArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _Mistral2.new_Mistral2IntArray()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2IntArray
    __del__ = lambda self: None

    def size(self):
        return _Mistral2.Mistral2IntArray_size(self)

    def add(self, arg):
        return _Mistral2.Mistral2IntArray_add(self, arg)

    def get_item(self, i):
        return _Mistral2.Mistral2IntArray_get_item(self, i)

    def set_item(self, i, item):
        return _Mistral2.Mistral2IntArray_set_item(self, i, item)
Mistral2IntArray_swigregister = _Mistral2.Mistral2IntArray_swigregister
Mistral2IntArray_swigregister(Mistral2IntArray)

class Mistral2DoubleArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _Mistral2.new_Mistral2DoubleArray()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Mistral2.delete_Mistral2DoubleArray
    __del__ = lambda self: None

    def size(self):
        return _Mistral2.Mistral2DoubleArray_size(self)

    def add(self, arg):
        return _Mistral2.Mistral2DoubleArray_add(self, arg)

    def get_item(self, i):
        return _Mistral2.Mistral2DoubleArray_get_item(self, i)

    def set_item(self, i, item):
        return _Mistral2.Mistral2DoubleArray_set_item(self, i, item)
Mistral2DoubleArray_swigregister = _Mistral2.Mistral2DoubleArray_swigregister
Mistral2DoubleArray_swigregister(Mistral2DoubleArray)


import Numberjack

class Solver(Numberjack.NBJ_STD_Solver):
    def __init__(self, model=None, X=None, FD=False, clause_limit=-1, encoding=None):
        Numberjack.NBJ_STD_Solver.__init__(self, "Mistral2", "Mistral2", model, X, FD, clause_limit, encoding)



