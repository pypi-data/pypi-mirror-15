# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MiniSat', [dirname(__file__)])
        except ImportError:
            import _MiniSat
            return _MiniSat
        if fp is not None:
            try:
                _mod = imp.load_module('_MiniSat', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MiniSat = swig_import_helper()
    del swig_import_helper
else:
    import _MiniSat
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import Numberjack.solvers.SatWrapper
class MiniSatSolver(Numberjack.solvers.SatWrapper.SatWrapperSolver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _MiniSat.new_MiniSatSolver()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _MiniSat.delete_MiniSatSolver
    __del__ = lambda self: None

    def create_atom(self, dom, type):
        return _MiniSat.MiniSatSolver_create_atom(self, dom, type)

    def validate(self):
        return _MiniSat.MiniSatSolver_validate(self)

    def truth_value(self, x):
        return _MiniSat.MiniSatSolver_truth_value(self, x)

    def solve(self):
        return _MiniSat.MiniSatSolver_solve(self)

    def solveAndRestart(self, *args):
        return _MiniSat.MiniSatSolver_solveAndRestart(self, *args)

    def startNewSearch(self):
        return _MiniSat.MiniSatSolver_startNewSearch(self)

    def getNextSolution(self):
        return _MiniSat.MiniSatSolver_getNextSolution(self)

    def reset(self, full):
        return _MiniSat.MiniSatSolver_reset(self, full)

    def propagate(self):
        return _MiniSat.MiniSatSolver_propagate(self)

    def save(self):
        return _MiniSat.MiniSatSolver_save(self)

    def post(self, op, x, v):
        return _MiniSat.MiniSatSolver_post(self, op, x, v)

    def undo(self, nlevel):
        return _MiniSat.MiniSatSolver_undo(self, nlevel)

    def deduce(self):
        return _MiniSat.MiniSatSolver_deduce(self)

    def branch_right(self):
        return _MiniSat.MiniSatSolver_branch_right(self)

    def store_solution(self):
        return _MiniSat.MiniSatSolver_store_solution(self)

    def setFailureLimit(self, cutoff):
        return _MiniSat.MiniSatSolver_setFailureLimit(self, cutoff)

    def setNodeLimit(self, cutoff):
        return _MiniSat.MiniSatSolver_setNodeLimit(self, cutoff)

    def setTimeLimit(self, cutoff):
        return _MiniSat.MiniSatSolver_setTimeLimit(self, cutoff)

    def setVerbosity(self, degree):
        return _MiniSat.MiniSatSolver_setVerbosity(self, degree)

    def setRandomized(self, degree):
        return _MiniSat.MiniSatSolver_setRandomized(self, degree)

    def setRandomSeed(self, seed):
        return _MiniSat.MiniSatSolver_setRandomSeed(self, seed)

    def is_sat(self):
        return _MiniSat.MiniSatSolver_is_sat(self)

    def is_opt(self):
        return _MiniSat.MiniSatSolver_is_opt(self)

    def is_unsat(self):
        return _MiniSat.MiniSatSolver_is_unsat(self)

    def printStatistics(self):
        return _MiniSat.MiniSatSolver_printStatistics(self)

    def getBacktracks(self):
        return _MiniSat.MiniSatSolver_getBacktracks(self)

    def getNodes(self):
        return _MiniSat.MiniSatSolver_getNodes(self)

    def getFailures(self):
        return _MiniSat.MiniSatSolver_getFailures(self)

    def getPropags(self):
        return _MiniSat.MiniSatSolver_getPropags(self)

    def getTime(self):
        return _MiniSat.MiniSatSolver_getTime(self)
MiniSatSolver_swigregister = _MiniSat.MiniSatSolver_swigregister
MiniSatSolver_swigregister(MiniSatSolver)


import Numberjack

class Solver(Numberjack.NBJ_STD_Solver):
    def __init__(self, model=None, X=None, FD=False, clause_limit=-1, encoding=None):
        Numberjack.NBJ_STD_Solver.__init__(self, "MiniSat", "SatWrapper", model, X, FD, clause_limit, encoding)



