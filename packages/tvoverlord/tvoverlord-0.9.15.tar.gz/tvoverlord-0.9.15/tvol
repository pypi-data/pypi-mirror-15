#!/usr/bin/env python3

r"""Download and manage TV shows

Usage:
  tvol download    [-n] [-t] [-i] [-c COUNT] [-l LOCATION] [SHOW_NAME]
  tvol showmissing [-n] [-t]
  tvol info        [-n] [-a] [-x] [--ask-inactive] [--show-links] [--synopsis] [SHOW_NAME]
  tvol calendar    [-n] [-a] [-x] [--no-color] [--days DAYS] [SHOW_NAME]
  tvol addnew      SHOW_NAME
  tvol nondbshow   SEARCH_STRING [-c COUNT] [-l LOCATION]
  tvol editdbinfo  SHOW_NAME
  tvol history     (list [-w FIELDS]|copy|redownload) [CRITERIA]

  With no arguments, tv runs showmissing

  SHOW_NAME is a full or partial name of a tv show.  If SHOW_NAME is
  specified, tv will only act on matches to that name.  For example,
  if "fam" is used, "Family Guy" and "Modern Family" will be
  displayed.

Options:
  -h, --help
  -c COUNT, --count COUNT
                   Count of search results to list. [default: 10]
  -l DOWNLOAD_LOCATION, --location DOWNLOAD_LOCATION
                   Location to download the nzb files to
  -n, --no-cache   Re-download the show data instead of using the cached data
  -i, --ignore-warning
                   Ignore 'Not connected to vpn' warning
  -a, --show-all   Show all shows including the ones marked inactive
  -x, --sort-by-next  Sort by release date instead of the default alphabetical
  -t, --today      Show or download today's episodes
  --ask-inactive   Ask to make inactive shows that are cancelled
  --show-links     Show links to IMDB.com and TheTVDb.com for each show
  -s --synopsis    Display the show synopsis
  --days DAYS      The number of days to show in the calendar
  --no-color       Don't use color in output. Useful if output is to be
                   used in email or text file.
  -w FIELDS, --what-to-show FIELDS
                   An optional list of information to show seperated by commas.
                   It can be any of these: date, title, season, episode, magnet,
                   oneoff, complete, filename, destination
                   eg. --what-to-show 'title,filename,magnet'

TVOverlord source code is available at https://github.com/8cylinder/tv-overlord
Any feature requests, or bug reports should go there.
"""

import datetime
import os
import sqlite3
import textwrap

from pprint import pprint as pp
from dateutil import parser as date_parser
from docopt import docopt

from tvoverlord.allseries import AllSeries
from tvoverlord.consoleinput import ask_user as ask
from tvoverlord.series import Series
from tvoverlord.config import Config
from tvoverlord.tvutil import FancyPrint, dict_factory
from tvoverlord.util import U
from tvoverlord.location import Location
from tvoverlord.history import History


def edit_db(search_str):
    sql = 'SELECT * FROM shows WHERE name=:search'
    conn = sqlite3.connect(Config.db_file)
    conn.row_factory = dict_factory
    curs = conn.cursor()
    values = {'search': search_str}
    curs.execute(sql, values)
    row = curs.fetchone()

    if not row:
        print('"%s" not found' % search_str)
        exit()

    is_error = False

    print('While editing a field, hit <enter> to leave it unchanged.')
    print('Type "<ctrl> c" to cancel all edits.\n')
    try:
        new_name = input('Name: (%s) ' % (row['name']))
        if not new_name:
            new_name = row['name']

        new_search_engine_name = input('Search engine title: (%s) ' % (row['search_engine_name']))
        if not new_search_engine_name:
            new_search_engine_name = row['search_engine_name']

        new_season = input('Current season: (%s) ' % (row['season']))
        if not new_season:
            new_season = str(row['season'])

        new_episode = input('Last episode: (%s) ' % (row['episode']))
        if not new_episode:
            new_episode = str(row['episode'])

        new_status = input('Status: (%s) ' % (row['status']))
        if not new_status:
            new_status = row['status']

        print()

    except KeyboardInterrupt:
        print('\nDatabase edit canceled.')
        exit()

    if not new_season.isdigit():
        print('Error: Season must be a number')
        is_error = True

    if not new_episode.isdigit():
        print('Error: Episode must be a number')
        is_error = True

    if new_status not in ['active', 'inactive']:
        print('Error: Status must be either "active" or "inactive"')
        is_error = True

    if is_error:
        exit()

    sql = '''UPDATE shows SET name=:name, season=:season,
        episode=:episode, status=:status, search_engine_name=:search_engine_name
        WHERE thetvdb_series_id=:tvdb_id'''

    row_values = {'name': new_name, 'season': new_season, 'episode': new_episode,
                  'status': new_status, 'search_engine_name': new_search_engine_name,
                  'tvdb_id': row['thetvdb_series_id']}

    curs.execute(sql, row_values)

    print('Database updated')

    conn.commit()
    conn.close()

def init(docopt_args):
    class Args:
        """Mapping from docopt args to object

        Makes it easier to change command line options.

        Instead of: args['--search-provider']
        write as:   args.search_provider
        """
        # subgroups
        download        = docopt_args['download']
        showmissing     = docopt_args['showmissing']
        info            = docopt_args['info']
        calendar        = docopt_args['calendar']
        addnew          = docopt_args['addnew']
        nondbshow       = docopt_args['nondbshow']
        editdbinfo      = docopt_args['editdbinfo']
        history         = docopt_args['history']
        # arguments
        search_string   = docopt_args['SEARCH_STRING']
        show_name       = docopt_args['SHOW_NAME']
        criteria        = docopt_args['CRITERIA']
        show            = docopt_args['list']
        copy            = docopt_args['copy']
        redownload      = docopt_args['redownload']
        # options
        count           = docopt_args['--count']
        location        = docopt_args['--location']
        no_cache        = docopt_args['--no-cache']
        show_all        = docopt_args['--show-all']
        sort_by_next    = docopt_args['--sort-by-next']
        ask_inactive    = docopt_args['--ask-inactive']
        show_links      = docopt_args['--show-links']
        synopsis        = docopt_args['--synopsis']
        days            = docopt_args['--days']
        no_color        = docopt_args['--no-color']
        today           = docopt_args['--today']
        ignore          = docopt_args['--ignore-warning']
        what            = docopt_args['--what-to-show']

    if Args.location:
        Config.staging = Args['--location']
    if Args.no_cache:
        Config.use_cache = False

    count = int(Args.count)  # convert --count to int
    Config.episode_display_count = count

    if Args.info:
        show_info = {}
        counter = 0
        show_name = Args.show_name
        all_shows = AllSeries()

        # When the user specifies a single show, turn on --show-all
        # because the show they are asking for might an inactive show
        # and turn on --synopsis and --show-links since its only one
        # show we may as well show everything
        if show_name:
            Args.show_all = True
            Args.synopsis = True
            Args.show_links = True
            all_shows.name_filter(show_name)

        for series in all_shows:
            title = series.db_name

            # check if the series object has a status attribute. if it
            # doesn't then its probably a show that nothing is known
            # about it yet.
            if 'status' not in dir(series):
                continue

            if series.status == 'Ended':
                status = U.hi_color(series.status, foreground=196)
            else:
                status = ''

            # build first row of info for each show
            se = 'Last downloaded: S%sE%s' % (
                str(series.db_current_season).rjust(2, '0'),
                str(series.db_last_episode).rjust(2, '0'),
            )
            se = U.hi_color(se, foreground=48)

            imdb_url = thetvdb_url = ''
            if Args.show_links:
                imdb_url = U.hi_color('\n    IMDB.com:    http://imdb.com/title/%s' % series.imdb_id, foreground=20)
                thetvdb_url = U.hi_color('\n    TheTVDB.com: http://thetvdb.com/?tab=series&id=%s' % series.id,
                                         foreground=20)

            synopsis = ''
            if Args.synopsis and series.overview:
                paragraph = series.overview
                indent = '    '
                fill_width = 80
                if int(series.console_columns) < fill_width:
                    fill_width = series.console_columns
                paragraph = textwrap.fill(paragraph, width=int(fill_width), initial_indent=indent,
                                          subsequent_indent=indent)
                synopsis = '\n%s' % paragraph

            first_row_a = []
            fancy_title = U.effects(['boldon'], title)
            for i in [fancy_title + ',', se, status, imdb_url, thetvdb_url, synopsis]:
                if i: first_row_a.append(i)
            first_row = ' '.join(first_row_a)

            # build 'upcoming episodes' list
            today = datetime.datetime.today()
            first_time = True
            episodes_list = []
            counter += 1
            for i in series.series:  # season
                for j in series.series[i]:  # episode
                    b_date = series.series[i][j]['firstaired']
                    if not b_date: continue  # some episode have no broadcast date?

                    split_date = b_date.split('-')
                    broadcast_date = datetime.datetime(
                        int(split_date[0]), int(split_date[1]), int(split_date[2]))

                    if not Args.show_all:
                        if broadcast_date < today:
                            continue

                    future_date = date_parser.parse(b_date)
                    diff = future_date - today
                    fancy_date = future_date.strftime('%b %-d')
                    if broadcast_date >= today:
                        episodes_list.append('S%sE%s, %s (%s)' % (
                            series.series[i][j]['seasonnumber'].rjust(2, '0'),
                            series.series[i][j]['episodenumber'].rjust(2, '0'),
                            fancy_date,
                            diff.days + 1,
                        ))

                    if first_time:
                        first_time = False
                        if Args.sort_by_next:
                            sort_key = str(diff.days).rjust(5, '0') + str(counter)
                        else:
                            sort_key = series.db_name.replace('The ', '')

            if not first_time:
                if episodes_list:
                    indent = '    '
                    episode_list = 'Future episodes: ' + ' - '.join(episodes_list)
                    episodes = textwrap.fill(
                        U.hi_color(episode_list, foreground=22),
                        width=int(series.console_columns),
                        initial_indent=indent,
                        subsequent_indent=indent
                    )
                    show_info[sort_key] = first_row + '\n' + episodes
                else:
                    show_info[sort_key] = first_row

            if Args.ask_inactive:
                if series.status == 'Ended' and first_time:
                    set_status = ask(
                        '%s has ended, and all have been downloaded. Set as inactive? [y/n]: ' %
                        title)
                    if set_status == 'y':
                        series.set_inactive()

        keys = list(show_info.keys())
        keys.sort()
        for i in keys:
            print(show_info[i])

    elif Args.calendar:
        if Args.no_color:
            use_color = False
        else:
            use_color = True

        # set colors for ui elements
        header_color = 17
        date_color_1 = 17
        date_color_2 = 0
        title_color_1 = 18
        title_color_2 = 0

        title_width = 20  # width of show titles column
        console_columns = int(os.popen('stty size', 'r').read().split()[1])
        spacer = ' '  # can be any string, any length
        today = datetime.datetime.today()

        days = Args.days
        if days:
            days = days.split(',')
            days = [int(x) for x in days]
            if len(days) == 2:
                today = today + datetime.timedelta(days=days[0])
                calendar_columns = days[1]
            if len(days) == 1:
                calendar_columns = days[0]
        else:
            calendar_columns = console_columns - (title_width + len(spacer))

        # Days_chars can be any string of seven chars. eg: 'mtwtfSS'
        days_chars = '.....::'  # first char is monday
        monthstart = '|'  # marker used to indicate the begining of month

        # build date title row
        months_row = today.strftime('%b') + (' ' * calendar_columns)
        days_row = ''
        daybefore = today - datetime.timedelta(days=1)
        for days in range(calendar_columns):
            cur_date = today + datetime.timedelta(days=days)

            if cur_date.month != daybefore.month:
                days_row += monthstart
                month = cur_date.strftime('%b')
                month_len = len(month)
                months_row = months_row[:days] + month + months_row[(days + month_len):]
            else:
                days_row += days_chars[cur_date.weekday()]

            daybefore = cur_date

        months_row = months_row[:calendar_columns]  # chop off any extra spaces created by adding the months
        if use_color:
            months_row = U.hi_color(months_row, 225, header_color)
            days_row = U.hi_color(days_row, 225, header_color)
        months_row = (' ' * title_width) + (' ' * len(spacer)) + months_row
        days_row = (' ' * title_width) + (' ' * len(spacer)) + days_row
        print(months_row)
        print(days_row)

        # build shows rows
        step = 3
        color_row = False
        counter = 1
        season_marker = '-'
        all_series = AllSeries()
        if Args.sort_by_next:
            all_series.sort_by_date()
        show_name = Args.show_name
        if show_name:
            all_series.name_filter(show_name)
        for series in all_series:
            broadcast_row = ''
            title = series.db_name[:title_width].ljust(title_width)
            has_episode = False
            first_display_date = True
            last_days_away = 0
            last_date = 0
            for i in series.series:  # season
                for j in series.series[i]:  # episode
                    episode_number = series.series[i][j]['episodenumber']
                    b_date = series.series[i][j]['firstaired']
                    if not b_date:
                        continue  # some episode have no broadcast date?
                    split_date = b_date.split('-')
                    broadcast_date = datetime.datetime(
                        int(split_date[0]), int(split_date[1]), int(split_date[2]))
                    if broadcast_date == last_date:
                        continue  # sometimes multiple episodes have the same date, don't repeat them.
                    last_date = broadcast_date
                    if broadcast_date.date() < today.date():
                        continue  # don't include episodes before today
                    days_away = (broadcast_date - today).days + 1
                    if days_away >= calendar_columns:
                        continue  # don't include days after the width of the screen
                    if series.series[i][j]['seasonnumber'] == '0':
                        continue  # not interested in season 0 episodes.

                    if first_display_date:
                        if int(episode_number) > 1:
                            before_first = season_marker * days_away
                        else:
                            before_first = ' ' * days_away
                        broadcast_row = before_first + episode_number
                        first_display_date = False
                        # set the next episode date in the db while we're here:
                        series.set_next_episode(broadcast_date.date())
                    else:
                        episode_char_len = len(str(int(episode_number) - 1))
                        broadcast_row = broadcast_row + (
                            season_marker * (days_away - last_days_away - episode_char_len)) + episode_number

                    last_days_away = days_away

                    has_episode = True

            broadcast_row = broadcast_row[:calendar_columns].ljust(calendar_columns)

            if has_episode or Args.show_all:
                if use_color and color_row:
                    title = U.hi_color(title, 225, title_color_1)
                    broadcast_row = U.hi_color(broadcast_row, 225, date_color_1)
                elif use_color and not color_row:
                    title = U.hi_color(title, 225, title_color_2)
                    broadcast_row = U.hi_color(broadcast_row, 225, date_color_2)
                row = title + spacer + broadcast_row
                print(row)

                if counter >= step:
                    counter = 0
                    color_row = True
                else:
                    color_row = False
                    counter += 1

    elif Args.showmissing:
        fp = FancyPrint()
        for series in AllSeries():
            if series.is_missing(Args.today):
                fp.standard_print(series.show_missing())
            else:
                fp.fancy_print('Show up to date: %s' % series.db_name)
        fp.done()

    elif Args.download:
        all_series = AllSeries()
        show_name = Args.show_name
        if Config.ip and not Args.ignore:
            L = Location()
            if L.ips_match(Config.ip):
                print('%s not connected to VPN' % (U.effects(['redb', 'boldon'], ' Warning: ')))
                exit()
        if show_name:
            all_series.name_filter(show_name)
        for series in all_series:
            series.download_missing(Config.episode_display_count, Args.today)

    elif Args.addnew:
        new_show = Series(show_type='new')
        new_show.add_new(name=Args.show_name)

    elif Args.nondbshow:
        nons = Series(show_type='nondb')
        nons.non_db(Args.search_string, Config.episode_display_count)

    elif Args.editdbinfo:
        edit_db(Args.show_name)

    elif Args.history:
        criteria = ''
        # try to parse criteria as an int, then as a date.  If neither don't
        # work, pass it on as a string which should be a show title
        try:
            criteria = int(Args.criteria)
        except:
            try:
                criteria = date_parser.parse(Args.criteria)
            except:
                #print 'CRITERIA is not a number or a date'
                #exit()
                criteria = Args.criteria

        #print '...', Args.criteria, criteria

        history = History(criteria)
        if Args.show:
            history.show(Args.what)
        elif Args.copy:
            history.copy()
        elif Args.redownload:
            history.download()


if __name__ == '__main__':
    docopt_args = docopt(__doc__, version='0.1')
    #print docopt_args
    #exit()
    try:
        init(docopt_args)
    except KeyboardInterrupt:
        print('\b\b<Quitting TV>')
