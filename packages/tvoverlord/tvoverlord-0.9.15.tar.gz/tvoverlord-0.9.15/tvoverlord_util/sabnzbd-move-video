#!/bin/bash

# $1	The final directory of the job (full path)
# $2	The original name of the NZB file
# $3	Clean version of the job name (no path info and ".nzb" removed)
# $4	Indexer's report number (if supported)
# $5	User-defined category
# $6	Group that the NZB was posted in e.g. alt.binaries.x
# $7	Status of post processing. 0 = OK, 1=failed verification, 2=failed unpack, 3=1+2

# eg:
# $1  /home/sm/nzbdownloads/complete/TV/Primeval
# $2  Primeval_S03E08_WS_PDTV_XviD_RiVER.nzb
# $3  Primeval_S03E08_WS_PDTV_XviD_RiVER
# $4
# $5  tv
# $6  alt.binaries.multimedia
# $7  0

# to test script:
# ./move-video /home/sm/nzbdownloads/complete/TV/30_Rock/ 30_Rock_S05E20E21_HDTV_XviD_LOL.nzb 30_Rock_S05E20E21_HDTV_XviD_LOL x tv x 0

logf="/home/sm/nzbdownloads/scripts/$(basename $0).log"
function error
{
	echo "ERROR  $1" >> $logf
	msg "ERROR $1"
}
function log
{
	echo "$1" >> $logf
}
function msg
{
	if notify-send --help &> /dev/null; then
		icon1='/usr/share/icons/Faenza/places/scalable/folder-videos.svg'
		icon2='/usr/share/icons/gnome-wine/scalable/places/folder-videos.svg'
		if [ -e icon1 ]; then
			icon=$icon1
		elif [ -e icon2 ]; then
			icon=$icon2
		fi
		notify-send --hint=int:transient:1 --icon=$icon 'Video Mover' "$1"
	elif kdialog --help &> /dev/null; then
		kdialog --title 'Video Mover' --passivepopup "$1" 10;
	fi
}

log "$(date "+%b %d, %l:%M:%S %p") ============================"
log "$1"
log "$2"

# $5 == user defined category, ie. 'tv'
if [ ! "$5" = "tv" ]; then
	exit 0
fi

# if sabnzbd+ status doesn't == 0 (success), exit.
if [ ! "$7" = '0' ]; then
	error "Download unsucessfull.  Sabnzbd error #: $7"
	exit 0
fi

source=$1

dest="/home/sm/net1/dl/TV Shows/"
if [ ! -d "$dest" ]; then
	error "$dest does not exist";
	exit 1
fi

storage=/home/sm/nzbdownloads/misc_files_from_nzbs
if [ ! -d $storage ]; then
	if ! mkdir $storage; then
		error "Could not create $storage";
		exit 1
	fi
fi

cd "$source"

# clean up files I don't want
# sometimes full shows have the name sample in
# it so can't automaticaly delete files with
# sample string in it.
#log "delete sample: $(find -iname "*sample*")"
#find -iname "*sample*" -delete

log "move: $(find -iname "*srr" \
	-or -iname "*sfv" \
	-or -iname "*nfo" \
	-or -iname "*idx" \
	-or -iname "*nzb" \
	-or -iname "*srt" \
	-or -iname "*srs" \
	-or -iname "*sub" \
	-or -iname "*txt" \
	-or -iname "*url" \
	-or -iname "*torrent" \
)"

find \( -iname "*srr" \
	-or -iname "*sfv" \
	-or -iname "*nfo" \
	-or -iname "*idx" \
	-or -iname "*nzb" \
	-or -iname "*srt" \
	-or -iname "*srs" \
	-or -iname "*sub" \
	-or -iname "*txt" \
	-or -iname "*url" \
	-or -iname "*torrent" \
	\) -exec mv "{}" "$storage" \;


# now move files to the destination folder
show=$(basename $1)
shopt -s extglob # turn on extended globbing if its not already
filename=$(ls !(_FAILED_*) -t | head -1) # find the most recent file
log "FILENAME: $filename"
log "dest: $dest"
dest_folder=$(basename $1)
log "dest_folder: $dest_folder"
if [ ! -d "$dest/$dest_folder" ]; then
	mkdir "$dest/$dest_folder"
fi

if cp -r --no-clobber "$source" "$dest" 2>>$logf; then
# if cp -v "$source/$filename" "$dest/$dest_folder" 1>>$logf 2>>$logf; then
	msg "$show complete\n\t$dest/$dest_folder"
	# log "copy: $source --> $dest"
else
	error "Error copying $show"
fi

exit 0
