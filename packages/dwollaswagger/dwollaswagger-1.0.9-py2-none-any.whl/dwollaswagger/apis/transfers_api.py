#!/usr/bin/env python
# coding: utf-8

"""
TransfersApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os
import urllib

# python 2 and python 3 compatibility library
from six import iteritems

from .. import configuration
from ..api_client import ApiClient

class TransfersApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
        else:
            if not configuration.api_client:
                configuration.api_client = ApiClient('https://localhost/')
            self.api_client = configuration.api_client
        # Authentication methods
        self.auth_settings = ['oauth2']
    
    
    def get_account_transfers(self, id, **kwargs):
        """
        Get an account's transfers.
        

        :param str id: Account id to get transfers for. (required)
        :param int limit: How many results to return. 
        :param int offset: How many results to skip. 
        
        :return: TransferListResponse
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `get_account_transfers`")
        
        all_params = ['id', 'limit', 'offset']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_account_transfers" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{id}/transfers'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        if 'limit' in params:
            query_params['limit'] = params['limit']
        
        if 'offset' in params:
            query_params['offset'] = params['offset']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/vnd.dwolla.v1.hal+json'])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='TransferListResponse', auth_settings=self.auth_settings)
        
        return response
        
    def get_customer_transfers(self, id, **kwargs):
        """
        Get a customer's transfers.
        

        :param str id: Customer id to get transfers for. (required)
        :param int limit: How many results to return. 
        :param int offset: How many results to skip. 
        
        :return: TransferListResponse
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `get_customer_transfers`")
        
        all_params = ['id', 'limit', 'offset']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_customer_transfers" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/customers/{id}/transfers'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        if 'limit' in params:
            query_params['limit'] = params['limit']
        
        if 'offset' in params:
            query_params['offset'] = params['offset']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/vnd.dwolla.v1.hal+json'])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='TransferListResponse', auth_settings=self.auth_settings)
        
        return response
        
    def create(self, **kwargs):
        """
        Create a new transfer.
        

        :param TransferRequestBody body: Transfer request. 
        
        :return: Unit
        """
        
        all_params = ['body']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method create" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/transfers'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        if 'body' in params:
            body_params = params['body']
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/vnd.dwolla.v1.hal+json'])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='Unit', auth_settings=self.auth_settings)
        
        return response
        
    def by_id(self, id, **kwargs):
        """
        Get a transfer by id.
        

        :param str id: ID of transfer to get. (required)
        
        :return: Transfer
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `by_id`")
        
        all_params = ['id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method by_id" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/transfers/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='Transfer', auth_settings=self.auth_settings)
        
        return response
        
    def update(self, id, **kwargs):
        """
        Update a transfer.
        

        :param UpdateTransfer body: Transfer to update. 
        :param str id: ID of transfer to get. (required)
        
        :return: Transfer
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `update`")
        
        all_params = ['body', 'id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method update" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/transfers/{id}'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        if 'body' in params:
            body_params = params['body']
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/vnd.dwolla.v1.hal+json'])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='Transfer', auth_settings=self.auth_settings)
        
        return response
        
    def failure_by_id(self, id, **kwargs):
        """
        Get a bank transfer failure by transfer id.
        

        :param str id: ID of failed bank transfer to get. (required)
        
        :return: Transfer
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `failure_by_id`")
        
        all_params = ['id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method failure_by_id" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/transfers/{id}/failure'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='Transfer', auth_settings=self.auth_settings)
        
        return response
        
    def get_fees_by_source(self, id, **kwargs):
        """
        Get a transfer's fees.
        

        :param str id: Transfer id to get fees for. (required)
        
        :return: TransferListResponse
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `get_fees_by_source`")
        
        all_params = ['id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_fees_by_source" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/transfers/{id}/fees'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/vnd.dwolla.v1.hal+json'])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='TransferListResponse', auth_settings=self.auth_settings)
        
        return response
        









