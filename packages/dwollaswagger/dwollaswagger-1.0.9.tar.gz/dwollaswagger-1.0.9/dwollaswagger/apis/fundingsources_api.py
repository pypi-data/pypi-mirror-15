#!/usr/bin/env python
# coding: utf-8

"""
FundingsourcesApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os
import urllib

# python 2 and python 3 compatibility library
from six import iteritems

from .. import configuration
from ..api_client import ApiClient

class FundingsourcesApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
        else:
            if not configuration.api_client:
                configuration.api_client = ApiClient('https://localhost/')
            self.api_client = configuration.api_client
        # Authentication methods
        self.auth_settings = ['oauth2']
    
    
    def get_account_funding_sources(self, id, **kwargs):
        """
        Get an account's funding sources.
        

        :param str id: Account id to get funding sources for. (required)
        
        :return: FundingSourceListResponse
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `get_account_funding_sources`")
        
        all_params = ['id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_account_funding_sources" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/accounts/{id}/funding-sources'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/vnd.dwolla.v1.hal+json'])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='FundingSourceListResponse', auth_settings=self.auth_settings)
        
        return response
        
    def get_customer_funding_sources(self, id, **kwargs):
        """
        Get a customer's funding sources.
        

        :param str id: Customer id to get funding sources for. (required)
        
        :return: FundingSourceListResponse
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `get_customer_funding_sources`")
        
        all_params = ['id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_customer_funding_sources" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/customers/{id}/funding-sources'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/vnd.dwolla.v1.hal+json'])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='FundingSourceListResponse', auth_settings=self.auth_settings)
        
        return response
        
    def create_customer_funding_source(self, id, **kwargs):
        """
        Create a new funding source.
        

        :param CreateFundingSourceRequest body: Funding source to create. 
        :param str id: Customer id to create funding source for. (required)
        
        :return: FundingSource
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `create_customer_funding_source`")
        
        all_params = ['body', 'id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method create_customer_funding_source" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/customers/{id}/funding-sources'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        if 'body' in params:
            body_params = params['body']
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/vnd.dwolla.v1.hal+json'])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='FundingSource', auth_settings=self.auth_settings)
        
        return response
        
    def create_funding_source(self, **kwargs):
        """
        Create a new funding source.
        

        :param CreateFundingSourceRequest body: Funding source to create. 
        
        :return: FundingSource
        """
        
        all_params = ['body']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method create_funding_source" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/funding-sources'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        if 'body' in params:
            body_params = params['body']
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['application/vnd.dwolla.v1.hal+json'])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='FundingSource', auth_settings=self.auth_settings)
        
        return response
        
    def id(self, id, **kwargs):
        """
        Get a funding source by id.
        

        :param str id: Funding source ID to get. (required)
        
        :return: FundingSource
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `id`")
        
        all_params = ['id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method id" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/funding-sources/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='FundingSource', auth_settings=self.auth_settings)
        
        return response
        
    def soft_delete(self, id, **kwargs):
        """
        Remove a funding source.
        

        :param RemoveBankRequest body: request body to remove a funding source 
        :param str id: Funding source ID to remove. (required)
        
        :return: Unit
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `soft_delete`")
        
        all_params = ['body', 'id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method soft_delete" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/funding-sources/{id}'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        if 'body' in params:
            body_params = params['body']
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='Unit', auth_settings=self.auth_settings)
        
        return response
        
    def delete(self, id, **kwargs):
        """
        Delete a funding source by id.
        

        :param str id: Funding source ID to delete. (required)
        
        :return: FundingSource
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `delete`")
        
        all_params = ['id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/funding-sources/{id}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='FundingSource', auth_settings=self.auth_settings)
        
        return response
        
    def verify_micro_deposits_exist(self, id, **kwargs):
        """
        Verify pending verifications exist.
        

        :param str id: Funding source ID to check for pending validation deposits for. (required)
        
        :return: MicroDeposits
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `verify_micro_deposits_exist`")
        
        all_params = ['id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method verify_micro_deposits_exist" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/funding-sources/{id}/micro-deposits'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='MicroDeposits', auth_settings=self.auth_settings)
        
        return response
        
    def micro_deposits(self, id, **kwargs):
        """
        Initiate or verify micro deposits for bank verification.
        

        :param VerifyMicroDepositsRequest body: Optional micro deposit amounts for verification 
        :param str id: Funding source ID to initiate or verify micro deposits for. (required)
        
        :return: MicroDeposits
        """
        
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `micro_deposits`")
        
        all_params = ['body', 'id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method micro_deposits" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/funding-sources/{id}/micro-deposits'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        if 'id' in params:
            path_params['id'] = params['id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        if 'body' in params:
            body_params = params['body']
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/vnd.dwolla.v1.hal+json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])


        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='MicroDeposits', auth_settings=self.auth_settings)
        
        return response
        









