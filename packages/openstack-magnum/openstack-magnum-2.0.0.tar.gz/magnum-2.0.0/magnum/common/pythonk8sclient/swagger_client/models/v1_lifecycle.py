# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems


class V1Lifecycle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Swagger model

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'post_start': 'V1Handler',
            'pre_stop': 'V1Handler'
        }

        self.attribute_map = {
            'post_start': 'postStart',
            'pre_stop': 'preStop'
        }

        self._post_start = None
        self._pre_stop = None

    @property
    def post_start(self):
        """
        Gets the post_start of this V1Lifecycle.
        called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes; see http://releases.k8s.io/v1.0.4/docs/container-environment.md#hook-details

        :return: The post_start of this V1Lifecycle.
        :rtype: V1Handler
        """
        return self._post_start

    @post_start.setter
    def post_start(self, post_start):
        """
        Sets the post_start of this V1Lifecycle.
        called immediately after a container is started; if the handler fails, the container is terminated and restarted according to its restart policy; other management of the container blocks until the hook completes; see http://releases.k8s.io/v1.0.4/docs/container-environment.md#hook-details

        :param post_start: The post_start of this V1Lifecycle.
        :type: V1Handler
        """
        self._post_start = post_start

    @property
    def pre_stop(self):
        """
        Gets the pre_stop of this V1Lifecycle.
        called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes; see http://releases.k8s.io/v1.0.4/docs/container-environment.md#hook-details

        :return: The pre_stop of this V1Lifecycle.
        :rtype: V1Handler
        """
        return self._pre_stop

    @pre_stop.setter
    def pre_stop(self, pre_stop):
        """
        Sets the pre_stop of this V1Lifecycle.
        called before a container is terminated; the container is terminated after the handler completes; other management of the container blocks until the hook completes; see http://releases.k8s.io/v1.0.4/docs/container-environment.md#hook-details

        :param pre_stop: The pre_stop of this V1Lifecycle.
        :type: V1Handler
        """
        self._pre_stop = pre_stop

    def to_dict(self):
        """
        Return model properties dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Return model properties str
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
