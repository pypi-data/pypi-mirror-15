# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class BigInt(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BigInt - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'big_integer': 'BigInteger',
            'valid_long': 'bool',
            'valid_double': 'bool',
            'valid_float': 'bool',
            'valid_byte': 'bool',
            'valid_short': 'bool',
            'valid_char': 'bool',
            'valid_int': 'bool',
            'whole': 'bool'
        }

        self.attribute_map = {
            'big_integer': 'bigInteger',
            'valid_long': 'validLong',
            'valid_double': 'validDouble',
            'valid_float': 'validFloat',
            'valid_byte': 'validByte',
            'valid_short': 'validShort',
            'valid_char': 'validChar',
            'valid_int': 'validInt',
            'whole': 'whole'
        }

        self._big_integer = None
        self._valid_long = None
        self._valid_double = None
        self._valid_float = None
        self._valid_byte = None
        self._valid_short = None
        self._valid_char = None
        self._valid_int = None
        self._whole = None

    @property
    def big_integer(self):
        """
        Gets the big_integer of this BigInt.


        :return: The big_integer of this BigInt.
        :rtype: BigInteger
        """
        return self._big_integer

    @big_integer.setter
    def big_integer(self, big_integer):
        """
        Sets the big_integer of this BigInt.


        :param big_integer: The big_integer of this BigInt.
        :type: BigInteger
        """
        self._big_integer = big_integer

    @property
    def valid_long(self):
        """
        Gets the valid_long of this BigInt.


        :return: The valid_long of this BigInt.
        :rtype: bool
        """
        return self._valid_long

    @valid_long.setter
    def valid_long(self, valid_long):
        """
        Sets the valid_long of this BigInt.


        :param valid_long: The valid_long of this BigInt.
        :type: bool
        """
        self._valid_long = valid_long

    @property
    def valid_double(self):
        """
        Gets the valid_double of this BigInt.


        :return: The valid_double of this BigInt.
        :rtype: bool
        """
        return self._valid_double

    @valid_double.setter
    def valid_double(self, valid_double):
        """
        Sets the valid_double of this BigInt.


        :param valid_double: The valid_double of this BigInt.
        :type: bool
        """
        self._valid_double = valid_double

    @property
    def valid_float(self):
        """
        Gets the valid_float of this BigInt.


        :return: The valid_float of this BigInt.
        :rtype: bool
        """
        return self._valid_float

    @valid_float.setter
    def valid_float(self, valid_float):
        """
        Sets the valid_float of this BigInt.


        :param valid_float: The valid_float of this BigInt.
        :type: bool
        """
        self._valid_float = valid_float

    @property
    def valid_byte(self):
        """
        Gets the valid_byte of this BigInt.


        :return: The valid_byte of this BigInt.
        :rtype: bool
        """
        return self._valid_byte

    @valid_byte.setter
    def valid_byte(self, valid_byte):
        """
        Sets the valid_byte of this BigInt.


        :param valid_byte: The valid_byte of this BigInt.
        :type: bool
        """
        self._valid_byte = valid_byte

    @property
    def valid_short(self):
        """
        Gets the valid_short of this BigInt.


        :return: The valid_short of this BigInt.
        :rtype: bool
        """
        return self._valid_short

    @valid_short.setter
    def valid_short(self, valid_short):
        """
        Sets the valid_short of this BigInt.


        :param valid_short: The valid_short of this BigInt.
        :type: bool
        """
        self._valid_short = valid_short

    @property
    def valid_char(self):
        """
        Gets the valid_char of this BigInt.


        :return: The valid_char of this BigInt.
        :rtype: bool
        """
        return self._valid_char

    @valid_char.setter
    def valid_char(self, valid_char):
        """
        Sets the valid_char of this BigInt.


        :param valid_char: The valid_char of this BigInt.
        :type: bool
        """
        self._valid_char = valid_char

    @property
    def valid_int(self):
        """
        Gets the valid_int of this BigInt.


        :return: The valid_int of this BigInt.
        :rtype: bool
        """
        return self._valid_int

    @valid_int.setter
    def valid_int(self, valid_int):
        """
        Sets the valid_int of this BigInt.


        :param valid_int: The valid_int of this BigInt.
        :type: bool
        """
        self._valid_int = valid_int

    @property
    def whole(self):
        """
        Gets the whole of this BigInt.


        :return: The whole of this BigInt.
        :rtype: bool
        """
        return self._whole

    @whole.setter
    def whole(self, whole):
        """
        Sets the whole of this BigInt.


        :param whole: The whole of this BigInt.
        :type: bool
        """
        self._whole = whole

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

