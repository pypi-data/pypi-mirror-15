# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Uri(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Uri - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'scheme': 'str',
            'authority': 'Authority',
            'path': 'Path',
            'query': 'Query',
            'fragment': 'str',
            'relative': 'bool',
            'empty': 'bool',
            'absolute': 'bool'
        }

        self.attribute_map = {
            'scheme': 'scheme',
            'authority': 'authority',
            'path': 'path',
            'query': 'query',
            'fragment': 'fragment',
            'relative': 'relative',
            'empty': 'empty',
            'absolute': 'absolute'
        }

        self._scheme = None
        self._authority = None
        self._path = None
        self._query = None
        self._fragment = None
        self._relative = None
        self._empty = None
        self._absolute = None

    @property
    def scheme(self):
        """
        Gets the scheme of this Uri.


        :return: The scheme of this Uri.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """
        Sets the scheme of this Uri.


        :param scheme: The scheme of this Uri.
        :type: str
        """
        self._scheme = scheme

    @property
    def authority(self):
        """
        Gets the authority of this Uri.


        :return: The authority of this Uri.
        :rtype: Authority
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """
        Sets the authority of this Uri.


        :param authority: The authority of this Uri.
        :type: Authority
        """
        self._authority = authority

    @property
    def path(self):
        """
        Gets the path of this Uri.


        :return: The path of this Uri.
        :rtype: Path
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this Uri.


        :param path: The path of this Uri.
        :type: Path
        """
        self._path = path

    @property
    def query(self):
        """
        Gets the query of this Uri.


        :return: The query of this Uri.
        :rtype: Query
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this Uri.


        :param query: The query of this Uri.
        :type: Query
        """
        self._query = query

    @property
    def fragment(self):
        """
        Gets the fragment of this Uri.


        :return: The fragment of this Uri.
        :rtype: str
        """
        return self._fragment

    @fragment.setter
    def fragment(self, fragment):
        """
        Sets the fragment of this Uri.


        :param fragment: The fragment of this Uri.
        :type: str
        """
        self._fragment = fragment

    @property
    def relative(self):
        """
        Gets the relative of this Uri.


        :return: The relative of this Uri.
        :rtype: bool
        """
        return self._relative

    @relative.setter
    def relative(self, relative):
        """
        Sets the relative of this Uri.


        :param relative: The relative of this Uri.
        :type: bool
        """
        self._relative = relative

    @property
    def empty(self):
        """
        Gets the empty of this Uri.


        :return: The empty of this Uri.
        :rtype: bool
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """
        Sets the empty of this Uri.


        :param empty: The empty of this Uri.
        :type: bool
        """
        self._empty = empty

    @property
    def absolute(self):
        """
        Gets the absolute of this Uri.


        :return: The absolute of this Uri.
        :rtype: bool
        """
        return self._absolute

    @absolute.setter
    def absolute(self, absolute):
        """
        Sets the absolute of this Uri.


        :param absolute: The absolute of this Uri.
        :type: bool
        """
        self._absolute = absolute

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

