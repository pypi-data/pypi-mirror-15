# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CreateSubscriptionRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CreateSubscriptionRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'topic': 'str',
            'selector': 'str',
            'endpoint': 'str'
        }

        self.attribute_map = {
            'topic': 'topic',
            'selector': 'selector',
            'endpoint': 'endpoint'
        }

        self._topic = None
        self._selector = None
        self._endpoint = None

    @property
    def topic(self):
        """
        Gets the topic of this CreateSubscriptionRequest.


        :return: The topic of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """
        Sets the topic of this CreateSubscriptionRequest.


        :param topic: The topic of this CreateSubscriptionRequest.
        :type: str
        """
        self._topic = topic

    @property
    def selector(self):
        """
        Gets the selector of this CreateSubscriptionRequest.


        :return: The selector of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """
        Sets the selector of this CreateSubscriptionRequest.


        :param selector: The selector of this CreateSubscriptionRequest.
        :type: str
        """
        self._selector = selector

    @property
    def endpoint(self):
        """
        Gets the endpoint of this CreateSubscriptionRequest.


        :return: The endpoint of this CreateSubscriptionRequest.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """
        Sets the endpoint of this CreateSubscriptionRequest.


        :param endpoint: The endpoint of this CreateSubscriptionRequest.
        :type: str
        """
        self._endpoint = endpoint

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

