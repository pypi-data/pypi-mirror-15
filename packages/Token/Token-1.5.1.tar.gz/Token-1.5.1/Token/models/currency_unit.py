# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CurrencyUnit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CurrencyUnit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'numeric_code': 'int',
            'decimal_places': 'int',
            'numeric3_code': 'str',
            'country_codes': 'list[str]',
            'pseudo_currency': 'bool',
            'default_fraction_digits': 'int',
            'currency_code': 'str',
            'symbol': 'str'
        }

        self.attribute_map = {
            'code': 'code',
            'numeric_code': 'numericCode',
            'decimal_places': 'decimalPlaces',
            'numeric3_code': 'numeric3Code',
            'country_codes': 'countryCodes',
            'pseudo_currency': 'pseudoCurrency',
            'default_fraction_digits': 'defaultFractionDigits',
            'currency_code': 'currencyCode',
            'symbol': 'symbol'
        }

        self._code = None
        self._numeric_code = None
        self._decimal_places = None
        self._numeric3_code = None
        self._country_codes = None
        self._pseudo_currency = None
        self._default_fraction_digits = None
        self._currency_code = None
        self._symbol = None

    @property
    def code(self):
        """
        Gets the code of this CurrencyUnit.


        :return: The code of this CurrencyUnit.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this CurrencyUnit.


        :param code: The code of this CurrencyUnit.
        :type: str
        """
        self._code = code

    @property
    def numeric_code(self):
        """
        Gets the numeric_code of this CurrencyUnit.


        :return: The numeric_code of this CurrencyUnit.
        :rtype: int
        """
        return self._numeric_code

    @numeric_code.setter
    def numeric_code(self, numeric_code):
        """
        Sets the numeric_code of this CurrencyUnit.


        :param numeric_code: The numeric_code of this CurrencyUnit.
        :type: int
        """
        self._numeric_code = numeric_code

    @property
    def decimal_places(self):
        """
        Gets the decimal_places of this CurrencyUnit.


        :return: The decimal_places of this CurrencyUnit.
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """
        Sets the decimal_places of this CurrencyUnit.


        :param decimal_places: The decimal_places of this CurrencyUnit.
        :type: int
        """
        self._decimal_places = decimal_places

    @property
    def numeric3_code(self):
        """
        Gets the numeric3_code of this CurrencyUnit.


        :return: The numeric3_code of this CurrencyUnit.
        :rtype: str
        """
        return self._numeric3_code

    @numeric3_code.setter
    def numeric3_code(self, numeric3_code):
        """
        Sets the numeric3_code of this CurrencyUnit.


        :param numeric3_code: The numeric3_code of this CurrencyUnit.
        :type: str
        """
        self._numeric3_code = numeric3_code

    @property
    def country_codes(self):
        """
        Gets the country_codes of this CurrencyUnit.


        :return: The country_codes of this CurrencyUnit.
        :rtype: list[str]
        """
        return self._country_codes

    @country_codes.setter
    def country_codes(self, country_codes):
        """
        Sets the country_codes of this CurrencyUnit.


        :param country_codes: The country_codes of this CurrencyUnit.
        :type: list[str]
        """
        self._country_codes = country_codes

    @property
    def pseudo_currency(self):
        """
        Gets the pseudo_currency of this CurrencyUnit.


        :return: The pseudo_currency of this CurrencyUnit.
        :rtype: bool
        """
        return self._pseudo_currency

    @pseudo_currency.setter
    def pseudo_currency(self, pseudo_currency):
        """
        Sets the pseudo_currency of this CurrencyUnit.


        :param pseudo_currency: The pseudo_currency of this CurrencyUnit.
        :type: bool
        """
        self._pseudo_currency = pseudo_currency

    @property
    def default_fraction_digits(self):
        """
        Gets the default_fraction_digits of this CurrencyUnit.


        :return: The default_fraction_digits of this CurrencyUnit.
        :rtype: int
        """
        return self._default_fraction_digits

    @default_fraction_digits.setter
    def default_fraction_digits(self, default_fraction_digits):
        """
        Sets the default_fraction_digits of this CurrencyUnit.


        :param default_fraction_digits: The default_fraction_digits of this CurrencyUnit.
        :type: int
        """
        self._default_fraction_digits = default_fraction_digits

    @property
    def currency_code(self):
        """
        Gets the currency_code of this CurrencyUnit.


        :return: The currency_code of this CurrencyUnit.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this CurrencyUnit.


        :param currency_code: The currency_code of this CurrencyUnit.
        :type: str
        """
        self._currency_code = currency_code

    @property
    def symbol(self):
        """
        Gets the symbol of this CurrencyUnit.


        :return: The symbol of this CurrencyUnit.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """
        Sets the symbol of this CurrencyUnit.


        :param symbol: The symbol of this CurrencyUnit.
        :type: str
        """
        self._symbol = symbol

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

