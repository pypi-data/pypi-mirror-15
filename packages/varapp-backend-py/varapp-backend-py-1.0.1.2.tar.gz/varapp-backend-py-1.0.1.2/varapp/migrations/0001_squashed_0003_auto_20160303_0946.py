# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-03-07 14:20
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GeneDetailed',
            fields=[
                ('uid', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('chrom', models.TextField(blank=True, null=True)),
                ('gene', models.TextField(blank=True, null=True)),
                ('is_hgnc', models.NullBooleanField()),
                ('ensembl_gene_id', models.TextField(blank=True, null=True)),
                ('transcript', models.TextField(blank=True, null=True)),
                ('biotype', models.TextField(blank=True, null=True)),
                ('transcript_status', models.TextField(blank=True, null=True)),
                ('ccds_id', models.TextField(blank=True, null=True)),
                ('hgnc_id', models.TextField(blank=True, null=True)),
                ('entrez_id', models.TextField(blank=True, null=True)),
                ('cds_length', models.TextField(blank=True, null=True)),
                ('protein_length', models.TextField(blank=True, null=True)),
                ('transcript_start', models.TextField(blank=True, null=True)),
                ('transcript_end', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('synonym', models.TextField(blank=True, null=True)),
                ('rvis_pct', models.TextField(blank=True, null=True)),
                ('mam_phenotype_id', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'gene_detailed',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeneSummary',
            fields=[
                ('uid', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('chrom', models.TextField(blank=True, null=True)),
                ('gene', models.TextField(blank=True, null=True)),
                ('is_hgnc', models.NullBooleanField()),
                ('ensembl_gene_id', models.TextField(blank=True, null=True)),
                ('hgnc_id', models.TextField(blank=True, null=True)),
                ('transcript_min_start', models.TextField(blank=True, null=True)),
                ('transcript_max_end', models.TextField(blank=True, null=True)),
                ('strand', models.TextField(blank=True, null=True)),
                ('synonym', models.TextField(blank=True, null=True)),
                ('rvis_pct', models.TextField(blank=True, null=True)),
                ('mam_phenotype_id', models.TextField(blank=True, null=True)),
                ('in_cosmic_census', models.NullBooleanField()),
            ],
            options={
                'db_table': 'gene_summary',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('resource', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'resources',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SampleGenotypeCounts',
            fields=[
                ('sample_id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('num_hom_ref', models.IntegerField(blank=True, null=True)),
                ('num_het', models.IntegerField(blank=True, null=True)),
                ('num_hom_alt', models.IntegerField(blank=True, null=True)),
                ('num_unknown', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sample_genotype_counts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SampleGenotypes',
            fields=[
                ('sample_id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('gt_types', models.BinaryField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sample_genotypes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Samples',
            fields=[
                ('sample_id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('family_id', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True, unique=True)),
                ('paternal_id', models.TextField(blank=True, null=True)),
                ('maternal_id', models.TextField(blank=True, null=True)),
                ('sex', models.TextField(blank=True, null=True)),
                ('phenotype', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'samples',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Variants',
            fields=[
                ('chrom', models.TextField(blank=True)),
                ('start', models.IntegerField(blank=True, db_column='start', null=True)),
                ('end', models.IntegerField(blank=True, null=True)),
                ('variant_id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
                ('ref', models.TextField(blank=True)),
                ('alt', models.TextField(blank=True)),
                ('quality', models.FloatField(blank=True, db_column='qual', null=True)),
                ('pass_filter', models.TextField(blank=True, db_column='filter')),
                ('gts_blob', models.BinaryField(blank=True, db_column='gts', null=True)),
                ('gt_types_blob', models.BinaryField(blank=True, db_column='gt_types', null=True)),
                ('in_dbsnp', models.NullBooleanField()),
                ('dbsnp', models.TextField(blank=True, db_column='rs_ids')),
                ('clinvar_sig', models.TextField(blank=True)),
                ('clinvar_disease_acc', models.TextField(blank=True)),
                ('gerp_bp_score', models.FloatField(blank=True, null=True)),
                ('gerp_element_pval', models.FloatField(blank=True, null=True)),
                ('gene_symbol', models.TextField(blank=True, db_column='gene')),
                ('transcript', models.TextField(blank=True)),
                ('exon', models.TextField(blank=True)),
                ('is_exonic', models.NullBooleanField()),
                ('is_coding', models.NullBooleanField()),
                ('is_lof', models.NullBooleanField()),
                ('codon_change', models.TextField(blank=True)),
                ('aa_change', models.TextField(blank=True)),
                ('impact', models.TextField(blank=True)),
                ('impact_so', models.TextField(blank=True)),
                ('impact_severity', models.TextField(blank=True)),
                ('polyphen_pred', models.TextField(blank=True)),
                ('polyphen_score', models.FloatField(blank=True)),
                ('sift_pred', models.TextField(blank=True, null=True)),
                ('sift_score', models.FloatField(blank=True, null=True)),
                ('read_depth', models.IntegerField(blank=True, db_column='depth', null=True)),
                ('rms_map_qual', models.FloatField(blank=True, null=True)),
                ('qual_depth', models.FloatField(blank=True, null=True)),
                ('allele_count', models.IntegerField(blank=True, null=True)),
                ('cadd_raw', models.FloatField(blank=True, null=True)),
                ('cadd_scaled', models.FloatField(blank=True, null=True)),
                ('in_esp', models.NullBooleanField()),
                ('aaf_esp_all', models.DecimalField(blank=True, null=True)),
                ('in_1kg', models.NullBooleanField()),
                ('aaf_1kg_all', models.DecimalField(blank=True, null=True)),
                ('in_exac', models.NullBooleanField()),
                ('aaf_exac_all', models.DecimalField(blank=True, null=True)),
                ('allele_freq', models.FloatField(blank=True, db_column='AF', null=True)),
                ('base_qual_rank_sum', models.FloatField(blank=True, db_column='BaseQRankSum', null=True)),
                ('fisher_strand_bias', models.FloatField(blank=True, db_column='FS', null=True)),
                ('map_qual_rank_sum', models.FloatField(blank=True, db_column='MQRankSum', null=True)),
                ('read_pos_rank_sum', models.FloatField(blank=True, db_column='ReadPosRankSum', null=True)),
                ('strand_bias_odds_ratio', models.FloatField(blank=True, db_column='SOR', null=True)),
                ('hgvsp', models.TextField(blank=True, db_column='vep_hgvsp')),
                ('hgvsc', models.TextField(blank=True, db_column='vep_hgvsc')),
            ],
            options={
                'db_table': 'variants',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VcfHeader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vcf_header', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'vcf_header',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'version',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=50, null=True)),
                ('updated_by', models.CharField(max_length=50, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('source', models.CharField(max_length=255, null=True)),
                ('source_version', models.CharField(max_length=255, null=True)),
                ('annotation', models.CharField(max_length=255, null=True)),
                ('annotation_version', models.CharField(max_length=255, null=True)),
            ],
            options={
                'db_table': 'annotation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Bookmarks',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=50, null=True)),
                ('updated_by', models.CharField(max_length=50, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('query', models.TextField()),
                ('description', models.CharField(max_length=255)),
                ('long_description', models.TextField(default='')),
            ],
            options={
                'db_table': 'bookmarks',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DbAccess',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=50, null=True)),
                ('updated_by', models.CharField(max_length=50, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'db_accesses',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=50, null=True)),
                ('updated_by', models.CharField(max_length=50, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('session_start', models.DateTimeField()),
                ('url', models.TextField()),
                ('query', models.TextField(default='')),
                ('description', models.CharField(max_length=255)),
                ('long_description', models.TextField(default='')),
                ('ip_address', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=50, null=True)),
                ('updated_by', models.CharField(max_length=50, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('firstname', models.CharField(max_length=255)),
                ('lastname', models.CharField(max_length=255)),
                ('institution', models.CharField(max_length=255, null=True)),
                ('street', models.CharField(max_length=255, null=True)),
                ('city', models.CharField(max_length=255, null=True)),
                ('phone', models.CharField(max_length=30, null=True)),
                ('is_laboratory', models.IntegerField(null=True)),
                ('laboratory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.People')),
            ],
            options={
                'db_table': 'people',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Preferences',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=50, null=True)),
                ('updated_by', models.CharField(max_length=50, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('preferences', models.TextField(default='')),
                ('description', models.TextField(default='')),
            ],
            options={
                'db_table': 'preferences',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=50, null=True)),
                ('updated_by', models.CharField(max_length=50, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('rank', models.IntegerField(null=True)),
                ('can_validate_user', models.IntegerField()),
                ('can_delete_user', models.IntegerField()),
            ],
            options={
                'db_table': 'roles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=50, null=True)),
                ('updated_by', models.CharField(max_length=50, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=25, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('salt', models.CharField(default='', max_length=255)),
                ('email', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=25)),
                ('activation_code', models.CharField(max_length=25, null=True)),
                ('is_active', models.IntegerField(default=1)),
                ('is_password_reset', models.IntegerField(null=True)),
                ('person', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.People')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.Roles')),
            ],
            options={
                'db_table': 'users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VariantsDb',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('created_by', models.CharField(max_length=50, null=True)),
                ('updated_by', models.CharField(max_length=50, null=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('path', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(null=True)),
                ('size', models.IntegerField(null=True)),
                ('parent_db', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.VariantsDb')),
                ('is_active', models.IntegerField(default=1)),
            ],
            options={
                'db_table': 'variants_db',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='preferences',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.Users'),
        ),
        migrations.AddField(
            model_name='history',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.Users'),
        ),
        migrations.AddField(
            model_name='dbaccess',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.Users'),
        ),
        migrations.AddField(
            model_name='dbaccess',
            name='variants_db',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.VariantsDb'),
        ),
        migrations.AddField(
            model_name='annotation',
            name='variants_db',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.VariantsDb'),
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('varapp.variants',),
        ),
        migrations.AddField(
            model_name='annotation',
            name='is_active',
            field=models.IntegerField(default=1),
        ),
        migrations.AddField(
            model_name='bookmarks',
            name='db_access',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='varapp.DbAccess'),
        ),
        migrations.AddField(
            model_name='bookmarks',
            name='is_active',
            field=models.IntegerField(default=1),
        ),
        migrations.AddField(
            model_name='dbaccess',
            name='is_active',
            field=models.IntegerField(default=1),
        ),
        migrations.AddField(
            model_name='history',
            name='is_active',
            field=models.IntegerField(default=1),
        ),
        migrations.AddField(
            model_name='preferences',
            name='is_active',
            field=models.IntegerField(default=1),
        ),
        migrations.AlterField(
            model_name='roles',
            name='can_delete_user',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='roles',
            name='can_validate_user',
            field=models.IntegerField(default=0),
        ),
    ]
