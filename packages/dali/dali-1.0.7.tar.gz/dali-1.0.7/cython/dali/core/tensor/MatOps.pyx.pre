pyp
from preprocessor_utils import (
    typed_expression,
    typed_expression_args,
    typed_expression_args_with_types,
    typed_expression_list,
    type_repeat,
    type_repeat_with_types,
    typed_fexpression_list,
    typed_fexpression_args,
    type_frepeat,
    WITHOUT_INT,
)

ypy


cdef extern from "dali/tensor/MatOps.h" nogil:
    cdef cppclass CMatOps "MatOps" [T]:
        ### OTHER ###
        @staticmethod
        CMat[T] fill(CMat[T] to_fill, T filler)

        @staticmethod
        CMat[T] consider_constant(CMat[T])

        @staticmethod
        bint equals(CMat[T], CMat[T])

        @staticmethod
        bint allclose(CMat[T], CMat[T], double tol)

        @staticmethod
        bint grad_allclose(CMat[T], CMat[T], double tol)

        @staticmethod
        bint is_nan(CMat[T])

        @staticmethod
        bint is_grad_nan(CMat[T])

        @staticmethod
        vector[int] argsort(CMat[T])

        @staticmethod
        vector[size_t] argsort(const vector[CMat[T]]&) except +

        @staticmethod
        int argmax(const CMat[T]&) except +

        @staticmethod
        int argmin(const CMat[T]&) except +

        @staticmethod
        vector[int] argmax_axis "argmax" (const CMat[T]&, int dimension)

        @staticmethod
        vector[int] argmin_axis "argmin" (const CMat[T]&, int dimension)

        @staticmethod
        int argmax_slice(const CMat[T]&, int lower, int upper)  except +

        @staticmethod
        int argmin_slice(const CMat[T]&, int lower, int upper)  except +

        @staticmethod
        void copy(CMat[T]* dest, const CMat[T]& source)  except +

        @staticmethod
        void copy_grad(CMat[T]* dest, const CMat[T]& source)  except +

        ### REDUCERS ###
        @staticmethod
        CMat[T] grad_norm(CMat[T])
        @staticmethod
        CMat[T] grad_norm_rowwise(CMat[T])
        @staticmethod
        CMat[T] grad_norm_colwise(CMat[T])

        @staticmethod
        CMat[T] L2_norm(CMat[T])

        @staticmethod
        CMat[T] L2_norm_rowwise(CMat[T]) except +

        @staticmethod
        CMat[T] L2_norm_colwise(CMat[T]) except +

        @staticmethod
        CMat[T] sum(CMat[T]) except +

        @staticmethod
        CMat[T] sum_rowwise(CMat[T]) except +

        @staticmethod
        CMat[T] sum_colwise(CMat[T]) except +

        @staticmethod
        CMat[T] mean(CMat[T]) except +

        @staticmethod
        CMat[T] mean_rowwise(CMat[T]) except +

        @staticmethod
        CMat[T] mean_colwise(CMat[T]) except +

        @staticmethod
        CMat[T] max(CMat[T]) except +

        @staticmethod
        CMat[T] max_rowwise(CMat[T]) except +

        @staticmethod
        CMat[T] max_colwise(CMat[T]) except +


        @staticmethod
        CMat[T] min(CMat[T]) except +

        @staticmethod
        CMat[T] min_rowwise(CMat[T]) except +

        @staticmethod
        CMat[T] min_colwise(CMat[T]) except +

        ### RESHAPING ###

        @staticmethod
        CMat[T] hstack(CMat[T], CMat[T])  except +

        @staticmethod
        CMat[T] hstack_vec "hstack" (const vector[CMat[T]]&)  except +

        @staticmethod
        CMat[T] vstack(CMat[T], CMat[T])  except +

        @staticmethod
        CMat[T] vstack_vec "vstack"(const vector[CMat[T]]&)  except +

        @staticmethod
        CMat[T] broadcast_row_vector(CMat[T] input, int num_rows) except +

        @staticmethod
        CMat[T] broadcast_col_vector(CMat[T] input, int num_cols) except +

        @staticmethod
        CMat[T] transpose(CMat[T])

        @staticmethod
        CMat[T] rows_pluck(CMat[T], CMat[int])  except +

        @staticmethod
        CMat[T] reshape(CMat[T], int, int)  except +

        @staticmethod
        CMat[T] patch2col_no_grad(CMat[T], const vector[int]&, const int&, const int&, const int&) except +

        @staticmethod
        CMat[T] patch2col(CMat[T], const vector[int]&, const int&, const int&, const int&) except +

        @staticmethod
        CMat[T] conv2d(CMat[T], CMat[T], const vector[int]&, const int&, const int&, const int&) except +

        @staticmethod
        CMat[T] row_pluck(CMat[T], int)  except +

        @staticmethod
        CMat[T] col_pluck(CMat[T], int)  except +

        @staticmethod
        void resize(CMat[T]& mat, unsigned int rows, unsigned int cols)  except +

        ### SOLVER_UPDATES ###
        @staticmethod
        void clip_and_regularize(CMat[T] param, T clipval, T regc)

        @staticmethod
        void regularize(CMat[T] param, T regc)

        @staticmethod
        void normalize(CMat[T] param, T norm_threshold)

        @staticmethod
        void sgd_update(CMat[T] param, T step_size) except +

        @staticmethod
        void adagrad_update(CMat[T] param, CMat[T]& cache, T step_size, T smooth_eps) except +

        @staticmethod
        void rmsprop_update(CMat[T] param, CMat[T]& cache, T decay_rate, T step_size, T smooth_eps) except +

        @staticmethod
        void rmsprop_momentum_update(CMat[T] param, CMat[T]& n_cache, CMat[T]& g_cache, CMat[T]& momentum_cache, T decay_rate, T momentum, T step_size, T smooth_eps) except +

        @staticmethod
        void adadelta_update(CMat[T] param, CMat[T]& gsum, CMat[T]& xsum, T rho, T smooth_eps) except +

        @staticmethod
        void adam_update(CMat[T] param, CMat[T]& m, CMat[T]& v, T b1, T b2, T smooth_eps, T step_size, unsigned long long epoch) except +

        ### ELEMWISE ###
        @staticmethod
        CMat[T] add(CMat[T], T)

        @staticmethod
        CMat[T] sub_broadcast_reversed(CMat[T], T)

        @staticmethod
        CMat[T] eltmul(CMat[T], T)

        @staticmethod
        CMat[T] eltmul_mat "eltmul" (CMat[T], CMat[T]) except+

        @staticmethod
        CMat[T] eltmul_mat "eltmul" (CMat[T], CMat[T]) except+

        @staticmethod
        CMat[T] eltmul_broadcast_colwise(CMat[T], CMat[T]) except +

        @staticmethod
        CMat[T] eltmul_broadcast_rowwise(CMat[T], CMat[T]) except +

        @staticmethod
        CMat[T] eltdivide(CMat[T], T)

        @staticmethod
        CMat[T] eltmax(CMat[T], T)

        @staticmethod
        CMat[T] square(CMat[T])

        @staticmethod
        CMat[T] log(CMat[T])

        @staticmethod
        CMat[T] exp(CMat[T])

        @staticmethod
        CMat[T] sigmoid(CMat[T])

        @staticmethod
        CMat[T] steep_sigmoid(CMat[T], T aggressiveness)

        @staticmethod
        CMat[T] tanh(CMat[T])

        @staticmethod
        CMat[T] relu(CMat[T])

        @staticmethod
        CMat[T] abs(CMat[T])

        @staticmethod
        CMat[T] pow(CMat[T], T power)

        @staticmethod
        CMat[T] sqrt(CMat[T])

        @staticmethod
        CMat[T] elt_inv(CMat[T])

        ### DROPOUT ###

        @staticmethod
        CMat[T] dropout(CMat[T], T drop_prob)

        @staticmethod
        CMat[T] dropout_normalized(CMat[T], T drop_prob)

        @staticmethod
        CMat[T] fast_dropout(CMat[T])

        @staticmethod
        vector[CMat[T]] dropout(const vector[CMat[T]]&, T drop_prob)

        @staticmethod
        vector[CMat[T]] dropout_normalized(const vector[CMat[T]]&, T drop_prob)

        @staticmethod
        vector[CMat[T]] fast_dropout(const vector[CMat[T]]&)

        ### COST ###

        @staticmethod
        CMat[T] binary_cross_entropy(CMat[T], T target) except +

        @staticmethod
        CMat[T] binary_cross_entropy_mat "binary_cross_entropy"(CMat[T], CMat[T] target) except +

        @staticmethod
        CMat[T] sigmoid_binary_cross_entropy(CMat[T], T target) except +

        @staticmethod
        CMat[T] sigmoid_binary_cross_entropy_mat "sigmoid_binary_cross_entropy"(CMat[T], CMat[T] target) except +

        @staticmethod
        CMat[T] softmax_colwise(CMat[T], T temperature) except +

        @staticmethod
        CMat[T] softmax_rowwise(CMat[T], T temperature) except +

        @staticmethod
        CMat[T] softmax_no_grad_colwise(CMat[T], T temperature) except +

        @staticmethod
        CMat[T] softmax_no_grad_rowwise(CMat[T], T temperature) except +

        @staticmethod
        CMat[T] margin_loss_colwise(CMat[T], unsigned int answer_idx, T margin) except +

        @staticmethod
        CMat[T] margin_loss_rowwise(CMat[T], unsigned int answer_idx, T margin) except +


        @staticmethod
        CMat[T] SCE_rowwise_int "softmax_cross_entropy_rowwise"(CMat[T], unsigned int answer_idx) except +

        @staticmethod
        CMat[T] SCE_rowwise_mat "softmax_cross_entropy_rowwise"(CMat[T], CMat[int] targets) except +

        @staticmethod
        CMat[T] SCE_colwise_int "softmax_cross_entropy_colwise"(CMat[T], unsigned int answer_idx) except +

        @staticmethod
        CMat[T] SCE_colwise_mat "softmax_cross_entropy_colwise"(CMat[T], CMat[int] targets) except +

        @staticmethod
        CMat[T] CE_colwise_int "cross_entropy_colwise"(CMat[T], unsigned int answer_idx) except +

        @staticmethod
        CMat[T] CE_rowwise_int "cross_entropy_rowwise"(CMat[T], unsigned int answer_idx) except +

        @staticmethod
        CMat[T] CE_colwise_mat "cross_entropy_colwise"(CMat[T], CMat[int] targets) except +

        @staticmethod
        CMat[T] CE_rowwise_mat "cross_entropy_rowwise"(CMat[T], CMat[int] targets) except +

        @staticmethod
        CMat[T] CE_eltwise     "cross_entropy"(CMat[T], CMat[T] targets) except +

        @staticmethod
        CMat[T] CE_rowwise_mat "cross_entropy_rowwise"(CMat[T], CMat[int] targets) except +


        @staticmethod
        vector[CMat[T]] softmax_vector "softmax"(vector[CMat[T]], T temperature) except +

        @staticmethod
        CMat[T] CE_Mat "cross_entropy"(CMat[T], CMat[T]) except +

        ### CONVOLUTION ###
        @staticmethod
        CMat[T] circular_convolution(CMat[T], CMat[T])  except +

cdef class MatOps:
    @staticmethod
    def fill(Mat mat, filler):
        pypinline type_repeat(pyp,
        cdef TYPE_NAME TYPED(filler)
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat"],
            TYPED(filler) = filler
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].fill(DEREF_MAT(mat), TYPED(filler))
            return WRAP_MAT(TYPED(out))
        ypy


    @staticmethod
    def consider_constant(Mat mat):
        pypinline typed_expression_args(pyp, ["mat"],
            return WRAP_MAT(CMatOps[TYPE_NAME].consider_constant(DEREF_MAT(mat)))
        ypy

    @staticmethod
    def equals(Mat a, Mat b):
        cdef bint out
        pypinline typed_expression_args(pyp, ["a", "b"],
            with nogil:
                out = CMatOps[TYPE_NAME].equals(DEREF_MAT(a), DEREF_MAT(b))
            return out
        ypy

    @staticmethod
    def allclose(Mat a, Mat b, float tol = 1e-6):
        cdef bint out

        pypinline typed_expression_args(pyp, ["a", "b"],
            with nogil:
                out = CMatOps[TYPE_NAME].allclose(DEREF_MAT(a), DEREF_MAT(b), tol)
            return out
        ypy

pyprepeat NAN_FUNCTION in ["is_nan", "is_grad_nan"]
    @staticmethod
    def NAN_FUNCTION(Mat mat):
        cdef bint out

        pypinline typed_fexpression_args(pyp, ["mat"],
            with nogil:
                out = CMatOps[TYPE_NAME].NAN_FUNCTION(DEREF_MAT(mat))
            return out
        ypy

ypyrepeat

    @staticmethod
    def grad_allclose(Mat a, Mat b, float tol = 1e-6):
        cdef bint out
        pypinline typed_expression_args(pyp, ["a", "b"],
            with nogil:
                out = CMatOps[TYPE_NAME].grad_allclose(DEREF_MAT(a), DEREF_MAT(b), tol)
            return out
        ypy

    @staticmethod
    def argsort(Mat mat):
        cdef vector[int] out
        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                out = CMatOps[TYPE_NAME].argsort(DEREF_MAT(mat))
            return out
        ypy

    @staticmethod
    def argmax(Mat mat, axis=None):
        cdef int         out_int
        cdef vector[int] out_vector
        cdef int axis_int
        pypinline typed_expression_args(pyp, ["mat"],
            if axis is not None:
                axis_int = axis
                with nogil:
                    out_vector = CMatOps[TYPE_NAME].argmax_axis(DEREF_MAT(mat), axis_int)
                return out_vector
            else:
                with nogil:
                    out_int = CMatOps[TYPE_NAME].argmax(DEREF_MAT(mat))
                return out_int
        ypy

    @staticmethod
    def argmin(Mat mat, axis=None):
        cdef int         out_int
        cdef vector[int] out_vector
        cdef int axis_int
        pypinline typed_expression_args(pyp, ["mat"],
            if axis is not None:
                axis_int = axis
                with nogil:
                    out_vector = CMatOps[TYPE_NAME].argmin_axis(DEREF_MAT(mat), axis_int)
                return out_vector
            else:
                with nogil:
                    out_int = CMatOps[TYPE_NAME].argmin(DEREF_MAT(mat))
                return out_int
        ypy

    @staticmethod
    def argmax_slice(Mat mat, int lower, int upper):
        cdef int out
        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                out = CMatOps[TYPE_NAME].argmax_slice(DEREF_MAT(mat), lower, upper)
            return out
        ypy

    @staticmethod
    def argmin_slice(Mat mat, int lower, int upper):
        cdef int out
        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                out = CMatOps[TYPE_NAME].argmin_slice(DEREF_MAT(mat), lower, upper)
            return out
        ypy


    @staticmethod
    def copy(Mat destination, Mat source):
        pypinline typed_expression_args(pyp, ["destination", "source"],
            with nogil:
                CMatOps[TYPE_NAME].copy(PTR_MAT(destination), DEREF_MAT(source))
        ypy

    @staticmethod
    def copy_grad(Mat destination, Mat source):
        pypinline typed_expression_args(pyp, ["destination", "source"],
            with nogil:
                CMatOps[TYPE_NAME].copy_grad(PTR_MAT(destination), DEREF_MAT(source))
        ypy

    # ### REDUCERS ###
pyprepeat REDUCER_OP in ["sum", "L2_norm", "mean", "grad_norm", "min", "max"]
    @staticmethod
    def REDUCER_OP(Mat mat, axis=None):
        cdef bint error = False
        cdef int true_axis
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        if axis is None:
            true_axis = -1
        else:
            true_axis = axis
        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                if true_axis == -1:
                    TYPED(out) = CMatOps[TYPE_NAME].REDUCER_OP(DEREF_MAT(mat))
                elif true_axis == 0:
                    TYPED(out) = CMatOps[TYPE_NAME].REDUCER_OP_colwise(DEREF_MAT(mat))
                elif true_axis == 1:
                    TYPED(out) = CMatOps[TYPE_NAME].REDUCER_OP_rowwise(DEREF_MAT(mat))
                else:
                    error = True
            if error:
                assert False
            return WRAP_MAT(TYPED(out))
        ypy

ypyrepeat
    ### RESHAPING ###

    @staticmethod
    def resize(Mat mat,  unsigned int rows, unsigned int cols):
        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                CMatOps[TYPE_NAME].resize(DEREF_MAT(mat), rows, cols)
        ypy


    @staticmethod
    def hstack(arg1, arg2=None):
        pypinline type_repeat(pyp,
        cdef vector[CMat[TYPE_NAME]] TYPED(input_matrices)
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        cdef Mat left
        cdef Mat right
        cdef common_dtype
        if arg2 is None:
            pypinline typed_expression_list(pyp, "arg1", "Mat",
                TYPED(input_matrices) = TYPED(mats_to_vec)(arg1)
                with nogil:
                    TYPED(out) = CMatOps[TYPE_NAME].hstack_vec(TYPED(input_matrices))
                return WRAP_MAT(TYPED(out))
            ypy
        else:
            left  = <Mat> arg1
            right = <Mat> arg2
            pypinline typed_expression_args(pyp, ["left", "right"],
                with nogil:
                    TYPED(out) = CMatOps[TYPE_NAME].hstack(DEREF_MAT(left), DEREF_MAT(right))
                return WRAP_MAT(TYPED(out))
            ypy

    @staticmethod
    def vstack(arg1, arg2=None):
        pypinline type_repeat(pyp,
        cdef vector[CMat[TYPE_NAME]] TYPED(input_matrices)
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        cdef Mat top
        cdef Mat bottom
        cdef common_dtype
        if arg2 is None:
            pypinline typed_expression_list(pyp, "arg1", "Mat",
                TYPED(input_matrices) = TYPED(mats_to_vec)(arg1)
                with nogil:
                    TYPED(out) = CMatOps[TYPE_NAME].vstack_vec(TYPED(input_matrices))
                return WRAP_MAT(TYPED(out))
            ypy
        else:
            top    = <Mat> arg1
            bottom = <Mat> arg2
            pypinline typed_expression_args(pyp, ["top", "bottom"],
                with nogil:
                    TYPED(out) = CMatOps[TYPE_NAME].vstack(DEREF_MAT(top), DEREF_MAT(bottom))
                return WRAP_MAT(TYPED(out))
            ypy

    @staticmethod
    def row_pluck(Mat mat, int idx):
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].row_pluck(DEREF_MAT(mat), idx)
            return WRAP_MAT(TYPED(out))
        ypy

    @staticmethod
    def reshape(Mat mat, unsigned int rows, unsigned int cols):
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].reshape(DEREF_MAT(mat), rows, cols)
            return WRAP_MAT(TYPED(out))
        ypy

    @staticmethod
    def conv2d(Mat mat, Mat kernels, image_shape, int kernel_height, int kernel_width, int kernel_stride):
        """
        Apply a 2D convolution to the data contained in
        `mat` using the filters in `kernels`.
        The data in `mat` is assumed to be a 2D view
        of the 4D image data, with the shape given in
        the argument `image_shape`:
        (Note: image_shape is a size 4 list/tuple of ints)

        > (batch_size, channels, height, width) = image_shape

        The convolution is controlled using the `kernel_height`
        `kernel_width`, `kernel_stride` arguments. Where the kernel
        filters stored in the argument `kernels` are assumed to
        be arranged in the following way:

        > (num_filters, kernel_size) = kernels.shape

        where the `kernel_size` should have the same
        size as:

        > kernel_size == channels * kernel_height * kernel_width

        Where `channels` is the second value of `image_shape`.

        Args:
          mat: `Mat` of type `float`, `double`, `int32`
          kernels: `Mat` of type `float`, `double`, `int32`
          image_shape: list<int> or tuple<int> with length 4
          kernel_height: `int`, how tall is each filter
          kernel_width: `int`, how wide is each filter
          kernel_stride: `int` by how much does each filter
                          move (subsampling of mat)

        Returns:
          A `Mat` of the same type as mat, with shape:
          (
            nbatch,
            num_filters * (
                (height - kernel_height) / kernel_stride + 1)
            ) * (
                (height - kernel_width) / kernel_stride + 1)
            )
          )
        """
        cdef vector[int] image_shape_vec = image_shape
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat", "kernels"],
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].conv2d(DEREF_MAT(mat), DEREF_MAT(kernels), image_shape_vec, kernel_height, kernel_width, kernel_stride)
            return WRAP_MAT(TYPED(out))
        ypy

pyprepeat OP_NAME in ['patch2col_no_grad', 'patch2col']
    @staticmethod
    def OP_NAME(Mat mat, image_shape, int kernel_height, int kernel_width, int kernel_stride):
        """
        Copy out patches of `mat` according to
        some kernel size and subsampling regimen from
        `mat`.
        The data in `mat` is assumed to be a 2D view
        of the 4D image data, with the shape given in
        the argument `image_shape`:
        (Note: image_shape is a size 4 list/tuple of ints)

        > (batch_size, channels, height, width) = image_shape

        The patches are controlled using the `kernel_height`
        `kernel_width`, `kernel_stride` arguments.

        Args:
          mat: `Mat` of type `float`, `double`, `int32`
          image_shape: list<int> or tuple<int> with length 4
          kernel_height: `int`, how tall is each filter
          kernel_width: `int`, how wide is each filter
          kernel_stride: `int` by how much does each filter
                          move (subsampling of mat)

        Returns:
          A `Mat` of the same type as mat, with shape:
          (
            npatches,
            channels * kernel_height * kernel_width
          )

        with npatches all the possible subsamples from
        `mat`
        """
        cdef vector[int] image_shape_vec = image_shape
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].OP_NAME(DEREF_MAT(mat), image_shape_vec, kernel_height, kernel_width, kernel_stride)
            return WRAP_MAT(TYPED(out))
        ypy
ypyrepeat

    @staticmethod
    def rows_pluck(Mat mat, Mat idx):
        cdef CMat[int]* idx_mat
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy

        assert idx.dtypeinternal == np.NPY_INT32, \
                "Only integer tensors can be used for indexing"
        idx_mat = <CMat[int]*> idx.matinternal

        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].rows_pluck(DEREF_MAT(mat), idx_mat[0])
            return WRAP_MAT(TYPED(out))
        ypy

    @staticmethod
    def transpose(Mat mat):
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy

        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].transpose(DEREF_MAT(mat))
            return WRAP_MAT(TYPED(out))
        ypy

    # ### UPDATES ###
    @staticmethod
    def clip_and_regularize(Mat mat, float clipval = 5.0, float regc = 1e-6):
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["mat"],
            with nogil:
                CMatOps[TYPE_NAME].clip_and_regularize(DEREF_MAT(mat), clipval, regc)
        ypy

    @staticmethod
    def regularize(Mat mat, float regc = 1e-6):
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["mat"],
            with nogil:
                CMatOps[TYPE_NAME].regularize(DEREF_MAT(mat), regc)
        ypy

    @staticmethod
    def normalize(Mat mat, float norm_threshold = 5.0):
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["mat"],
            with nogil:
                CMatOps[TYPE_NAME].normalize(DEREF_MAT(mat), norm_threshold)
        ypy


    @staticmethod
    def sgd_update(Mat param, float step_size):
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["param"],
            with nogil:
                CMatOps[TYPE_NAME].sgd_update(DEREF_MAT(param), step_size)
        ypy


    @staticmethod
    def adagrad_update(Mat param, Mat cache, float step_size, float smooth_eps):
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["param", "cache"],
            with nogil:
                CMatOps[TYPE_NAME].adagrad_update(DEREF_MAT(param), DEREF_MAT(cache), step_size, smooth_eps)
        ypy

    @staticmethod
    def rmsprop_update(Mat param, Mat cache, float decay_rate, float step_size, float smooth_eps):
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["param", "cache"],
            with nogil:
                CMatOps[TYPE_NAME].rmsprop_update(DEREF_MAT(param), DEREF_MAT(cache), decay_rate, step_size, smooth_eps)
        ypy

    @staticmethod
    def rmsprop_momentum_update(Mat param,
                                Mat n_cache,
                                Mat g_cache,
                                Mat momentum_cache,
                                float decay_rate,
                                float momentum,
                                float step_size,
                                float smooth_eps):
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["param", "n_cache", "g_cache", "momentum_cache"],
            with nogil:
                CMatOps[TYPE_NAME].rmsprop_momentum_update(DEREF_MAT(param), DEREF_MAT(n_cache), DEREF_MAT(g_cache), DEREF_MAT(momentum_cache),
                                                          decay_rate, momentum, step_size, smooth_eps)
        ypy

    @staticmethod
    def adadelta_update(Mat param, Mat gsum, Mat xsum, float rho, float smooth_eps):
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["param", "gsum", "xsum"],
            with nogil:
                CMatOps[TYPE_NAME].adadelta_update(DEREF_MAT(param), DEREF_MAT(gsum), DEREF_MAT(xsum), rho, smooth_eps)
        ypy

    @staticmethod
    def adam_update(Mat param, Mat m, Mat v, float b1, float b2, float smooth_eps, float step_size, int epoch):
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["param", "m", "v"],
            with nogil:
                CMatOps[TYPE_NAME].adam_update(DEREF_MAT(param), DEREF_MAT(m), DEREF_MAT(v), b1, b2, smooth_eps, step_size, epoch)
        ypy

    ### ELEMWISE ###

pyprepeat OP_NAME in ['add', 'sub_broadcast_reversed', 'eltdivide', 'eltmax', 'dropout', 'dropout_normalized', 'pow']
    @staticmethod
    def OP_NAME(Mat mat, val):
        pypinline type_repeat(pyp,
        cdef TYPE_NAME TYPED(val)
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat"],
            TYPED(val) = val
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].OP_NAME(DEREF_MAT(mat), TYPED(val))
            return WRAP_MAT(TYPED(out))
        ypy
ypyrepeat



pyprepeat BCE_OP_NAME in ["sigmoid_binary_cross_entropy", "binary_cross_entropy"]
    @staticmethod
    def BCE_OP_NAME(Mat mat, val):
        pypinline type_repeat(pyp,
        cdef TYPE_NAME TYPED(val)
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        if type(val) == Mat:
            pypinline typed_fexpression_args(pyp, ["mat", "<Mat>val"],
                with nogil:
                    TYPED(out) = CMatOps[TYPE_NAME].BCE_OP_NAME_mat(DEREF_MAT(mat), DEREF_MAT(val))
                return WRAP_MAT(TYPED(out))
            ypy
        else:
            pypinline typed_fexpression_args(pyp, ["mat"],
                TYPED(val) = val
                with nogil:
                    TYPED(out) = CMatOps[TYPE_NAME].BCE_OP_NAME(DEREF_MAT(mat), TYPED(val))
                return WRAP_MAT(TYPED(out))
            ypy
ypyrepeat

pyprepeat OP_NAME in ['square', 'log', 'exp', 'sigmoid', 'tanh','relu','abs','sqrt', 'elt_inv', 'fast_dropout']
    @staticmethod
    def OP_NAME(Mat mat):
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].OP_NAME(DEREF_MAT(mat))
            return WRAP_MAT(TYPED(out))
        ypy
ypyrepeat

    @staticmethod
    def _eltmul_mat(Mat mat, Mat other, bint broadcast=True, int axis=1):
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat", "other"],
            if broadcast:
                if axis != 1 and axis != 0:
                    raise ValueError("axis must be 0 (columnwise) or 1 (rowwise)")
            with nogil:
                if broadcast:
                    if axis == 1:
                        TYPED(out) = CMatOps[TYPE_NAME].eltmul_broadcast_rowwise(DEREF_MAT(mat), DEREF_MAT(other))
                    elif axis == 0:
                        TYPED(out) = CMatOps[TYPE_NAME].eltmul_broadcast_colwise(DEREF_MAT(mat), DEREF_MAT(other))
                else:
                    TYPED(out) = CMatOps[TYPE_NAME].eltmul_mat(DEREF_MAT(mat), DEREF_MAT(other))
            return WRAP_MAT(TYPED(out))
        ypy

    @staticmethod
    def _eltmul_val(Mat mat, val):
        pypinline type_repeat(pyp,
        cdef TYPE_NAME TYPED(val)
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat"],
            TYPED(val) = val
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].eltmul(DEREF_MAT(mat), TYPED(val))
            return WRAP_MAT(TYPED(out))
        ypy

    @staticmethod
    def eltmul(Mat mat, other, bint broadcast=True, int axis=1):
        if type(other) == Mat:
            return MatOps._eltmul_mat(mat, other, broadcast, axis)
        else:
            return MatOps._eltmul_val(mat, other)

    @staticmethod
    def dropout(Mat mat, drop_prob, normalized=True):
        pypinline type_repeat(pyp,
        cdef TYPE_NAME TYPED(drop_prob)
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat"],
            TYPED(drop_prob) = drop_prob
            if normalized:
                with nogil:
                    TYPED(out) = CMatOps[TYPE_NAME].dropout_normalized(DEREF_MAT(mat), TYPED(drop_prob))
                return WRAP_MAT(TYPED(out))
            else:
                with nogil:
                    TYPED(out) = CMatOps[TYPE_NAME].dropout(DEREF_MAT(mat), TYPED(drop_prob))
                return WRAP_MAT(TYPED(out))
        ypy


    @staticmethod
    def steep_sigmoid(Mat mat, aggressiveness =  3.75):
        pypinline type_repeat(pyp,
        cdef TYPE_NAME TYPED(aggressiveness)
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_expression_args(pyp, ["mat"],
            TYPED(aggressiveness) = aggressiveness
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].steep_sigmoid(DEREF_MAT(mat), TYPED(aggressiveness))
            return WRAP_MAT(TYPED(out))
        ypy

    @staticmethod
    def _softmax_cross_entropy_int(Mat mat, int answer_idx, int axis=1):
        pypinline type_repeat_with_types(pyp, WITHOUT_INT,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        if axis != 0 and axis != 1:
            raise ValueError("axis must be 0 (columnwise) or 1 (rowwise)")
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["mat"],
            with nogil:
                if axis == 0:
                    TYPED(out) = CMatOps[TYPE_NAME].SCE_colwise_int(DEREF_MAT(mat), answer_idx)
                elif axis == 1:
                    TYPED(out) = CMatOps[TYPE_NAME].SCE_rowwise_int(DEREF_MAT(mat), answer_idx)

            return WRAP_MAT(TYPED(out))
        ypy

    @staticmethod
    def _softmax_cross_entropy_mat(Mat mat, Mat idx, int axis=1):
        cdef CMat[int]* idx_mat
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy

        if idx.dtypeinternal != np.NPY_INT32:
            raise ValueError("Only integer tensors can be used for indexing")
        if axis != 0 and axis != 1:
            raise ValueError("axis must be 0 (columnwise) or 1 (rowwise)")

        idx_mat = <CMat[int]*> idx.matinternal

        pypinline typed_expression_args(pyp, ["mat"],
            with nogil:
                if axis == 0:
                    TYPED(out) = CMatOps[TYPE_NAME].SCE_colwise_mat(DEREF_MAT(mat), idx_mat[0])
                elif axis == 1:
                    TYPED(out) = CMatOps[TYPE_NAME].SCE_rowwise_mat(DEREF_MAT(mat), idx_mat[0])
            return WRAP_MAT(TYPED(out))
        ypy



    @staticmethod
    def cross_entropy(Mat mat, index, int axis=1):
        if type(index) == Mat:
            return MatOps._cross_entropy_mat(mat, <Mat>index, axis)
        elif type(index) == int:
            return MatOps._cross_entropy_int(mat, <int>index, axis)
        else:
            raise AttributeError("Cross entropy takes integer of Tensor of integers as argument.")

    @staticmethod
    def _cross_entropy_mat(Mat mat, Mat index, int axis=1):
        pypinline type_repeat_with_types(pyp, WITHOUT_INT,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        if axis != 0 and axis != 1:
            raise ValueError("axis must be 0 (columnwise) or 1 (rowwise)")
        if index.dtypeinternal == np.NPY_INT32:
            pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["mat"],
                with nogil:
                    if axis == 0:
                        TYPED(out) = CMatOps[TYPE_NAME].CE_colwise_mat(DEREF_MAT(mat), (<CMat[int]*>(<Mat>index).matinternal)[0])
                    elif axis == 1:
                        TYPED(out) = CMatOps[TYPE_NAME].CE_rowwise_mat(DEREF_MAT(mat), (<CMat[int]*>(<Mat>index).matinternal)[0])
                return WRAP_MAT(TYPED(out))
            ypy
        else:
            pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["mat", "index"],
                with nogil:
                    TYPED(out) = CMatOps[TYPE_NAME].CE_Mat(DEREF_MAT(mat), DEREF_MAT(index))
                return WRAP_MAT(TYPED(out))
            ypy


    @staticmethod
    def _cross_entropy_int(Mat mat, int answer_idx, int axis=1):
        pypinline type_repeat_with_types(pyp, WITHOUT_INT,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        if axis != 0 and axis != 1:
            raise ValueError("axis must be 0 (columnwise) or 1 (rowwise)")
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["mat"],
            with nogil:
                if axis == 0:
                    TYPED(out) = CMatOps[TYPE_NAME].CE_colwise_int(DEREF_MAT(mat), answer_idx)
                elif axis == 1:
                    TYPED(out) = CMatOps[TYPE_NAME].CE_rowwise_int(DEREF_MAT(mat), answer_idx)

            return WRAP_MAT(TYPED(out))
        ypy


    @staticmethod
    def softmax_cross_entropy(Mat mat, index, int axis=1):
        if type(index) == Mat:
            return MatOps._softmax_cross_entropy_mat(mat, <Mat>index, axis)
        elif type(index) == int:
            return MatOps._softmax_cross_entropy_int(mat, <int>index, axis)
        else:
            raise AttributeError("Softmax cross entropy takes integer of Tensor of integers as argument.")

    @staticmethod
    def margin_loss(Mat mat, int answer_idx, int axis = 1, float margin = 0.1):
        pypinline type_repeat_with_types(pyp, WITHOUT_INT,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        if axis != 0 and axis != 1:
            raise ValueError("axis must be 0 (columnwise) or 1 (rowwise)")
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["mat"],
            with nogil:
                if axis == 0:
                    TYPED(out) = CMatOps[TYPE_NAME].margin_loss_colwise(DEREF_MAT(mat), answer_idx, margin)
                elif axis == 1:
                    TYPED(out) = CMatOps[TYPE_NAME].margin_loss_rowwise(DEREF_MAT(mat), answer_idx, margin)

            return WRAP_MAT(TYPED(out))
        ypy



pyprepeat SOFTMAX_OP_NAME in ['softmax', 'softmax_no_grad']

    @staticmethod
    def SOFTMAX_OP_NAME(Mat mat, float temperature = 1.0, int axis = 1):
        pypinline type_repeat_with_types(pyp, WITHOUT_INT,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        if axis != 0 and axis != 1:
            raise ValueError("axis must be 0 (columnwise) or 1 (rowwise)")
        pypinline typed_expression_args_with_types(pyp, WITHOUT_INT, ["mat"],
            with nogil:
                if axis == 0:
                    TYPED(out) = CMatOps[TYPE_NAME].SOFTMAX_OP_NAME_colwise(DEREF_MAT(mat), temperature)
                elif axis == 1:
                    TYPED(out) = CMatOps[TYPE_NAME].SOFTMAX_OP_NAME_rowwise(DEREF_MAT(mat), temperature)

            return WRAP_MAT(TYPED(out))
        ypy

ypyrepeat

    @staticmethod
    def softmax_list(list mats, float temperature=1.0):
        pypinline type_frepeat(pyp,
        cdef vector[CMat[TYPE_NAME]] TYPED(input_matrices)
        cdef vector[CMat[TYPE_NAME]] TYPED(out_list)
        cdef CMat[TYPE_NAME]         TYPED(out_mat)
        ypy
        cdef common_dtype

        pypinline typed_fexpression_list(pyp, "mats", "Mat",
            TYPED(input_matrices) = TYPED(mats_to_vec)(mats)
            with nogil:
                TYPED(out_list) = CMatOps[TYPE_NAME].softmax_vector(TYPED(input_matrices), temperature)
            out_py_list = []
            for TYPED(out_mat) in TYPED(out_list):
                out_py_list.append(WRAP_MAT(TYPED(out_mat)))
            return out_py_list
        ypy


    @staticmethod
    def cross_entropy_elementwise(Mat mat, Mat target):
        pypinline type_frepeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_fexpression_args(pyp, ["mat", "target"],
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].CE_eltwise(DEREF_MAT(mat), DEREF_MAT(target))
            return WRAP_MAT(TYPED(out))
        ypy


    @staticmethod
    def circular_convolution(Mat mat, Mat shift):
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_fexpression_args(pyp, ["mat", "shift"],
            with nogil:
                TYPED(out) = CMatOps[TYPE_NAME].circular_convolution(DEREF_MAT(mat), DEREF_MAT(shift))
            return WRAP_MAT(TYPED(out))
        ypy


    @staticmethod
    def broadcast(Mat mat, int axis, int num_replicas):
        pypinline type_repeat(pyp,
        cdef CMat[TYPE_NAME] TYPED(out)
        ypy
        pypinline typed_fexpression_args(pyp, ["mat"],
            with nogil:
                if axis == 0:
                    TYPED(out) = CMatOps[TYPE_NAME].broadcast_row_vector(DEREF_MAT(mat), num_replicas)
                elif axis == 1:
                    TYPED(out) = CMatOps[TYPE_NAME].broadcast_col_vector(DEREF_MAT(mat), num_replicas)
            return WRAP_MAT(TYPED(out))
        ypy
