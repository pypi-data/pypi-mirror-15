{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/div_fixes/__javascript__/div_fixes.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/div_fixes/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\nfrom div_fixes.issue55 import *\n\ndef run (autoTester):\n\tautoTester.check ('Issue 40')\n\tautoTester.check (65 / (5 * 2))\n\n\tautoTester.check ('Issue 24')\n\tswitch = False\n\tautoTester.check (switch)\n\t\n\tautoTester.check ('Issue 37')\n\tautoTester.check (15 // 7)\n\t\n\tautoTester.check ('Issue 27')\n\tautoTester.check (['zero', 'one', 'two', 'three', 'four'] .index ('three'))\n\t\n\tautoTester.check ('Issue 36')\n\t# Workaround for Python closures capturing variables rather than values\n\t# An extra enclosing scope is created to remember the value of the variable\n\tresults = []\n\tfor i in range (10):\n\t\t# results.append (lambda: i)\t\t\t\t# Works nowhere\n\t\t# results.append (lambda j = i: j)\t\t\t# Works only in Python\n\t\tresults.append ((lambda j: lambda: j) (i))\t# Works in Python and Trancrypt\n\tautoTester.check ([result () for result in results])\t\t\n\n\tautoTester.check ('Issue 50')\n\tautoTester.check ((240 + 30 - 1) // 30 * 30)\n\t\n\tautoTester.check ('Issue 51')\n\ta = 1\n\tb = 1\n\tautoTester.check (a, b, {a, b} == {1, 2})\n\t\n\tautoTester.check ('Issue 52')\n\tswitch, case, default = 'switch', 'case', 'default'\n\tautoTester.check (switch, case, default)\n\t\n\tautoTester.check ('Issue 54')\n\taDict = {1: 11, 2: 22, 3: 33}\n\tautoTester.check (aDict)\n\taDict.clear ()\n\tautoTester.check (aDict)\n\t\n\tautoTester.check ('Issue 60')\n\tthree = 3\n\tone = three & 1\n\tseven = three | 4\n\teight = one << 3\n\tfour = eight >> 1\n\taTrue = bool (three & one)\n\taFalse = bool (three & four)\n\tautoTester.check (3, three, 1, one, 7, seven, 8, eight, 4, four, True, aTrue, False, aFalse)\n\t\n\tautoTester.check ('Issue 65')\n\t__pragma__ ('opov')\n\taList = [4, 5, 6]\n\tautoTester.check ([1, 2, 3,] + aList + [4, 5, 6])\n\tautoTester.check (3 * [1, 2, 3])\n\tautoTester.check ([1, 2, 3] * 3)\n\taString = 'Crocodile'\n\tautoTester.check ('Tiger' + aString + 'Elephant')\n\tautoTester.check (3 * aString)\n\tautoTester.check (aString * 3)\n\t__pragma__ ('noopov')\n\t"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}