{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/demos/turtle_demos/__javascript__/mondrian.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/demos/turtle_demos/mondrian.py"
	],
	"sourcesContent": [
		"# Inspired by our cat Pietje\n\nfrom turtle import *\nfrom random import *\n\nspeed (0)\n\ncolors = ('gray', 'green', 'red', 'white', 'blue', 'yellow')\ndelta = 8\nthreshold = 100\ncolor ('black', 'black')\n\ndef maybe (bias = None):\n\treturn choice ([False, True, bias, bias] if bias != None else [False, True])\t\n\ndef between (a, b):\n\treturn a + (0.2 + 0.3 * random ()) * (b - a)\n\nrecentColors = ['black', 'black']\ndef originalColor ():\n\tglobal recentColors\n\twhile True:\n\t\tresult = choice (colors)\n\t\tif result == 'white' or not result in recentColors:\n\t\t\trecentColors = [result, recentColors [0]]\n\t\t\treturn result\n\t\ndef rect (xMin, yMin, xMax, yMax):\n\tfor aColor in ('black', originalColor ()):\n\t\tcolor (aColor, aColor)\n\t\t\n\t\tup ()\n\t\tgoto (xMin, yMin)\n\t\tdown ()\n\t\t\n\t\tbegin_fill ()\n\t\tgoto (xMax, yMin)\n\t\tgoto (xMax, yMax)\n\t\tgoto (xMin, yMax)\n\t\tgoto (xMin, yMin)\n\t\tend_fill ()\n\t\t\n\t\txMin += delta\n\t\tyMin += delta\n\t\txMax -= delta\n\t\tyMax -= delta\n\t\ndef draw (xMin = -250, yMin = -300, xMax = 250, yMax = 300):\n\tif xMax - xMin > threshold and yMax - yMin > threshold:\n\t\tif maybe (xMax - xMin > yMax - yMin):\n\t\t\txMid = between (xMin, xMax)\n\t\t\tif maybe ():\n\t\t\t\tdraw (xMin, yMin, xMid, yMax)\n\t\t\t\trect (xMid, yMin, xMax, yMax)\n\t\t\telse:\n\t\t\t\trect (xMin, yMin, xMid, yMax)\n\t\t\t\tdraw (xMid, yMin, xMax, yMax)\n\t\telse:\n\t\t\tyMid = between (yMin, yMax)\n\t\t\tif maybe ():\n\t\t\t\tdraw (xMin, yMin, xMax, yMid)\n\t\t\t\trect (xMin, yMid, xMax, yMax)\n\t\t\telse:\n\t\t\t\trect (xMin, yMin, xMax, yMid)\n\t\t\t\tdraw (xMin, yMid, xMax, yMax)\n\telse:\n\t\trect (xMin, yMin, xMax, yMax)\n\t\tontimer (lambda: (clear (), draw ()), 2000)\ndraw ()\ndone ()\t\t\n\n"
	],
	"mappings": "AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}