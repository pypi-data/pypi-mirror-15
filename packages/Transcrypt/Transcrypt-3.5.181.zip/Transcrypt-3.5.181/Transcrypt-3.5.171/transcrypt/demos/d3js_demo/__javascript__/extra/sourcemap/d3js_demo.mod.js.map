{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/demos/d3js_demo/__javascript__/d3js_demo.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/demos/d3js_demo/d3js_demo.py"
	],
	"sourcesContent": [
		"class Spawn:\n\tdef __init__ (self, width, height):\n\t\tself.width, self.height, self.spacing = self.fill = width, height, 100, d3.scale.category20 ()\n\n\t\tself.svg = d3.select ('body'\n\t\t) .append ('svg'\n\t\t) .attr ('width', self.width\n\t\t) .attr ('height', self.height\n\t\t) .on ('mousemove', self.mousemove\n\t\t) .on ('mousedown', self.mousedown)\n\t\t\n\t\tself.svg.append ('rect'\n\t\t) .attr ('width', self.width\n\t\t) .attr ('height', self.height)\n\n\t\tself.cursor = self.svg.append ('circle'\n\t\t) .attr ('r', self.spacing\n\t\t) .attr ('transform', 'translate ({}, {})' .format (self.width / 2, self.height / 2)\n\t\t) .attr ('class', 'cursor')\n\n\t\tself.force = d3.layout.force (\n\t\t) .size ([self.width, self.height]\n\t\t) .nodes ([{}]\n\t\t) .linkDistance (self.spacing\n\t\t) .charge (-1000\n\t\t) .on ('tick', self.tick)\t\t\n\n\t\tself.nodes, self.links, self.node, self.link = self.force.nodes (), self.force.links (), self.svg.selectAll ('.node'), self.svg.selectAll ('.link')\n\t\t\n\t\tself.restart ()\n\t\t\n\tdef mousemove (self):\n\t\tself.cursor.attr ('transform', 'translate (' + d3.mouse (self.svg.node ()) + ')')\n\n\tdef mousedown (self):\n\t\tdef pushLink (target):\n\t\t\tx, y = target.x - node.x, target.y - node.y\n\t\t\tif Math.sqrt (x * x + y * y) < self.spacing:\n\t\t\t\tspawn.links.push ({'source': node, 'target': target})\n\t\t\t\t\n\t\tpoint = d3.mouse (self.svg.node ())\n\t\tnode = {'x': point [0], 'y': point [1]}\n\t\tself.nodes.push (node)\n\t\tself.nodes.forEach (pushLink)\n\t\tself.restart ()\t\t\n\t\t\t\n\tdef tick (self):\n\t\tself.link.attr ('x1', lambda d: d.source.x\n\t\t) .attr ('y1', lambda d: d.source.y\n\t\t) .attr ('x2', lambda d: d.target.x\n\t\t) .attr ('y2', lambda d: d.target.y)\n\t\t\t\n\t\tself.node.attr ('cx', lambda d: d.x\n\t\t) .attr ('cy', lambda d: d.y)\n\n\tdef restart (self):\n\t\tself.link = self.link.data (self.links)\n\t\t\n\t\tself.link.enter (\n\t\t) .insert ('line', '.node'\n\t\t) .attr('class', 'link')\n\n\t\tself.node = self.node.data (self.nodes)\n\t\t\t\n\t\tself.node.enter (\n\t\t) .insert ('circle', '.cursor'\n\t\t) .attr ('class', 'node'\n\t\t) .attr ('r', 7\n\t\t) .call (self.force.drag)\n\n\t\tself.force.start ()\n\nspawn = Spawn (window.innerWidth, window.innerHeight)\n"
	],
	"mappings": "AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AAMA;AAGA;AAOA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAIA;AAEA;AAMA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}