{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/__javascript__/autotest.min.js",
	"sources": [
		"",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/__javascript__/__core__.mod.js",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/__base__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/__standard__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/__javascript__/__builtin__.mod.js",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/arguments/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/classes/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/conditional_expressions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/control_structures/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/data_structures/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/dict_comprehensions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/dictionaries/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/div_fixes/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/exceptions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/extended_slices/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/general_functions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/indices_and_slices/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/itertools/__javascript__/__init__.mod.js",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/lambda_functions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/list_comprehensions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/math/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/math_module/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/modules/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod1/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod1/mod11/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod1/mod11/mod111.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod1/mod11/mod112.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod2/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod2/mod21.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod2/mod22.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/modules/mod3.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/nonlocals/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/operator_overloading/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/autotester/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/properties/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/set_comprehensions/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/simple_and_augmented_assignment/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/tuple_assignment/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/autotest.py"
	],
	"sourcesContent": [
		"__pragma__ ('padding')",
		"\tvar __all__ = {};\n\tvar __world__ = __all__;\n\t\n\t// Nested object creator, part of the nesting may already exist and have attributes\n\tvar __nest__ = function (headObject, tailNames, value) {\n\t\t// In some cases this will be a global object, e.g. 'window'\n\t\tvar current = headObject;\n\t\t\n\t\tif (tailNames != '') {\t// Split on empty string doesn't give empty list\n\t\t\t// Find the last already created object in tailNames\n\t\t\tvar tailChain = tailNames.split ('.');\n\t\t\tvar firstNewIndex = tailChain.length;\n\t\t\tfor (var index = 0; index < tailChain.length; index++) {\n\t\t\t\tif (!current.hasOwnProperty (tailChain [index])) {\n\t\t\t\t\tfirstNewIndex = index;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcurrent = current [tailChain [index]];\n\t\t\t}\n\t\t\t\n\t\t\t// Create the rest of the objects, if any\n\t\t\tfor (var index = firstNewIndex; index < tailChain.length; index++) {\n\t\t\t\tcurrent [tailChain [index]] = {};\n\t\t\t\tcurrent = current [tailChain [index]];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Insert it new attributes, it may have been created earlier and have other attributes\n\t\tfor (var attrib in value) {\n\t\t\tcurrent [attrib] = value [attrib];\t\t\t\n\t\t}\t\t\n\t};\n\t__all__.__nest__ = __nest__;\n\t\n\t// Initialize module if not yet done and return its globals\n\tvar __init__ = function (module) {\n\t\tif (!module.__inited__) {\n\t\t\tmodule.__all__.__init__ (module.__all__);\n\t\t\tmodule.__inited__ = true;\n\t\t}\n\t\treturn module.__all__;\n\t};\n\t__all__.__init__ = __init__;\n\t\n\t// Since we want to assign functions, a = b.f should make b.f produce a bound function\n\t// So __get__ should be called by a property rather then a function\n\t// Factory __get__ creates one of three curried functions for func\n\t// Which one is produced depends on what's to the left of the dot of the corresponding JavaScript property\n\tvar __get__ = function (self, func, quotedFuncName) {\n\t\tif (self) {\n\t\t\tif (self.hasOwnProperty ('__class__') || typeof self == 'string' || self instanceof String) {\t\t\t// Object before the dot\n\t\t\t\tif (quotedFuncName) {\t\t\t\t\t\t\t\t\t// Memoize call since fcall is on, by installing bound function in instance\n\t\t\t\t\tObject.defineProperty (self, quotedFuncName, {\t\t// Will override the non-own property, next time it will be called directly\n\t\t\t\t\t\tvalue: function () {\t\t\t\t\t\t\t// So next time just call curry function that calls function\n\t\t\t\t\t\t\tvar args = [] .slice.apply (arguments);\n\t\t\t\t\t\t\treturn func.apply (null, [self] .concat (args));\n\t\t\t\t\t\t},\t\t\t\t\n\t\t\t\t\t\twritable: true,\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn function () {\t\t\t\t\t\t\t\t\t// Return bound function, code dupplication for efficiency if no memoizing\n\t\t\t\t\tvar args = [] .slice.apply (arguments);\t\t\t\t// So multilayer search prototype, apply __get__, call curry func that calls func\n\t\t\t\t\treturn func.apply (null, [self] .concat (args));\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Class before the dot\n\t\t\t\treturn func;\t\t\t\t\t\t\t\t\t\t\t// Return static method\n\t\t\t}\n\t\t}\n\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Nothing before the dot\n\t\t\treturn func;\t\t\t\t\t\t\t\t\t\t\t\t// Return free function\n\t\t}\n\t}\n\t__all__.__get__ = __get__;\n\t\t\t\n\t// Class creator function\n\tvar __class__ = function (name, bases, extra) {\n\t\t// Create class functor\n\t\tvar cls = function () {\n\t\t\tvar args = [] .slice.apply (arguments);\n\t\t\treturn cls.__new__ (args);\n\t\t};\n\t\t\n\t\t// Copy methods, properties and static attributes from base classes to new class object\n\t\tfor (var index = bases.length - 1; index >= 0; index--) {\t// Reversed order, since class vars of first base should win\n\t\t\tvar base = bases [index];\n\t\t\tfor (var attrib in base) {\n\t\t\t\tvar descrip = Object.getOwnPropertyDescriptor (base, attrib);\n\t\t\t\tObject.defineProperty (cls, attrib, descrip);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Add class specific attributes to class object\n\t\tcls.__name__ = name;\n\t\tcls.__bases__ = bases;\n\t\t\n\t\t// Add own methods, properties and static attributes to class object\n\t\tfor (var attrib in extra) {\n\t\t\tvar descrip = Object.getOwnPropertyDescriptor (extra, attrib);\n\t\t\tObject.defineProperty (cls, attrib, descrip);\n\t\t}\n\t\t\t\t\n\t\t// Return class object\n\t\treturn cls;\n\t};\n\t__all__.__class__ = __class__;\n\n\t// Create mother of all classes\t\t\n\tvar object = __all__.__class__ ('object', [], {\n\t\t__init__: function (self) {},\n\t\t\t\n\t\t__name__: 'object',\n\t\t__bases__: [],\n\t\t\t\n\t\t// Object creator function is inherited by all classes (??? Make global?)\n\t\t__new__: function (args) {\t// Args are just the constructor args\t\t\n\t\t\t// In JavaScript the Python class is the prototype of the Python object\n\t\t\t// In this way methods and static attributes will be available both with a class and an object before the dot\n\t\t\t// The descriptor produced by __get__ will return the right method flavor\n\t\t\tvar instance = Object.create (this, {__class__: {value: this, enumerable: true}});\n\t\t\t\n\t\t\t// Call constructor\n\t\t\tthis.__init__.apply (null, [instance] .concat (args));\n\t\t\t\n\t\t\t// Return instance\t\t\t\n\t\t\treturn instance;\n\t\t}\t\n\t});\n\t__all__.object = object;\n\t\n\t// Define __pragma__ to preserve '<all>' and '</all>', since it's never generated as a function, must be done early, so here\n\tvar __pragma__ = function () {};\n\t__all__.__pragma__ = __pragma__;\n",
		"# This module is avaible both in the Python and Transcrypt environments\n# It is included in-between the __core__ and the __builtin__ module, so the latter can adapt __envir__\n# In Transcrypt, __base__ is available inline, it isn't nested and cannot be imported in the normal way\n\nclass __Envir__:\n\tdef __init__ (self):\n\t\tself.transpiler_name = 'transcrypt'\n\t\tself.transpiler_version = '3.5.156'\n\t\tself.target_subdir = '__javascript__'\n\t\t\n__envir__ = __Envir__ ()\n",
		"# This module is avaible solely in the Transcrypt environment\n# It is included after the __builtin__ module, since it uses its facilities\n# In Transcrypt, __standard__ is available inline, it isn't nested and cannot be imported in the normal way\n\n__pragma__ ('skip')\ncopy = 0\n__pragma__ ('noskip')\n\nfrom org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('nokwargs')\n__pragma__ ('noalias', 'sort')\n\nclass Exception:\n\tdef __init__ (self, *args):\n\t\tself.args = args\n\t\t\n\tdef __repr__ (self):\n\t\tif len (self.args):\n\t\t\treturn '{}{}'.format (self.__class__.__name__, repr (tuple (self.args)))\n\t\telse:\n\t\t\treturn '???'\n\t\t\t\n\tdef __str__ (self):\n\t\tif len (self.args) > 1:\n\t\t\treturn str (tuple (self.args))\n\t\telif len (self.args):\n\t\t\treturn str (self.args [0])\n\t\telse:\n\t\t\treturn '???'\n\t\t\t\nclass ValueError (Exception):\n\tpass\n\t\t\t\n__pragma__ ('kwargs')\n\t\t\t\ndef __sort__ (iterable, key = None, reverse = False):\t# Used by py_sort, can deal with kwargs\n\tif key:\n\t\titerable.sort (lambda a, b: key (a) > key (b))\t# JavaScript sort\n\telse:\n\t\titerable.sort ()\t\t\t\t\t\t\t\t# JavaScript sort\n\t\t\n\tif reverse:\n\t\titerable.reverse ()\n\t\t\ndef sorted (iterable, key = None, reverse = False):\n\tif type (iterable) == dict:\n\t\tresult = copy (iterable.keys ()) \n\telse:\t\t\n\t\tresult = copy (iterable)\n\t\t\n\t__sort__ (result, key, reverse)\n\treturn result",
		"\n\t// Initialize non-nested modules __base__ and __standard__ and make its names available directly and via __all__\n\t// It can't do that itself, because it is a regular Python module\n\t// The compiler recognizes its their namesand generates them inline rather than nesting them\n\t// In this way it isn't needed to import them everywhere\n\t \t\n\t__nest__ (__all__, '', __init__ (__all__.org.transcrypt.__base__));\n\tvar __envir__ = __all__.__envir__;\n\n\t__nest__ (__all__, '', __init__ (__all__.org.transcrypt.__standard__));\n\tvar Exception = __all__.Exception;\n\tvar __sort__ = __all__.__sort__;\n\tvar sorted = __all__.sorted;\n\n\t// Complete __envir__, that was created in __base__, for non-stub mode\n\t__envir__.executor_name = __envir__.transpiler_name;\n\t\n\t// Make make __main__ available in browser\n\tvar __main__ = {__file__: ''};\n\t__all__.main = __main__;\n\t\n\t// Define current exception, there's at most one exception in the air at any time\n\tvar __except__ = null;\n\t__all__.__except__ = __except__;\n\t\t\n\t// Define recognizable dictionary for **kwargs parameter\n\tvar __kwargdict__ = function (anObject) {\n\t\tanObject.__class__ = __kwargdict__;\t// This class needs no __name__\n\t\tanObject.constructor = Object;\n\t\treturn anObject;\n\t}\n\t__all__.___kwargdict__ = __kwargdict__;\n\t\n\t// Property installer function, no member since that would bloat classes\n\tvar property = function (getter, setter) {\t// Returns a property descriptor rather than a property\n\t\tif (!setter) {\t// ??? Make setter optional instead of dummy?\n\t\t\tsetter = function () {};\n\t\t}\n\t\treturn {get: function () {return getter (this)}, set: function (value) {setter (this, value)}, enumerable: true};\n\t}\n\t__all__.property = property;\n\t\n\tvar __merge__ = function (object0, object1) {\n\t\tvar result = {};\n\t\tfor (var attrib in object0) {\n\t\t\tresult [attrib] = object0 [attrib];\n\t\t}\n\t\tfor (var attrib in object1) {\n\t\t\tresult [attrib] = object1 [attrib];\n\t\t}\n\t\treturn result;\n\t}\n\t__all__.__merge__ = __merge__;\n\t\n\t// Console message\n\tvar print = function () {\n\t\tvar args = [] .slice.apply (arguments)\n\t\tvar result = ''\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tresult += str (args [i]) + ' ';\n\t\t}\n\t\tconsole.log (result);\n\t};\n\t__all__.print = print;\n\t\n\t// Make console.log understand apply\n\tconsole.log.apply = function () {\n\t\tprint ([] .slice.apply (arguments) .slice (1));\n\t};\n\n\t// In function, used to mimic Python's in operator\n\tvar __in__ = function (element, container) {\n\t\tif (type (container) == dict) {\n\t\t\treturn container.py_keys () .indexOf (element) > -1;\n\t\t}\n\t\telse {\n\t\t\treturn container.indexOf (element) > -1;\n\t\t}\n\t}\n\t__all__.__in__ = __in__;\n\t\n\t// Find out if an attribute is special\n\tvar __specialattrib__ = function (attrib) {\n\t\treturn (attrib.startswith ('__') && attrib.endswith ('__')) || attrib == 'constructor' || attrib.startswith ('py_');\n\t}\n\t__all__.__specialattrib__ = __specialattrib__;\n\t\t\n\t// Len function for any object\n\tvar len = function (anObject) {\n\t\ttry {\n\t\t\treturn anObject.length;\n\t\t}\n\t\tcatch (exception) {\n\t\t\tvar result = 0;\n\t\t\tfor (attrib in anObject) {\n\t\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t};\n\t__all__.len = len;\n\t\n\tvar bool = {__name__: 'bool'}\n\t__all__.bool = bool;\n\t\n\tvar float = function (any) {\n\t\tif (isNaN (any)) {\n\t\t\tthrow ('ValueError');\t// !!! Turn into real value error\n\t\t}\n\t\telse {\n\t\t\treturn +any;\n\t\t}\n\t}\n\tfloat.__name__ = 'float'\n\t__all__.float = float;\n\t\n\tvar int = function (any) {\n\t\treturn float (any) | 0\n\t}\n\tint.__name__ = 'int';\n\t__all__.int = int;\n\t\n\tvar type = function (anObject) {\n\t\ttry {\n\t\t\treturn anObject.__class__;\n\t\t}\n\t\tcatch (exception) {\n\t\t\tvar aType = typeof anObject;\n\t\t\tif (aType == 'boolean') {\n\t\t\t\treturn bool;\n\t\t\t}\n\t\t\telse if (aType == 'number') {\n\t\t\t\tif (anObject % 1 == 0) {\n\t\t\t\t\treturn int;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn float;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn aType;\n\t\t\t}\n\t\t}\n\t}\n\t__all__.type = type;\n\t\n\tvar isinstance = function (anObject, classinfo) {\n\t\tfunction isA (queryClass) {\n\t\t\tif (queryClass == classinfo) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfor (var index = 0; index < queryClass.__bases__.length; index++) {\n\t\t\t\tif (isA (queryClass.__bases__ [index], classinfo)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn isA (anObject.__class__)\n\t};\n\t__all__.isinstance = isinstance;\n\t\n\t// Repr function uses __repr__ method, then __str__ then toString\n\tvar repr = function (anObject) {\n\t\ttry {\n\t\t\treturn anObject.__repr__ ();\n\t\t}\n\t\tcatch (exception) {\n\t\t\ttry {\n\t\t\t\treturn anObject.__str__ ();\n\t\t\t}\n\t\t\tcatch (exception) {\t// It was a dict in Python, so an Object in JavaScript\n\t\t\t\ttry {\n\t\t\t\t\tif (anObject.constructor == Object) {\n\t\t\t\t\t\tvar result = '{';\n\t\t\t\t\t\tvar comma = false;\n\t\t\t\t\t\tfor (var attrib in anObject) {\n\t\t\t\t\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\t\t\t\t\tif (attrib.isnumeric ()) {\n\t\t\t\t\t\t\t\t\tvar attribRepr = attrib;\t\t\t\t// If key can be interpreted as numerical, we make it numerical \n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t// So we accept that '1' is misrepresented as 1\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tvar attribRepr = '\\'' + attrib + '\\'';\t// Alpha key in dict\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (comma) {\n\t\t\t\t\t\t\t\t\tresult += ', ';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tcomma = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tresult += attribRepr + ': ' + anObject [attrib] .__repr__ ();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (exception) {\n\t\t\t\t\t\t\t\t\tresult += attribRepr + ': ' + anObject [attrib] .toString ();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult += '}';\n\t\t\t\t\t\treturn result;\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn typeof anObject == 'boolean' ? anObject.toString () .capitalize () : anObject.toString ();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (exception) {\n\t\t\t\t\tconsole.log ('ERROR: Could not evaluate repr (<object of type ' + typeof anObject + '>)');\n\t\t\t\t\treturn '???';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t__all__.repr = repr;\n\t\n\t// Char from Unicode or ASCII\n\t\n\tvar chr = function (charCode) {\n\t\treturn String.fromCharCode (charCode);\n\t}\n\t__all__.chr = chr;\n\n\t// Unicode or ASCII from char\n\t\n\tvar ord = function (aChar) {\n\t\treturn aChar.charCodeAt (0);\n\t}\n\t__all__.org = ord;\n\t\n\t// Reversed function for arrays\n\tvar reversed = function (iterable) {\n\t\titerable = iterable.slice ();\n\t\titerable.reverse ();\n\t\treturn iterable;\n\t}\n\t\n\t// Zip method for arrays\n\tvar zip = function () {\n\t\tvar args = [] .slice.call (arguments);\n\t\tvar shortest = args.length == 0 ? [] : args.reduce (\t// Find shortest array in arguments\n\t\t\tfunction (array0, array1) {\n\t\t\t\treturn array0.length < array1.length ? array0 : array1;\n\t\t\t}\n\t\t);\n\t\treturn shortest.map (\t\t\t\t\t// Map each element of shortest array\n\t\t\tfunction (current, index) {\t\t\t// To the result of this function\n\t\t\t\treturn args.map (\t\t\t\t// Map each array in arguments\n\t\t\t\t\tfunction (current) {\t\t// To the result of this function\n\t\t\t\t\t\treturn current [index]; // Namely it's index't entry\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\t__all__.zip = zip;\n\t\n\t// Range method, returning an array\n\tfunction range (start, stop, step) {\n\t\tif (typeof stop == 'undefined') {\n\t\t\t// one param defined\n\t\t\tstop = start;\n\t\t\tstart = 0;\n\t\t}\n\t\tif (typeof step == 'undefined') {\n\t\t\tstep = 1;\n\t\t}\n\t\tif ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n\t\t\treturn [];\n\t\t}\n\t\tvar result = [];\n\t\tfor (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n\t\t\tresult.push(i);\n\t\t}\n\t\treturn result;\n\t};\n\t__all__.range = range;\n\t\n\t// Enumerate method, returning a zipped list\n\tfunction enumerate (iterable) {\n\t\treturn zip (range (len (iterable)), iterable);\n\t}\n\t__all__.enumerate = enumerate;\n\t\t\n\t// Shallow and deepcopy\n\t\n\tfunction copy (anObject) {\n\t\tif (anObject == null || typeof anObject == \"object\") {\n\t\t\treturn anObject;\n\t\t}\n\t\telse {\n\t\t\tvar result = {}\n\t\t\tfor (var attrib in obj) {\n\t\t\t\tif (anObject.hasOwnProperty (attrib)) {\n\t\t\t\t\tresult [attrib] = anObject [attrib];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\t__all__.copy = copy;\n\t\n\tfunction deepcopy (anObject) {\n\t\tif (anObject == null || typeof anObject == \"object\") {\n\t\t\treturn anObject;\n\t\t}\n\t\telse {\n\t\t\tvar result = {}\n\t\t\tfor (var attrib in obj) {\n\t\t\t\tif (anObject.hasOwnProperty (attrib)) {\n\t\t\t\t\tresult [attrib] = deepcopy (anObject [attrib]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\t__all__.deepcopy = deepcopy;\n\t\t\n\t// List extensions to Array\n\t\n\tfunction list (iterable) {\t\t\t\t\t\t\t\t\t\t// All such creators should be callable without new\n\t\tvar instance = iterable ? [] .slice.apply (iterable) : [];\t// Spread iterable, n.b. array.slice (), so array before dot\n\t\t// Sort is the normal JavaScript sort, Python sort is a non-member function\n\t\treturn instance;\n\t}\n\t__all__.list = list;\n\tArray.prototype.__class__ = list;\t// All arrays are lists (not only if constructed by the list ctor), unless constructed otherwise\n\tlist.__name__ = 'list';\n\t\n\tArray.prototype.__getslice__ = function (start, stop, step) {\n\t\tif (start < 0) {\n\t\t\tstart = this.length + start;\n\t\t}\n\t\t\n\t\tif (stop == null) {\n\t\t\tstop = this.length;\n\t\t}\n\t\telse if (stop < 0) {\n\t\t\tstop = this.length + stop;\n\t\t}\n\t\t\n\t\tvar result = list ([]);\n\t\tfor (var index = start; index < stop; index += step) {\n\t\t\tresult.push (this [index]);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\t\n\tArray.prototype.__setslice__ = function (start, stop, step, source) {\n\t\tif (start < 0) {\n\t\t\tstart = this.length + start;\n\t\t}\n\t\t\t\n\t\tif (stop == null) {\n\t\t\tstop = this.length;\n\t\t}\n\t\telse if (stop < 0) {\n\t\t\tstop = this.length + stop;\n\t\t}\n\t\t\t\n\t\tif (step == null) {\t// Assign to 'ordinary' slice, replace subsequence\n\t\t\tArray.prototype.splice.apply (this, [start, stop - start] .concat (source)) \n\t\t}\n\t\telse {\t\t\t\t// Assign to extended slice, replace designated items one by one\n\t\t\tvar sourceIndex = 0;\n\t\t\tfor (var targetIndex = start; targetIndex < stop; targetIndex += step) {\n\t\t\t\tthis [targetIndex] = source [sourceIndex++];\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tArray.prototype.__repr__ = function () {\n\t\tif (this.__class__ == set && !this.length) {\n\t\t\treturn 'set()';\n\t\t}\n\t\t\n\t\tvar result = !this.__class__ || this.__class__ == list ? '[' : this.__class__ == tuple ? '(' : '{';\n\t\t\n\t\tfor (var index = 0; index < this.length; index++) {\n\t\t\tif (index) {\n\t\t\t\tresult += ', ';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tresult += this [index] .__repr__ ();\n\t\t\t}\n\t\t\tcatch (exception) {\n\t\t\t\tresult += this [index] .toString ();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.__class__ == tuple && this.length == 1) {\n\t\t\tresult += ',';\n\t\t}\n\t\t\n\t\tresult += !this.__class__ || this.__class__ == list ? ']' : this.__class__ == tuple ? ')' : '}';;\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.__str__ = Array.prototype.__repr__;\n\t\n\tArray.prototype.append = function (element) {\n\t\tthis.push (element);\n\t};\n\n\tArray.prototype.clear = function () {\n\t\tthis.length = 0;\n\t};\n\t\n\tArray.prototype.extend = function (aList) {\n\t\tthis.push.apply (this, aList);\n\t};\n\t\n\tArray.prototype.insert = function (index, element) {\n\t\tthis.splice (index, 0, element);\n\t};\n\n\tArray.prototype.remove = function (element) {\n\t\tvar index = this.indexOf (element);\n\t\tif (index == -1) {\n\t\t\tthrow ('KeyError');\n\t\t}\n\t\tthis.splice (index, 1);\n\t};\n\n\tArray.prototype.index = function (element) {\n\t\treturn this.indexOf (element)\n\t};\n\t\n\tArray.prototype.py_pop = function (index) {\n\t\tif (index == undefined) {\n\t\t\treturn this.pop ()\t// Remove last element\n\t\t}\n\t\telse {\n\t\t\treturn this.splice (index, 1) [0];\n\t\t}\n\t};\t\n\t\n\tArray.prototype.py_sort = function () {\n\t\t__sort__.apply  (null, [this].concat ([] .slice.apply (arguments)));\t// Can't work directly with arguments\n\t\t// Python params: (iterable, key = None, reverse = False)\n\t\t// py_sort is called with the Transcrypt kwargs mechanism, and just passes the params on to __sort__\n\t\t// __sort__ is def'ed with the Transcrypt kwargs mechanism\n\t};\n\t\n\t// Tuple extensions to Array\n\t\n\tfunction tuple (iterable) {\n\t\tvar instance = iterable ? [] .slice.apply (iterable) : [];\n\t\tinstance.__class__ = tuple;\t// Not all arrays are tuples\n\t\treturn instance;\n\t}\n\t__all__.tuple = tuple;\n\ttuple.__name__ = 'tuple';\n\t\n\t// Set extensions to Array\n\t// N.B. Since sets are unordered, set operations will occasionally alter the 'this' array by sorting it\n\t\t\n\tfunction set (iterable) {\n\t\tvar instance = [];\n\t\tif (iterable) {\n\t\t\tfor (var index = 0; index < iterable.length; index++) {\n\t\t\t\tinstance.add (iterable [index]);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tinstance.__class__ = set;\t// Not all arrays are sets\n\t\treturn instance;\n\t}\n\t__all__.set = set;\n\tset.__name__ = 'set';\n\t\n\tArray.prototype.__bindexOf__ = function (element) {\t// Used to turn O (n^2) into O (n log n)\n\t// Since sorting is lex, compare has to be lex. This also allows for mixed lists\n\t\n\t\telement += '';\n\t\n\t\tvar mindex = 0;\n\t\tvar maxdex = this.length - 1;\n\t\t\t \n\t\twhile (mindex <= maxdex) {\n\t\t\tvar index = (mindex + maxdex) / 2 | 0;\n\t\t\tvar middle = this [index] + '';\n\t \n\t\t\tif (middle < element) {\n\t\t\t\tmindex = index + 1;\n\t\t\t}\n\t\t\telse if (middle > element) {\n\t\t\t\tmaxdex = index - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\n\t \n\t\treturn -1;\n\t}\n\t\n\tArray.prototype.add = function (element) {\t\t\n\t\tif (this.indexOf (element) == -1) {\t// Avoid duplicates in set\n\t\t\tthis.push (element);\n\t\t}\n\t};\n\t\n\tArray.prototype.discard = function (element) {\n\t\tvar index = this.indexOf (element);\n\t\tif (index != -1) {\n\t\t\tthis.splice (index, 1);\n\t\t}\n\t};\n\t\n\tArray.prototype.isdisjoint = function (other) {\n\t\tthis.sort ();\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (this.__bindexOf__ (other [i]) != -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t\n\tArray.prototype.issuperset = function (other) {\n\t\tthis.sort ();\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (this.__bindexOf__ (other [i]) == -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t\n\tArray.prototype.issubset = function (other) {\n\t\treturn set (other.slice ()) .issuperset (this);\t// Sort copy of 'other', not 'other' itself, since it may be an ordered sequence\n\t};\n\t\n\tArray.prototype.union = function (other) {\n\t\tvar result = set (this.slice () .sort ());\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (result.__bindexOf__ (other [i]) == -1) {\n\t\t\t\tresult.push (other [i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.intersection = function (other) {\n\t\tthis.sort ();\n\t\tvar result = set ();\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (this.__bindexOf__ (other [i]) != -1) {\n\t\t\t\tresult.push (other [i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.difference = function (other) {\n\t\tvar sother = set (other.slice () .sort ());\n\t\tvar result = set ();\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tif (sother.__bindexOf__ (this [i]) == -1) {\n\t\t\t\tresult.push (this [i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.symmetric_difference = function (other) {\n\t\treturn this.union (other) .difference (this.intersection (other));\n\t};\n\t\n\tArray.prototype.update = function () {\t// O (n)\n\t\tvar updated = [] .concat.apply (this.slice (), arguments) .sort ();\t\t\n\t\tthis.clear ();\n\t\tfor (var i = 0; i < updated.length; i++) {\n\t\t\tif (updated [i] != updated [i - 1]) {\n\t\t\t\tthis.push (updated [i]);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Dict extensions to object\n\t\n\tfunction __keys__ () {\n\t\tvar keys = []\n\t\tfor (var attrib in this) {\n\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\tkeys.push (attrib);\n\t\t\t}     \n\t\t}\n\t\treturn keys;\n\t}\n\t__all__.__keys__ = __keys__;\n\t\t\n\tfunction __items__ () {\n\t\tvar items = []\n\t\tfor (var attrib in this) {\n\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\titems.push ([attrib, this [attrib]]);\n\t\t\t}     \n\t\t}\n\t\treturn items;\n\t}\n\t__all__.__items__ = __items__;\n\t\t\n\tfunction __del__ (key) {\n\t\tdelete this [key];\n\t}\n\t\n\t__all__.__del__ = __del__;\n\t\t\n\tfunction dict (objectOrPairs) {\n\t\tif (!objectOrPairs || objectOrPairs instanceof Array) {\t// It's undefined or an array of pairs\n\t\t\tvar instance = {};\n\t\t\tif (objectOrPairs) {\n\t\t\t\tfor (var index = 0; index < objectOrPairs.length; index++) {\n\t\t\t\t\tvar pair = objectOrPairs [index];\n\t\t\t\t\tinstance [pair [0]] = pair [1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t// It's a JavaScript object literal\n\t\t\tvar instance = objectOrPairs;\n\t\t}\n\t\t\t\n\t\t// Trancrypt interprets e.g. {aKey: 'aValue'} as a Python dict literal rather than a JavaScript object literal\n\t\t// So dict literals rather than bare Object literals will be passed to JavaScript libraries\n\t\t// Some JavaScript libraries call all enumerable callable properties of an object that's passed to them\n\t\t// So the properties of a dict should be non-enumerable\n\t\tObject.defineProperty (instance, '__class__', {value: dict, enumerable: false, writable: true});\n\t\tObject.defineProperty (instance, 'py_keys', {value: __keys__, enumerable: false});\t\t\t\n\t\tObject.defineProperty (instance, 'py_items', {value: __items__, enumerable: false});\t\t\n\t\tObject.defineProperty (instance, 'py_del', {value: __del__, enumerable: false});\n\t\t\n\t\treturn instance;\n\t}\n\t__all__.dict = dict;\n\tdict.__name__ = 'dict';\n\t\n\t// String extensions\n\t\t\n\tfunction str (stringable) {\n\t\ttry {\n\t\t\treturn stringable.__str__ ();\n\t\t}\n\t\tcatch (e) {\n\t\t\treturn new String (stringable);\n\t\t}\n\t}\n\t__all__.str = str;\t\n\t\n\tString.prototype.__class__ = str;\t// All strings are str\n\tstr.__name__ = 'str';\n\t\n\tString.prototype.__repr__ = function () {\n\t\treturn (this.indexOf ('\\'') == -1 ? '\\'' + this + '\\'' : '\"' + this + '\"') .replace ('\\n', '\\\\n');\n\t};\n\t\n\tString.prototype.__str__ = function () {\n\t\treturn this;\n\t};\n\t\n\tString.prototype.capitalize = function () {\n\t\treturn this.charAt (0).toUpperCase () + this.slice (1);\n\t};\n\t\n\tString.prototype.endswith = function (suffix) {\n\t\treturn suffix == '' || this.slice (-suffix.length) == suffix;\n\t};\n\t\n\tString.prototype.find  = function (sub, start) {\n\t\treturn this.indexOf (sub, start);\n\t};\n\t\n\t// Since it's worthwhile for the 'format' function to be able to deal with *args, it is defined as a property\n\t// __get__ will produce a bound function if there's something before the dot\n\t// Since a call using *args is compiled to e.g. <object>.<function>.apply (null, args), the function has to be bound already\n\t// Otherwise it will never be, because of the null argument\n\t// Using 'this' rather than 'null' contradicts the requirement to be able to pass bound functions around\n\t// The object 'before the dot' won't be available at call time in that case, unless implicitly via the function bound to it\n\t// While for Python methods this mechanism is generated by the compiler, for JavaScript methods it has to be provided manually\n\t// Call memoizing is unattractive here, since every string would then have to hold a reference to a bound format method\n\tObject.defineProperty (String.prototype, 'format', {\n\t\tget: function () {return __get__ (this, function (self) {\n\t\t\tvar args = tuple ([] .slice.apply (arguments).slice (1));\t\t\t\n\t\t\tvar autoIndex = 0;\n\t\t\treturn self.replace (/\\{(\\w*)\\}/g, function (match, key) { \n\t\t\t\tif (key == '') {\n\t\t\t\t\tkey = autoIndex++;\n\t\t\t\t}\n\t\t\t\tif (key == +key) {\t// So key is numerical\n\t\t\t\t\treturn args [key] == 'undefined' ? match : args [key];\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t// Key is a string\n\t\t\t\t\tfor (var index = 0; index < args.length; index++) {\n\t\t\t\t\t\t// Find first 'dict' that has that key and the right field\n\t\t\t\t\t\tif (typeof args [index] == 'object' && typeof args [index][key] != 'undefined') {\n\t\t\t\t\t\t\treturn args [index][key];\t// Return that field field\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t});\n\t\t});},\n\t\tenumerable: true\n\t});\n\t\n\tString.prototype.isnumeric = function () {\n\t\treturn !isNaN (parseFloat (this)) && isFinite (this);\n\t};\n\t\n\tString.prototype.join = function (aList) {\n\t\treturn aList.join (this);\n\t};\n\t\n\tString.prototype.lower = function () {\n\t\treturn this.toLowerCase ();\n\t};\n\t\n\tString.prototype.py_replace = function (old, aNew, maxreplace) {\n\t\treturn this.split (old, maxreplace) .join (aNew);\n\t};\n\t\n\tString.prototype.lstrip = function () {\n\t\treturn this.replace (/^\\s*/g, '');\n\t};\n\t\n\tString.prototype.rfind = function (sub, start) {\n\t\treturn this.lastIndexOf (sub, start);\n\t};\n\t\n\tString.prototype.rsplit = function (sep, maxsplit) {\n\t\tvar split = this.split (sep || /s+/);\n\t\treturn maxsplit ? [ split.slice (0, -maxsplit) .join (sep) ].concat (split.slice (-maxsplit)) : split;\n\t};\n\t\n\tString.prototype.rstrip = function () {\n\t\treturn this.replace (/\\s*$/g, '');\n\t};\n\t\n\tString.prototype.py_split = function (sep, maxsplit) {\n\t\tif (!sep) {\n\t\t\tsep = ' ';\n\t\t}\n\t\treturn this.split (sep || /s+/, maxsplit);\n\t};\n\t\n\tString.prototype.startswith = function (prefix) {\n\t\treturn this.indexOf (prefix) == 0;\n\t};\n\t\n\tString.prototype.strip = function () {\n\t\treturn this.trim ();\n\t};\n\t\t\n\tString.prototype.upper = function () {\n\t\treturn this.toUpperCase ();\n\t};\n\t\n\t// Operator overloading, only the ones that make most sense in matrix operations\n\t\n\tvar __neg__ = function (a) {\n\t\tif (typeof a == 'object' && '__neg__' in a) {\n\t\t\treturn a.__neg__ ();\n\t\t}\n\t\telse {\n\t\t\treturn -a;\n\t\t}\n\t};  \n\t__all__.__neg__ = __neg__;\n\t\n\tvar __matmul__ = function (a, b) {\n\t\treturn a.__matmul__ (b);\n\t};  \n\t__all__.__matmul__ = __matmul__;\n\t\n\tvar __mul__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__mul__' in a) {\n\t\t\treturn a.__mul__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rmul__' in b) {\n\t\t\treturn b.__rmul__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a * b;\n\t\t}\n\t};  \n\t__all__.__mul__ = __mul__;\n\t\n\tvar __div__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__div__' in a) {\n\t\t\treturn a.__div__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rdiv__' in b) {\n\t\t\treturn b.__rdiv__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a / b;\n\t\t}\n\t};  \n\t__all__.__div__ = __div__;\n\t\n\tvar __add__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__add__' in a) {\n\t\t\treturn a.__add__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__radd__' in b) {\n\t\t\treturn b.__radd__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a + b;\n\t\t}\n\t};  \n\t__all__.__add__ = __add__;\n\t\n\tvar __sub__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__sub__' in a) {\n\t\t\treturn a.__sub__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rsub__' in b) {\n\t\t\treturn b.__rsub__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a - b;\n\t\t}\n\t};  \n\t__all__.__sub__ = __sub__;\n\t\n\tvar __getitem__ = function (container, key) {\n\t\tif (typeof container == 'object' && '__getitem__' in container) {\n\t\t\treturn container.__getitem__ (key);\n\t\t}\n\t\telse {\n\t\t\treturn container [key];\n\t\t}\n\t};\n\t__all__.__getitem__ = __getitem__;\n\n\tvar __setitem__ = function (container, key, value) {\n\t\tif (typeof container == 'object' && '__setitem__' in container) {\n\t\t\tcontainer.__setitem__ (key, value);\n\t\t}\n\t\telse {\n\t\t\tcontainer [key] = value;\n\t\t}\n\t};\n\t__all__.__setitem__ = __setitem__;\n\n\tvar __getslice__ = function (container, lower, upper, step) {\n\t\tif (typeof container == 'object' && '__getitem__' in container) {\n\t\t\treturn container.__getitem__ ([lower, upper, step]);\n\t\t}\n\t\telse {\n\t\t\treturn container.__getslice__ (lower, upper, step);\n\t\t}\n\t};\n\t__all__.__getslice__ = __getslice__;\n\n\tvar __setslice__ = function (container, lower, upper, step, value) {\n\t\tif (typeof container == 'object' && '__setitem__' in container) {\n\t\t\tcontainer.__setitem__ ([lower, upper, step], value);\n\t\t}\n\t\telse {\n\t\t\tcontainer.__setslice__ (lower, upper, step, value);\n\t\t}\n\t};\n\t__all__.__setslice__ = __setslice__;\n\n\tvar __call__ = function (/* <callee>, <params>* */) {\n\t\tvar args = [] .slice.apply (arguments)\n\t\tif (typeof args [0] == 'object' && '__call__' in args [0]) {\n\t\t\treturn args [0] .__call__ .apply (null,  args.slice (1));\n\t\t}\n\t\telse {\n\t\t\treturn args [0] .apply (null, args.slice (1));\n\t\t}\t\t\n\t};\n\t__all__.__call__ = __call__;\n\n",
		"from org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('kwargs')\n\nclass A:\n\tdef __init__ (self, x = 123, y = 456, *args, m, n = 456, **kwargs):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.args = args\n\t\tself.m = m\n\t\tself.n = n\n\t\tself.kwargs = kwargs\n\t\tself.extra = 'hello'\n\n\tdef f (self, autoTester):\n\t\tautoTester.check (self.x, self.y, self.args, self.m, self.n, self.kwargs, self.extra)\n\t\t\nclass B (A):\n\tdef __init__ (self, x, y = -1, *args, m = -2, n, **kwargs):\n\t\tA.__init__ (self, y, x, *args, m = n, n = m, **kwargs)\n\t\t\nclass C:\n\t__pragma__ ('nokwargs')\n\tdef tricky (self, *args):\n\t\treturn args\n\t__pragma__ ('kwargs')\n\t\ndef run (autoTester):\n\tdef f (x, y = -1, *args, m = -2, n, **kwargs):\n\t\tdef f2 (x, y = -3, *args, m = -4, n, **kwargs):\n\t\t\tautoTester.check (x, y, args, m, n, kwargs)\n\t\tf2 (11, 22, 1010, 2020, m = 100100, n = 200200, p = 10001000, q = 20002000)\n\t\tautoTester.check (x, y, args, m, n, kwargs)\n\t\t\n\tf (1, 2, 10, 20, m = 100, n = 200, p = 1000, q = 2000)\n\t\n\tb = B (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000)\n\tb.f (autoTester)\n\t\n\tdef g (*args, **kwargs):\n\t\tautoTester.check (args, kwargs)\n\t\t\n\tg (*(1, 2, 3), **{'p': 'aP', 'q': 'aQ', 'r': 'anR'})\n\t\n\t(lambda x, y = -1, *args, m = -2, n, **kwargs: autoTester.check (x, y, args, m, n, kwargs)) (1, 2, 8, 16, m = 128, n = 256.3, p = 1024.3, q = 2048.3)\n\t\n\tautoTester.check (C () .tricky (* range (4)))\n\tautoTester.check ('{}-{}'.format (1, 3, 5, 7, 9))\n\tautoTester.check ('{}-{}'.format (* range (4)))\n",
		"def run (autoTester):\n\tclass A:\n\t\tp = 123\n\t\tdef __init__ (self, x):\n\t\t\tself.x = x\n\t\t\tautoTester.check (self.p)\n\n\t\tdef show (self, label):\n\t\t\tautoTester.check ('A.show', label, self.x)\n\t\t\t\n\t\tdef show2 (self, label):\n\t\t\tautoTester.check ('A.show2', label, self.x)\n\t\t\n\tclass B:\n\t\tp, q = 456, 789\n\t\tdef __init__ (self, y):\n\t\t\tautoTester.check ('In B constructor')\n\t\t\tself.y = y\n\t\t\tautoTester.check (self.p)\n\t\t\t\n\t\tdef show (self, label):\n\t\t\tautoTester.check ('B.show', label, self.y)\n\t\t\t\n\tclass C (A, B):\n\t\tdef __init__ (self, x, y):\n\t\t\tautoTester.check ('In C constructor')\n\t\t\tA.__init__ (self, x)\n\t\t\tB.__init__ (self, y)\n\t\t\t\n\t\tdef show (self, label):\n\t\t\tA.show (self, label)\n\t\t\tB.show (self, label)\n\t\t\tautoTester.check ('C.show', label, self.x, self.y)\n\t\t\n\ta = A (1001)\n\ta.show ('america')\n\tautoTester.check (A.p)\n\tautoTester.check (a.p)\n\n\tb = B (2002)\n\tb.show ('russia')\n\tautoTester.check (B.p)\n\tautoTester.check (b.p)\n\tautoTester.check (b.q)\n\n\tautoTester.check (A.p)\n\tautoTester.check (a.p)\n\n\tc = C (3003, 4004)\n\tc.show ('netherlands')\n\tautoTester.check (C.p)\n\tautoTester.check (c.p)\n\tautoTester.check (c.q)\n\n\tc.show2 ('amsterdam')\n\tA.show2 (c, 'rotterdam')\n\n\tshow3 = c.show\n\tshow3 ('copy')\n",
		"def f (x, b):\n\treturn x * x if b else x + x\n\ndef run (autoTester):\n\tbools = (False, True)\n\tfor a in bools:\n\t\tfor b in bools:\n\t\t\tautoTester.check (f (10 if a else 100, b))\n\t\t\t\n\tfor p in bools:\n\t\tfor q in bools:\n\t\t\tfor r in bools:\n\t\t\t\tautoTester.check ('a' if p else 'b' if q else 'c' if r else 'd')\n\t\t\t\t\n\t\t\t\ta = ((('e' if p else 'f') if q else 'g') if r else 'h')\n\t\t\t\tb = ('i' if p else ('j' if q else ('k' if r else 'l')))\n\t\t\t\tc = 'm' if (p if q else r) else 'n'\n\t\t\t\td = 'o' if p < q <= r else 'p'\n\t\t\t\tautoTester.check (a, b, c, d)\n\t\t\t\t\n\todd = [x if x % 2 else x + 1 for x in range (10)]\n\tnoDuplicates = set (odd)\n\tautoTester.check (odd, noDuplicates)\n\t",
		"def run (autoTester):\n\tfor index in range (10):\n\t\tautoTester.check (index)\n\t\t\n\tfor index in range (8, 16):\n\t\tautoTester.check (index)\n\t\t\n\tfor index in range (8, 16, 2):\n\t\tautoTester.check (index)\n\t\t\n\tfor index in range (10, 0, -1):\n\t\tautoTester.check (index)\n\t\t\n\tfor index in range (16, 8, -2):\n\t\tautoTester.check (index)\n\t\t\n\tfor animal in ('cat', 'dog', 'turtle', 'goldfish'):\n\t\tautoTester.check (animal)\n\n\tfor index, square in enumerate ([x * x for x in range (10) if x % 2]):\n\t\tfor y in (1, 2, 3):\n\t\t\tfor z in (10, 20, 30):\n\t\t\t\tautoTester.check (square + y, z )\n\n\tvehicles = ['bike', 'train', 'boat', 'car', 'plane', 'bus']\n\t\t\t\t\n\tfor doBreak in (False, True):\n\t\tfor doContinue in (False, True):\n\t\t\tfor index in range (10):\n\t\t\t\tfor index2 in range (0, 100, 10):\n\t\t\t\t\tif doBreak and index2 == 50:\n\t\t\t\t\t\tautoTester.check ('break2')\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif doContinue and index2 == 50:\n\t\t\t\t\t\tautoTester.check ('continue2')\n\t\t\t\t\t\tcontinue\n\t\t\t\telse:\n\t\t\t\t\tautoTester.check ('noBreak2')\n\t\t\t\t\t\n\t\t\t\tif doBreak and index == 5:\n\t\t\t\t\tautoTester.check ('break')\n\t\t\t\t\tbreak\n\t\t\t\tif doContinue and index == 5:\n\t\t\t\t\tautoTester.check ('continue')\n\t\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tautoTester.check ('noBreak')\n\t\t\t\t\n\t\t\tindex = 0\n\t\t\twhile index < len (vehicles) and vehicles [index] != 'bus':\n\t\t\t\tautoTester.check (index, vehicles [index])\n\t\t\t\tif doBreak and vehicles [index] == 'car':\n\t\t\t\t\tautoTester.check ('breakWhile')\n\t\t\t\t\tbreak\n\t\t\t\tif doContinue and vehicles [index] == 'car':\n\t\t\t\t\tautoTester.check ('continueWhile')\n\t\t\t\t\tindex += 1\n\t\t\t\t\tcontinue\n\t\t\t\tindex += 1\n\t\t\telse:\n\t\t\t\tautoTester.check ('noBreakWhile')\n\t\t\t\t\n\t\tfor vehicle in vehicles:\n\t\t\tif vehicle == 'bike':\n\t\t\t\tautoTester.check ('netherlands')\n\t\t\telif vehicle == 'car':\n\t\t\t\tautoTester.check ('america')\n\t\t\telif vehicle == 'boat':\n\t\t\t\tautoTester.check ('oceania')\n\t\t\telse:\n\t\t\t\tautoTester.check ('anywhere')\n",
		"def run (autoTester):\n\taList = [1, 2, 3, 'moon', 'stars']\n\tautoTester.check (aList)\n\taList.insert (3, 'sun')\n\tautoTester.check (aList)\n\tautoTester.check (aList [2:4:1])\n\tautoTester.check (aList [:])\n\tautoTester.check (aList [2:])\n\tautoTester.check (len (aList))\n\taList.append ('milkyway')\n\tautoTester.check (aList)\n\taList.extend (['m1', 'm31'])\n\tautoTester.check (aList)\n\n\tanotherList = list (('a', 'b', 'c'))\n\tautoTester.check (anotherList)\n\n\taDict = {1: 'plant', 'animal': 2}\n\tautoTester.check (aDict)\n\tautoTester.check (aDict [1], aDict ['animal'])\n\t\n\tdef p ():\n\t\treturn 3\n\t\t\n\tq = 4\n\t\n\tautoTester.check ({p (): 'three', q: 'four'})\n\t\n\taTuple = (1, 2, 3, 4, 5)\n\tautoTester.check(aTuple)\n\tautoTester.check (len (aTuple))\n\n\tanotherTuple = (1,)\n\tautoTester.check (anotherTuple)\n\n\taSet = {1, 2, 2, 3}\n\tautoTester.check\t(aSet)\n\tautoTester.check (len (aSet))\n\n\tanotherSet = set ((4, 5, 5, 6))\n\tautoTester.check (anotherSet)\n\n\temptySet = set ()\n\tautoTester.check (emptySet)\n\tautoTester.check (len (emptySet))\n",
		"from org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('iconv')\t# Convert dict to key list without using keys () method\n\ndef run (autoTester):\n\toriginal = {'Isaac': 'Newton', 'Albert': 'Einstein', 'Paul': 'Dirac'}\n\tautoTester.check (original)\n\n\tinverted = {original [key]: key for key in original}\n\tautoTester.check (inverted)\n",
		"from org.transcrypt.stubs.browser import __pragma__\n__pragma__ ('iconv')\n\ndef run (autoTester):\n\ttel = {'guido': 4127, 'jack': 4098}\n\ttel ['sape'] = 4139\n\n\tautoTester.check (tel)\n\tautoTester.check (tel ['jack'])\n\n\tdel tel ['sape']\n\ttel ['irv'] = 4127\n\tautoTester.check (tel)\n\n\tautoTester.check (sorted (list (tel.keys ())), False)\n\tautoTester.check (sorted (tel.keys ()))\n\n\tautoTester.check ('guido' in tel)\n\tautoTester.check ('jack' not in tel)\n\n\tautoTester.check (dict ([('guido', 4127), ('jack', 4098), ('sape', 4139)]))\n\n\tknights = {'robin': 'the brave', 'gallahad': 'the pure'}\n\n\tfor k, v in sorted (knights.items ()):\n\t\tautoTester.check (k, v)\n\n\tif 'gallahad' in knights:\n\t\tautoTester.check ('gallahad is a knight') \n\n\tfor k in sorted (knights):\n\t\tautoTester.check (k)\n\t\t\n\tknight = {'rudolph': 'the righteous'}\n\tfor k in knight:\t# Autotest automatic conversion with one knight, since sort order of dict undefined\n\t\tautoTester.check (k)",
		"def run (autoTester):\n\t# Issue 40\n\tautoTester.check (65 / (5 * 2))\n\n\t# Issue 24\n\tswitch = False\n\tautoTester.check (switch)\n\t\n\t# Issue 37\n\tautoTester.check (15 // 7)\n\t\n\t# Issue 27\n\tautoTester.check (['zero', 'one', 'two', 'three', 'four'] .index ('three'))\n\t\n\t# Issue 36, workaround for Python closures capturing variables rather than values\n\t# An extra enclosing scope is created to remember the value of the variable\n\t\n\tresults = []\n\n\tfor i in range (10):\n\t\t# results.append (lambda: i)\t\t\t\t# Works nowhere\n\t\t# results.append (lambda j = i: j)\t\t\t# Works only in Python\n\t\tresults.append ((lambda j: lambda: j) (i))\t# Works in Python and Trancrypt\n\n\tautoTester.check ([result () for result in results])",
		"class Ex1 (Exception):\n\tpass\n\t\t\nclass Ex2 (Ex1):\n\tpass\n\t\nclass Ex3 (Exception):\n\tpass\n\t\ndef test1 ():\n\traise (Exception ('mary'))\n\t\ndef test2 (autoTester):\n\ttry:\n\t\ttest1 ()\n\texcept Ex1 as exception:\n\t\tautoTester.check (111)\n\t\tautoTester.check (exception)\n\texcept Exception as exception:\n\t\tautoTester.check (222)\n\t\tautoTester.check (exception)\n\t\t\ndef run (autoTester):\n\ttest2 (autoTester)\n\t\n\ttry:\n\t\traise Ex2 ('had')\n\texcept Ex1 as exception:\n\t\tautoTester.check ('a')\n\texcept Exception as exception:\n\t\tautoTester.check ('little')\n\t\tautoTester.check (exception)\n\t\t\n\tautoTester.check (333)\n\t\t\n\ttry:\n\t\traise Ex1 ('lamb')\n\texcept Ex2 as exception:\n\t\tautoTester.check ('his')\n\t\tautoTester.check (exception)\n\texcept Ex1 as exception:\n\t\tautoTester.check ('fleece')\n\t\tautoTester.check (exception)\n\texcept Exception as exception:\n\t\tautoTester.check ('was')\n\t\tautoTester.check (exception)\n\tfinally:\n\t\tautoTester.check ('white')\n\t\t\n\tautoTester.check (444)\n\n\tdef test3 ():\n\t\traise Ex3 ('as')\n\t\t\n\tautoTester.check (555)\n\n\ttry:\n\t\ttest3 ()\n\texcept Ex1 as exception:\n\t\tautoTester.check ('snow')\n\t\tautoTester.check (exception)\n\texcept Exception as exception:\n\t\tautoTester.check ('and')\n\t\tautoTester.check (exception)\n\tfinally:\n\t\tautoTester.check ('everywhere')\n\t\t\n\tautoTester.check (666)\n",
		"from org.transcrypt.stubs.browser import *\nfrom org.transcrypt.stubs.browser import __pragma__, __envir__\n\ndef indices (key):\n\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\treturn tuple (key) if type (key) == list else key\n\telse:\n\t\ttry:\n\t\t\treturn key.indices (1000000000)\n\t\texcept:\n\t\t\ttry:\n\t\t\t\treturn tuple ([indices (subkey) for subkey in key])\n\t\t\texcept:\n\t\t\t\treturn key\n\nclass Test:\n\tdef __init__ (self, autoTester):\n\t\tself.autoTester = autoTester\n\n\tdef __getitem__ (self, key):\n\t\tself.autoTester.check ('getitem (', indices (key), ')')\n\t\treturn 1234567\n\t\t\n\tdef __setitem__ (self, key, value):\n\t\tself.autoTester.check ('setitem (', indices (key), ')', value)\n\ndef run (autoTester):\n\ta = b = c = d = e = f = g = h = i = j = k = l = Test (autoTester)\n\n\t__pragma__ ('opov')\n\t\t\t\n\ta [1:2:3, 4:5:6] = b [7:8:9]\n\tc [1:2:3] = d [4:5:6, 7:8:9]\n\te [1, 1:2:3, 3] = f [4, 4:5:6, 6]\n\tg [1, 2, 3] = h [1, 2, 3]\n\ti [1] = j [1]\n\tk [1:2:3] = l [1:2:3]\n",
		"def run (autoTester):\n\ta = [1, 5, 3, 2, -1]\n\tb = ['sun', 'earth', 'moon']\n\t\n\tautoTester.check (sorted (a))\n\tautoTester.check (sorted (b))\n\t\n\ta.sort ()\n\tautoTester.check (a)\n\t\n\tb.sort ()\n\tautoTester.check (b)\n\n\tautoTester.check (sorted (a, reverse = True))\n\tautoTester.check (sorted (b, reverse = True))\n\t\n\ta.sort (reverse = True)\n\tautoTester.check (a)\n\t\n\tb.sort (reverse = True)\n\tautoTester.check (b)\n\t\n\tb.sort (key = lambda x: len (x)) \n\tautoTester.check (b)\n\n\tb.sort (key = lambda x: len (x), reverse = True) \n\tautoTester.check (b)\n",
		"def run (autoTester):\n\t# Right hand side slices\n\tall = range (32)\n\tautoTester.check (all)\n\t\n\tautoTester.check (all [8 : 24])\n\tautoTester.check (all [8 : 24 : 2])\t\n\t\n\t# Left hand side slices\n\taList = [3, 4, 7, 8]\n\tautoTester.check (aList)\n\t\n\taList [4 : 4] = [9, 10]\n\tautoTester.check (aList)\n\t\n\taList [2 : 2] = [5, 6]\n\tautoTester.check (aList)\n\t\n\taList [0 : 0] = [1, 2]\n\tautoTester.check (aList)\n\t\n\taList [ : : 2] = [x + 0.001 for x in range (10) if x % 2]\n\tautoTester.check (aList)\n",
		"\t__nest__ (\n\t\t__all__,\n\t\t'itertools', {\n\t\t\t__all__: {\n\t\t\t\t__inited__: false,\n\t\t\t\t__init__: function (__all__) {\n\t\t\t\t\tvar chain = function () {\n\t\t\t\t\t\tvar args = [] .slice.apply (arguments);\n\t\t\t\t\t\tvar result = [];\n\t\t\t\t\t\tfor (var index = 0; index < args.length; index++) {\n\t\t\t\t\t\t\tresult = result.concat (args [index]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn list (result);\n\t\t\t\t\t}\n\t\t\t\t\t//<all>\n\t\t\t\t\t__all__.chain = chain;\n\t\t\t\t\t//</all>\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t);\n",
		"def run (autoTester):\n\tz = 1000\n\tautoTester.check ((lambda x, y: x + y + z) (111, 222))\n\n\tdef f (list0, list1, aFunc):\n\t\treturn [aFunc (*elem) for elem in zip (list0, list1)]\n\n\tx = f (range (10), range (0, 100, 10), lambda x, y: x + y + z)\n\tautoTester.check (x)\n\t\n\tautoTester.check (f (range (10, 20), range (100, 200, 10), lambda x, y: x * y + 100 * z))\n\tautoTester.check (f (range (10, 20), range (100, 200, 10), lambda *args: args [0] * args [1] + 100 * z))\n",
		"def run (autoTester):\n\tsquares = [i * i for i in range (10) if i % 2]\n\tautoTester.check (squares)\n\t\n\ttuples = [\n\t\t(x, y, z)\n\t\tfor x in (100, 200, 300, 400, 500, 600, 700)\n\t\t\tfor y in (10, 20, 30, 40, 50, 60, 70) if 20 < y  < 60\n\t\t\t\tfor z in (1, 2, 3, 4, 5, 6, 7) if 200 < x < 600 if 2 < z < 6\n\t]\n\tautoTester.check (tuples)\n\t\n\ttricky = [(2 * x, 3 * y) for x, y in ((10, 11), (20, 21))]\n\tautoTester.check (tricky)\n\t\n\tnested = [2 * x for x in [x * x for x in range (3)]]\n\tautoTester.check (nested)\n\t\n\ta = 100\n\tx = 5\n\tscopeTest = [x + a for x in range (5)]\n\tautoTester.check (x)\n\tautoTester.check (scopeTest)\n",
		"pi = Math.PI\ne = Math.E\n\nexp = Math.exp\nexpm1 = Math.expm1\n\nlog = Math.log\t\t# Simplified\nlog1p = Math.log1p\nlog2 = Math.log2\nlog10 = Math.log10\n\npow = Math.pow\nsqrt = Math.sqrt\n\nsin = Math.sin\ncos = Math.cos\ntan = Math.tan\n\nasin = Math.asin\nacos = Math.acos\natan = Math.atan\natan2 = Math.atan2\n\nhypot = Math.hypot\n\t\ndef degrees (x):\n\treturn x * 180 / Math.PI\n\t\ndef radians (x):\n\treturn x * Math.PI / 180\n\t\nsinh = Math.sinh\ncosh = Math.cosh\ntanh = Math.tanh\n\nasinh = Math.asinh\nacosh = Math.acosh\natanh = Math.atanh\n\nfloor = Math.floor\nceil = Math.ceil\ntrunc = Math.trunc\n",
		"from math import *\n\ndef run (autoTester):\n\tautoTester.check (pi)\n\tautoTester.check (e)\n\t\n\tautoTester.check (exp (3))\n\tautoTester.check (expm1 (4))\n\t\n\tautoTester.check (log (0.2))\n\tautoTester.check (log1p (5))\n\tautoTester.check (log2 (257))\n\tautoTester.check (log10 (1001))\n\t\n\tautoTester.check (pow (3, 4.5))\n\tautoTester.check (sqrt (25.1))\n\t\n\tautoTester.check (sin (10))\n\tautoTester.check (cos (10))\n\tautoTester.check (tan (10))\n\n\tautoTester.check (asin (0.5))\n\tautoTester.check (acos (0.5))\n\tautoTester.check (atan (0.5))\n\tautoTester.check (atan2 (1, 2))\n\t\n\tautoTester.check (hypot (3, 4.1))\n\t\n\tautoTester.check (degrees (pi/2.1))\n\tautoTester.check (radians (90))\n\t\n\tautoTester.check (sinh (1))\n\tautoTester.check (cosh (1))\n\tautoTester.check (tan (1))\n\t\n\tautoTester.check (asinh (70))\n\tautoTester.check (acosh (70))\n\tautoTester.check (atan (70))\n\t\n\tautoTester.check (floor (3.5))\n\tautoTester.check (ceil (3.5))\n\tautoTester.check (trunc (3.5))\n\t",
		"import modules.mod1.mod11.mod111\nimport modules.mod3\nimport modules.mod1.mod11.mod112\nimport modules.mod1\nimport modules.mod1.mod11\nimport modules.mod2\nimport modules.mod2.mod21\nimport modules.mod2.mod22\n\nimport modules.mod1.mod11.mod111 as aliasMod111\nimport modules.mod1 as aMod1\n\nfrom modules.mod1.mod11 import mod111, mod112\n\nfrom modules.mod2 import mod21 as aMod21, mod22 as aMod22\n\nfrom modules.mod3 import *\n\nfrom modules.mod1.mod11.mod111 import A\n\na = modules.mod1.mod11.mod111.A (12345)\npi = modules.mod1.pi\nf = modules.mod2.f\n\ndef run (autoTester):\n\t# Import without 'as'\n\tautoTester.check ('modules')\n\tautoTester.check (a.f ())\n\tautoTester.check (modules.mod1.mod11.mod112.f ())\n\tautoTester.check (modules.mod1.mod11.e)\n\tautoTester.check (pi)\n\tautoTester.check (f (102030))\n\tautoTester.check (modules.mod2.mod21.f ())\n\tB = modules.mod2.mod22.B\n\tb = B ()\n\tautoTester.check (b.x)\n\tautoTester.check (modules.mod3.x)\n\t\n\t# Import with 'as'\n\ta2 = aliasMod111.A (6789101112)\n\tautoTester.check (a2.f ())\n\tautoTester.check (aMod1.pi)\n\t\n\t# From ... import without 'as'\n\ta3 = mod111.A (100.001)\n\tautoTester.check (a3.f ())\n\tautoTester.check (mod112.f ())\n\t\n\t# From ... import with 'as'\n\tautoTester.check (aMod21.f ())\n\tautoTester.check (aMod22.B () .x)\n\t\n\t# From ... import *\n\tautoTester.check (mod3Hundred)\n\tautoTester.check (mod3GetTwoHundred ())\n\tautoTester.check (A (123.321) .f ())\n",
		"pi = 3.1415693588\n",
		"e = 2.74\n",
		"class A:\n\tdef __init__ (self, x):\n\t\tself.x = x\n\t\t\n\tdef f (self):\n\t\treturn self.x\n\t\t",
		"def f ():\n\treturn ('Paris, c\\'est la vie\\n')\n\t",
		"def f (p):\n\treturn 2 * p\n\t",
		"def f ():\n\treturn 'London is the town for me\\n'\n\t",
		"class B:\n\tdef __init__ (self):\n\t\tself.x = 'Geef mij maar Amsterdam\\n'\n\t\t",
		"x = 'Toen wij uit Rotterdam vertrokken, vertrokken wij uit Rotterdam\\n'\nmod3Hundred = 100\n\ndef mod3GetTwoHundred ():\n\treturn 200\n\t",
		"def run (autoTester):\n\ttest1 = 1\n\ttest2 = 2\n\t\n\tdef f ():\n\t\ttest1 = 10\n\t\t\n\t\tnonlocal test2\n\t\ttest2 = 20\n\t\t\n\t\tautoTester.check (test1, test2)\n\t\t\n\tf ()\n\tautoTester.check (test1, test2)\t\t\n",
		"from org.transcrypt.stubs.browser import __pragma__\n\nclass Matrix:\n\tdef __init__ (self, nRows, nCols, elements = []):\n\t\tself.nRows = nRows\n\t\tself.nCols = nCols\n\t\t\n\t\tif len (elements):\n\t\t\tself._ = elements\n\t\telse:\n\t\t\tself._ = [[0 for col in range (nCols)] for row in range (nRows)]\n\t\t\n\tdef __mul__ (self, other):\n\t\tif type (other) == Matrix:\n\t\t\tresult = Matrix (self.nRows, other.nCols)\n\t\t\tfor iTargetRow in range (result.nRows):\n\t\t\t\tfor iTargetCol in range (result.nCols):\n\t\t\t\t\tfor iTerm in range (self.nCols):\n\t\t\t\t\t\tresult._ [iTargetRow][iTargetCol] += self._ [iTargetRow][iTerm] * other._ [iTerm][iTargetCol]\n\t\t\treturn result\n\t\telse:\t# other is a scalar\n\t\t\treturn self.__rmul__ (other)\n\t\t\t\t\n\tdef __rmul__ (self, scalar):\t# Only called if left operand is scalar, all other cases will call __mul__\n\t\tresult = Matrix (self.nRows, self.nCols)\n\t\tfor iRow in range (self.nRows):\n\t\t\tfor iCol in range (self.nCols):\t\n\t\t\t\tresult._ [iRow][iCol] = scalar * self._ [iRow][iCol]\n\t\treturn result\n\t\n\tdef __add__ (self, other):\n\t\tresult = Matrix (self.nRows, self.nCols)\n\t\tfor iRow in range (self.nRows):\n\t\t\tfor iCol in range (self.nCols):\n\t\t\t\tresult._ [iRow][iCol] = self._ [iRow][iCol] + other._ [iRow][iCol]\n\t\treturn result\n\t\t\n\tdef __getitem__ (self, index):\n\t\treturn self._ [index]\n\n\tdef __setitem__ (self, index, value):\n\t\tself._ [index] = value\n\t\t\n\tdef __repr__ (self):\n\t\treturn repr (self._)\n\t\t\nclass Functor:\n\tdef __init__ (self, factor):\n\t\tself.factor = factor\n\t\t\n\t__pragma__ ('kwargs')\n\tdef __call__ (self, x, y = -1, *args, m = -2, n, **kwargs):\n\t\treturn (\n\t\t\tself.factor * x,\n\t\t\tself.factor * y,\n\t\t\t[self.factor * arg for arg in args],\n\t\t\tself.factor * m,\n\t\t\tself.factor * n,\n\t\t\t# !!! [self.factor * kwargs [key] for key in sorted (kwargs.keys ())] Add supoprt for keys () on kwargs\n\t\t)\n\t__pragma__ ('nokwargs')\n\t\nf = Functor (10)\n\n__pragma__ ('kwargs')\ndef g (x, y = -1, *args, m = -2, n, **kwargs):\n\treturn (x, y, args, m, n) # !!! , [kwargs [key] for key in sorted (kwargs.keys ())]) Add support for keys () on kwargs\n__pragma__ ('nokwargs')\n\t\t\ndef run (autoTester):\n\tm0 = Matrix (3, 3, [\n\t\t[1, 2, 3],\n\t\t[4, 5, 6],\n\t\t[7, 8, 10]\n\t])\n\t\n\tm1 = Matrix (3, 3, [\n\t\t[10, 20, 30],\n\t\t[40, 50, 60],\n\t\t[70, 80, 90]\n\t])\n\t\n\tx = 3\n\ty = x * 4 * x\n\tfast = 2 * 3\n\t\n\t__pragma__ ('opov')\n\t\n\tm1 [1][2] = m0 [1][2]\n\tslow = 2 + 3\n\tm2 = m0 * m1  + m1 * (m0 + m1)\n\tm3 = 2 * (2 * m0 * 3 * m1 + m2 * 4) * 2\n\tautoTester.check (m0 [1][1], m0 [1][2], m1 [1][1], m1 [1][2])\n\t\n\t__pragma__ ('noopov')\n\t\n\tfast2 = 16 * y + 1\n\t\n\tautoTester.check (m0, m1)\n\tautoTester.check (x, y)\n\tautoTester.check (m2)\n\tautoTester.check (m3)\n\tautoTester.check (fast, slow, fast2)\n\t\n\tx = 'marker'\n\t\n\t__pragma__ ('opov')\n\tautoTester.check (f (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000))\n\tautoTester.check (g (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000))\n\t__pragma__ ('noopov')\n",
		"# First run a test from the command prompt, generating an HTML file.\n# The output of the test is stored in a DIV.\n# Also the script is automatically included in the HTML file.\n# Loading the HTML file will run the script.\n# This will compare the output of the script running in the browswer to the output in the DIV.\n# If those two match, the test reports OK, else it reports failure.\n\nfrom org.transcrypt.stubs.browser import *\nfrom org.transcrypt.stubs.browser import __main__, __envir__, __pragma__\n# Don't import __envir__ from __base__ since it will overwrite __buildin__.__envir__ in the browser\n# Import from stubs will be skipped in the browser\n# ... The ice is a bit thin here\n\n__pragma__ ('nokwargs')\n\nimport itertools\n\nokColor = 'green'\nerrorColor = 'red'\nhighlightColor = 'yellow'\ntestletNameColor = 'blue'\n\nclass AutoTester:\n\tdef __init__ (self):\n\t\tself.referenceBuffer = []\n\t\tself.testBuffer = []\n\t\tself.messageDivId = 'message'\n\t\tself.referenceDivId = 'python'\n\t\tself.testDivId = 'transcrypt'\n\t\t\n\tdef sortedRepr (self, any):\t# When using sets or dicts, use elemens or keys of one type, in sort order\n\t\tdef tryGetNumKey (key):\n\t\t\tif type (key) == str:\t# Try to interpret key as numerical, see comment with repr function in __builtins__\n\t\t\t\ttry:\n\t\t\t\t\treturn int (key)\n\t\t\t\texcept:\n\t\t\t\t\ttry:\n\t\t\t\t\t\treturn float (key)\n\t\t\t\t\texcept:\n\t\t\t\t\t\treturn key\n\t\t\telse:\n\t\t\t\treturn key\n\t\t\t\t\n\t\tif type (any) == dict:\n\t\t\treturn '{' + ', '.join ([\n\t\t\t\t'{}: {}'.format (repr (key), repr (any [key]))\n\t\t\t\tfor index, key in enumerate (sorted ([tryGetNumKey (key) for key in any.keys ()], key = lambda aKey: str (aKey)))\n\t\t\t]) + '}'\n\t\telif type (any) == set:\n\t\t\tif len (any):\n\t\t\t\treturn '{' + ', '.join (sorted ([str (item) for item in list (any)])) + '}'\n\t\t\telse:\n\t\t\t\treturn repr (any)\n\t\telif type (any) == range:\n\t\t\treturn repr (list (any))\n\t\telse:\n\t\t\treturn repr (any)\n\t\t\t\n\tdef check (self, *args):\n\t\titem = ' '.join ([self.sortedRepr (arg) for arg in args])\t# N.B. stubs.browser provides a special sorting repr\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.testBuffer.append (item)\n\t\telse:\n\t\t\tself.referenceBuffer.append (item)\n\t\t\n\tdef dump (self, filePrename):\n\t\tfor minified in (False, True):\n\t\t\tminiInfix = '.min' if minified else ''\n\t\t\twith open ('{}{}.html'.format (filePrename, miniInfix), 'w') as aFile:\t\t\t\t\n\t\t\t\taFile.write ('<b>Status:</b>\\n')\n\t\t\t\taFile.write ('<div id=\"{}\"></div><br><br>\\n\\n'.format (self.messageDivId))\n\t\t\t\t\n\t\t\t\taFile.write ('<b>CPython output:</b>\\n')\n\t\t\t\taFile.write ('<div id=\"{}\">{}</div><br><br>\\n\\n'.format (self.referenceDivId, ' | '.join (self.referenceBuffer)))\n\t\t\t\t\n\t\t\t\taFile.write ('<b>Transcrypt output:</b>\\n')\n\t\t\t\taFile.write ('<div id=\"{}\"></div>\\n\\n'.format (self.testDivId))\n\n\t\t\t\taFile.write ('<script src=\"{}/{}{}.js\"></script>\\n\\n'.format (__envir__.target_subdir, filePrename, miniInfix))\n\t\t\t\t\n\tdef compare (self):\n\t\tself.referenceBuffer = document.getElementById (self.referenceDivId) .innerHTML.split (' | ')\n\t\tfor index, (testItem, referenceItem) in enumerate (zip (self.testBuffer, self.referenceBuffer)):\n\t\t\tif testItem != referenceItem:\n\t\t\t\tdocument.getElementById (self.messageDivId) .innerHTML = '<div style=\"color: {}\"><b>Test failed</b></div>'.format (errorColor)\n\t\t\t\tfor buffer, divId, accentColor in ((self.referenceBuffer, self.referenceDivId, okColor), (self.testBuffer, self.testDivId, errorColor)):\n\t\t\t\t\tbuffer = itertools.chain (buffer [ : index], [\n\t\t\t\t\t\t'!!! <div style=\"display: inline; color: {}; background-color: {}\"><b><i>{}</i></b></div>'.format (accentColor, highlightColor, buffer [index])\n\t\t\t\t\t], buffer [index + 1 : ])\n\t\t\t\t\tdocument.getElementById (divId) .innerHTML = ' | '.join (buffer)\n\t\t\t\tbreak\n\t\telse:\t\t\n\t\t\tdocument.getElementById (self.messageDivId) .innerHTML = '<div style=\"color: {}\">Test succeeded</div>'.format (okColor)\n\t\t\tdocument.getElementById (self.testDivId) .innerHTML = ' | '.join (self.testBuffer)\n\t\t\t\n\tdef run (self, testlet, testletName):\n\t\tself.check ('<div style=\"display: inline; color: {}\"> --- Testlet: {} --- </div><br>'.format (testletNameColor, testletName))\n\t\ttestlet.run (self)\n\t\tself.check ('<br><br>')\n\t\t\t\n\tdef done (self):\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.compare ()\n\t\telse:\n\t\t\tself.dump (__main__.__file__ [ : -3] .replace ('\\\\', '/') .rsplit ('/', 1) [-1])\n",
		"class A:\n\tp = 1234\n\tdef getX (self):\n\t\treturn self._x\n\n\tdef setX (self, value):\n\t\tself._x = value\n\t\t\t\n\tdef getY (self):\n\t\treturn self._y\n\n\tdef setY (self, value):\n\t\tself._y = 1000 + value\t# Weird but should be possible\n\t\t\n\tdef getY2 (self):\n\t\treturn self._y\n\n\tdef setY2 (self, value):\n\t\tself._y = value\n\t\t\n\tdef getT\t(self):\n\t\treturn self._t\n\n\tdef setT (self, value):\n\t\tself._t = value\n\t\t\n\tdef getU (self):\n\t\treturn self._u + 10000\n\n\tdef setU (self, value):\n\t\tself._u = value - 5000\n\t\t\t\n\tx, y, y2 = property (getX, setX), property (getY, setY), property (getY2, setY2)\n\tt = property (getT, setT)\n\tu = property (getU, setU)\n\t\nA.q = 5678\n\nclass B:\n\tdef getZ (self):\n\t\treturn self.z_\n\t\n\tdef setZ (self, value):\n\t\tself.z_ = value\n\t\t\n\tz = property (getZ, setZ)\n\t\nclass C:\n\tdef __init__ (self):\n\t\tself.offset = 1234\n\n\tdef getW (self):\n\t\treturn self.w_ + self.offset\n\t\t\n\tdef setW (self, value):\n\t\tself.w_ = value - self.offset\n\t\t\n\tw = property (getW, setW)\n\t\ndef run (autoTester):\n\ta1 = A ()\n\ta2 = A ()\n\n\ta1.y2 = 1000\n\ta2.y2 = 2000\n\t\n\ta1.x = 5\n\ta1.y = 6\n\t\n\ta2.x = 7\n\ta2.y = 8\n\n\ta1.t = 77\n\ta1.u = 88\n\t\t\n\tautoTester.check (a1.x, a1.y, a1.y2)\n\tautoTester.check (a2.x, a2.y, a2.y2)\n\tautoTester.check (a1.p, a2.p, a1.q, a2.q)\n\t\n\tautoTester.check (a1.t, a1.u)\n\t\n\tb = B ()\n\tc = C ()\n\t\n\tb.z = 100100\n\tc.z = 200200\n\tc.w = 300300\n\t\n\tautoTester.check (a1.x, b.z, c.z, c.w)\n\t\n\tc.w = 400400\n\tc.z = 500500\n\tb.z = 600600\n\t\n\tautoTester.check (a1.x, b.z, c.z, c.w)\n",
		"def run (autoTester):\n\teven = {2 * i for i in [0, 9, 1, 7, 2, 8, 3, 6, 4, 5]}\n\tautoTester.check (even)\n\t\n\todd = {2 * i + 1 for i in [5, 6, 7, 8, 9, 4, 3, 1, 2, 0]}\n\tautoTester.check (odd)\n\t\n\teven.add (12)\n\teven.add (12)\n\tautoTester.check (even)\n\t\n\teven.discard (12)\n\teven.discard (12)\n\tautoTester.check (even)\n\t\n\tuni = even.union (odd)\n\tautoTester.check (uni)\n\t\n\tautoTester.check (odd.isdisjoint (even))\n\tautoTester.check (uni.isdisjoint (even))\n\t\t\n\tautoTester.check (even.issuperset (uni))\n\tautoTester.check (uni.issuperset (even))\n\t\n\tautoTester.check (even.issubset (uni))\n\tautoTester.check (uni.issubset (even))\n\t\n\tfirst = {4, 1, 0, 5, 3, 2, 6}\n\tautoTester.check (first)\n\t\n\tsecond = {3, 5, 6, 9, 4, 7, 8}\n\tautoTester.check (second)\n\t\n\tinter = first.intersection (second)\n\tautoTester.check (inter)\n\t\n\tdiff = first.difference (second)\n\tautoTester.check (diff)\n\t\n\tsymDiff = first.symmetric_difference (second)\n\tautoTester.check (symDiff)\n\t\n\taSet = {200, 4, 5, 100}\n\taSet.update (first, symDiff, second)\n\tautoTester.check (aSet)\n\t",
		"class A:\n\tdef __init__ (self):\n\t\tself.i = 0\n\t\t\n\tdef f (self):\n\t\treturn self.i\n\na = A ()\n\t\t\ndef run (autoTester):\n\tx = 3\n\ty = 5\n\tz = x + y\n\tautoTester.check (z)\n\t\n\tl = [1, 2, 3]\n\tl [1] = l [2]\n\tautoTester.check (l)\n\t\n\t# Should generate x++\n\tx += 1\n\tautoTester.check (x)\n\tx += +1\n\tautoTester.check (x)\n\tx -= -1\n\tautoTester.check (x)\n\t\n\t# Should generate y--\n\ty -= 1\n\tautoTester.check (y)\n\ty -= +1\n\tautoTester.check (y)\n\ty += -1\n\tautoTester.check (y)\n\t\n\tx += -3\n\tautoTester.check (x)\n\t\n\tx += 6\n\tautoTester.check (x)\n\t\n\ty -= 3\n\tautoTester.check (y)\n\t\n\tl [1] += l [1]\n\tautoTester.check (l)\n\t\n\tx += y\n\ty += x\n\t\n\tautoTester.check (x, y)\n\t\n\tf = a.f\n\t\n\ta.i += 1\n\tautoTester.check (f ())\n\t\n\ta.i += 10\n\tautoTester.check (f ())\n\t\n\ta.i += a.i\n\tautoTester.check (f ())\n",
		"def run (autoTester):\n\t((a, b), santa, [c, d], e) = ((1, 2), 'santa-claus', {3, 4}, 5)\n\tautoTester.check (a, b, c, d, e, santa)\n\t\n\tfor i, x in enumerate ((0.5, 1.5, 2.5, 3.5)):\n\t\tautoTester.check (i, x)\n\t\n\te, pi = 3.14, 2.74\n\te, pi = pi, e\n\tautoTester.check (e, pi)\n\t\n\tdef f ():\n\t\treturn [(i, 2 * i) for i in range (7000, 10000, 1000)]\n\t\t\n\tdef g ():\n\t\treturn f\n\t\t\n\t[k, l], [m, n], (o, p) = g () ()\n\t\n\tautoTester.check (k, l, m, n, o, p)\n",
		"import org.transcrypt.autotester\n\nimport arguments\nimport classes\nimport conditional_expressions\nimport control_structures\nimport data_structures\nimport dict_comprehensions\nimport dictionaries\nimport div_fixes\nimport exceptions\nimport extended_slices\nimport general_functions\nimport indices_and_slices\nimport lambda_functions\nimport list_comprehensions\nimport modules\nimport math_module\nimport nonlocals\nimport operator_overloading\nimport properties\nimport set_comprehensions\nimport simple_and_augmented_assignment\nimport tuple_assignment\n\nautoTester = org.transcrypt.autotester.AutoTester ()\n\nautoTester.run (arguments, 'arguments')\nautoTester.run (classes, 'classes')\nautoTester.run (conditional_expressions, 'conditional_expressions')\nautoTester.run (control_structures, 'control_structures')\nautoTester.run (data_structures, 'data_structures')\nautoTester.run (dict_comprehensions, 'dict_comprehensions')\nautoTester.run (dictionaries, 'dictionaries')\nautoTester.run (div_fixes, 'div_fixes')\nautoTester.run (exceptions, 'exceptions')\nautoTester.run (extended_slices, 'extended_slices')\nautoTester.run (general_functions, 'general_functions')\nautoTester.run (indices_and_slices, 'indices_and_slices')\nautoTester.run (lambda_functions, 'lambda_functions')\nautoTester.run (list_comprehensions, 'list_comprehensions')\nautoTester.run (modules, 'modules')\nautoTester.run (math_module, 'math_module')\nautoTester.run (nonlocals, 'nonlocals')\nautoTester.run (operator_overloading, 'operator_overloading')\nautoTester.run (properties, 'properties')\nautoTester.run (set_comprehensions, 'set_comprehensions')\nautoTester.run (simple_and_augmented_assignment, 'simple_and_augmented_assignment')\nautoTester.run (tuple_assignment, 'tuple_assignemt')\n\nautoTester.done ()\n"
	],
	"mappings": "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"
}