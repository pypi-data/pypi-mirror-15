{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/demos/turtle_demos/__javascript__/mandala.min.js",
	"sources": [
		"",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/__javascript__/__core__.mod.js",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/__base__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/__standard__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/__javascript__/__builtin__.mod.js",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/turtle/__init__.py",
		"D:/activ_tosh/geatec/transcrypt/transcrypt/demos/turtle_demos/mandala.py"
	],
	"sourcesContent": [
		"__pragma__ ('padding')",
		"\tvar __all__ = {};\n\tvar __world__ = __all__;\n\t\n\t// Nested object creator, part of the nesting may already exist and have attributes\n\tvar __nest__ = function (headObject, tailNames, value) {\n\t\t// In some cases this will be a global object, e.g. 'window'\n\t\tvar current = headObject;\n\t\t\n\t\tif (tailNames != '') {\t// Split on empty string doesn't give empty list\n\t\t\t// Find the last already created object in tailNames\n\t\t\tvar tailChain = tailNames.split ('.');\n\t\t\tvar firstNewIndex = tailChain.length;\n\t\t\tfor (var index = 0; index < tailChain.length; index++) {\n\t\t\t\tif (!current.hasOwnProperty (tailChain [index])) {\n\t\t\t\t\tfirstNewIndex = index;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcurrent = current [tailChain [index]];\n\t\t\t}\n\t\t\t\n\t\t\t// Create the rest of the objects, if any\n\t\t\tfor (var index = firstNewIndex; index < tailChain.length; index++) {\n\t\t\t\tcurrent [tailChain [index]] = {};\n\t\t\t\tcurrent = current [tailChain [index]];\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Insert it new attributes, it may have been created earlier and have other attributes\n\t\tfor (var attrib in value) {\n\t\t\tcurrent [attrib] = value [attrib];\t\t\t\n\t\t}\t\t\n\t};\n\t__all__.__nest__ = __nest__;\n\t\n\t// Initialize module if not yet done and return its globals\n\tvar __init__ = function (module) {\n\t\tif (!module.__inited__) {\n\t\t\tmodule.__all__.__init__ (module.__all__);\n\t\t\tmodule.__inited__ = true;\n\t\t}\n\t\treturn module.__all__;\n\t};\n\t__all__.__init__ = __init__;\n\t\n\t// Since we want to assign functions, a = b.f should make b.f produce a bound function\n\t// So __get__ should be called by a property rather then a function\n\t// Factory __get__ creates one of three curried functions for func\n\t// Which one is produced depends on what's to the left of the dot of the corresponding JavaScript property\n\tvar __get__ = function (self, func, quotedFuncName) {\n\t\tif (self) {\n\t\t\tif (self.hasOwnProperty ('__class__') || typeof self == 'string' || self instanceof String) {\t\t\t// Object before the dot\n\t\t\t\tif (quotedFuncName) {\t\t\t\t\t\t\t\t\t// Memoize call since fcall is on, by installing bound function in instance\n\t\t\t\t\tObject.defineProperty (self, quotedFuncName, {\t\t// Will override the non-own property, next time it will be called directly\n\t\t\t\t\t\tvalue: function () {\t\t\t\t\t\t\t// So next time just call curry function that calls function\n\t\t\t\t\t\t\tvar args = [] .slice.apply (arguments);\n\t\t\t\t\t\t\treturn func.apply (null, [self] .concat (args));\n\t\t\t\t\t\t},\t\t\t\t\n\t\t\t\t\t\twritable: true,\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn function () {\t\t\t\t\t\t\t\t\t// Return bound function, code dupplication for efficiency if no memoizing\n\t\t\t\t\tvar args = [] .slice.apply (arguments);\t\t\t\t// So multilayer search prototype, apply __get__, call curry func that calls func\n\t\t\t\t\treturn func.apply (null, [self] .concat (args));\n\t\t\t\t};\n\t\t\t}\n\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Class before the dot\n\t\t\t\treturn func;\t\t\t\t\t\t\t\t\t\t\t// Return static method\n\t\t\t}\n\t\t}\n\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Nothing before the dot\n\t\t\treturn func;\t\t\t\t\t\t\t\t\t\t\t\t// Return free function\n\t\t}\n\t}\n\t__all__.__get__ = __get__;\n\t\t\t\n\t// Class creator function\n\tvar __class__ = function (name, bases, extra) {\n\t\t// Create class functor\n\t\tvar cls = function () {\n\t\t\tvar args = [] .slice.apply (arguments);\n\t\t\treturn cls.__new__ (args);\n\t\t};\n\t\t\n\t\t// Copy methods, properties and static attributes from base classes to new class object\n\t\tfor (var index = bases.length - 1; index >= 0; index--) {\t// Reversed order, since class vars of first base should win\n\t\t\tvar base = bases [index];\n\t\t\tfor (var attrib in base) {\n\t\t\t\tvar descrip = Object.getOwnPropertyDescriptor (base, attrib);\n\t\t\t\tObject.defineProperty (cls, attrib, descrip);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Add class specific attributes to class object\n\t\tcls.__name__ = name;\n\t\tcls.__bases__ = bases;\n\t\t\n\t\t// Add own methods, properties and static attributes to class object\n\t\tfor (var attrib in extra) {\n\t\t\tvar descrip = Object.getOwnPropertyDescriptor (extra, attrib);\n\t\t\tObject.defineProperty (cls, attrib, descrip);\n\t\t}\n\t\t\t\t\n\t\t// Return class object\n\t\treturn cls;\n\t};\n\t__all__.__class__ = __class__;\n\n\t// Create mother of all classes\t\t\n\tvar object = __all__.__class__ ('object', [], {\n\t\t__init__: function (self) {},\n\t\t\t\n\t\t__name__: 'object',\n\t\t__bases__: [],\n\t\t\t\n\t\t// Object creator function is inherited by all classes (??? Make global?)\n\t\t__new__: function (args) {\t// Args are just the constructor args\t\t\n\t\t\t// In JavaScript the Python class is the prototype of the Python object\n\t\t\t// In this way methods and static attributes will be available both with a class and an object before the dot\n\t\t\t// The descriptor produced by __get__ will return the right method flavor\n\t\t\tvar instance = Object.create (this, {__class__: {value: this, enumerable: true}});\n\t\t\t\n\t\t\t// Call constructor\n\t\t\tthis.__init__.apply (null, [instance] .concat (args));\n\t\t\t\n\t\t\t// Return instance\t\t\t\n\t\t\treturn instance;\n\t\t}\t\n\t});\n\t__all__.object = object;\n\t\n\t// Define __pragma__ to preserve '<all>' and '</all>', since it's never generated as a function, must be done early, so here\n\tvar __pragma__ = function () {};\n\t__all__.__pragma__ = __pragma__;\n",
		"# This module is avaible both in the Python and Transcrypt environments\n# It is included in-between the __core__ and the __builtin__ module, so the latter can adapt __envir__\n# In Transcrypt, __base__ is available inline, it isn't nested and cannot be imported in the normal way\n\nclass __Envir__:\n\tdef __init__ (self):\n\t\tself.transpiler_name = 'transcrypt'\n\t\tself.transpiler_version = '3.5.156'\n\t\tself.target_subdir = '__javascript__'\n\t\t\n__envir__ = __Envir__ ()\n",
		"# This module is avaible solely in the Transcrypt environment\n# It is included after the __builtin__ module, since it uses its facilities\n# In Transcrypt, __standard__ is available inline, it isn't nested and cannot be imported in the normal way\n\n__pragma__ ('skip')\ncopy = 0\n__pragma__ ('noskip')\n\nfrom org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('nokwargs')\n__pragma__ ('noalias', 'sort')\n\nclass Exception:\n\tdef __init__ (self, *args):\n\t\tself.args = args\n\t\t\n\tdef __repr__ (self):\n\t\tif len (self.args):\n\t\t\treturn '{}{}'.format (self.__class__.__name__, repr (tuple (self.args)))\n\t\telse:\n\t\t\treturn '???'\n\t\t\t\n\tdef __str__ (self):\n\t\tif len (self.args) > 1:\n\t\t\treturn str (tuple (self.args))\n\t\telif len (self.args):\n\t\t\treturn str (self.args [0])\n\t\telse:\n\t\t\treturn '???'\n\t\t\t\nclass ValueError (Exception):\n\tpass\n\t\t\t\n__pragma__ ('kwargs')\n\t\t\t\ndef __sort__ (iterable, key = None, reverse = False):\t# Used by py_sort, can deal with kwargs\n\tif key:\n\t\titerable.sort (lambda a, b: key (a) > key (b))\t# JavaScript sort\n\telse:\n\t\titerable.sort ()\t\t\t\t\t\t\t\t# JavaScript sort\n\t\t\n\tif reverse:\n\t\titerable.reverse ()\n\t\t\ndef sorted (iterable, key = None, reverse = False):\n\tif type (iterable) == dict:\n\t\tresult = copy (iterable.keys ()) \n\telse:\t\t\n\t\tresult = copy (iterable)\n\t\t\n\t__sort__ (result, key, reverse)\n\treturn result",
		"\n\t// Initialize non-nested modules __base__ and __standard__ and make its names available directly and via __all__\n\t// It can't do that itself, because it is a regular Python module\n\t// The compiler recognizes its their namesand generates them inline rather than nesting them\n\t// In this way it isn't needed to import them everywhere\n\t \t\n\t__nest__ (__all__, '', __init__ (__all__.org.transcrypt.__base__));\n\tvar __envir__ = __all__.__envir__;\n\n\t__nest__ (__all__, '', __init__ (__all__.org.transcrypt.__standard__));\n\tvar Exception = __all__.Exception;\n\tvar __sort__ = __all__.__sort__;\n\tvar sorted = __all__.sorted;\n\n\t// Complete __envir__, that was created in __base__, for non-stub mode\n\t__envir__.executor_name = __envir__.transpiler_name;\n\t\n\t// Make make __main__ available in browser\n\tvar __main__ = {__file__: ''};\n\t__all__.main = __main__;\n\t\n\t// Define current exception, there's at most one exception in the air at any time\n\tvar __except__ = null;\n\t__all__.__except__ = __except__;\n\t\t\n\t// Define recognizable dictionary for **kwargs parameter\n\tvar __kwargdict__ = function (anObject) {\n\t\tanObject.__class__ = __kwargdict__;\t// This class needs no __name__\n\t\tanObject.constructor = Object;\n\t\treturn anObject;\n\t}\n\t__all__.___kwargdict__ = __kwargdict__;\n\t\n\t// Property installer function, no member since that would bloat classes\n\tvar property = function (getter, setter) {\t// Returns a property descriptor rather than a property\n\t\tif (!setter) {\t// ??? Make setter optional instead of dummy?\n\t\t\tsetter = function () {};\n\t\t}\n\t\treturn {get: function () {return getter (this)}, set: function (value) {setter (this, value)}, enumerable: true};\n\t}\n\t__all__.property = property;\n\t\n\tvar __merge__ = function (object0, object1) {\n\t\tvar result = {};\n\t\tfor (var attrib in object0) {\n\t\t\tresult [attrib] = object0 [attrib];\n\t\t}\n\t\tfor (var attrib in object1) {\n\t\t\tresult [attrib] = object1 [attrib];\n\t\t}\n\t\treturn result;\n\t}\n\t__all__.__merge__ = __merge__;\n\t\n\t// Console message\n\tvar print = function () {\n\t\tvar args = [] .slice.apply (arguments)\n\t\tvar result = ''\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tresult += str (args [i]) + ' ';\n\t\t}\n\t\tconsole.log (result);\n\t};\n\t__all__.print = print;\n\t\n\t// Make console.log understand apply\n\tconsole.log.apply = function () {\n\t\tprint ([] .slice.apply (arguments) .slice (1));\n\t};\n\n\t// In function, used to mimic Python's in operator\n\tvar __in__ = function (element, container) {\n\t\tif (type (container) == dict) {\n\t\t\treturn container.py_keys () .indexOf (element) > -1;\n\t\t}\n\t\telse {\n\t\t\treturn container.indexOf (element) > -1;\n\t\t}\n\t}\n\t__all__.__in__ = __in__;\n\t\n\t// Find out if an attribute is special\n\tvar __specialattrib__ = function (attrib) {\n\t\treturn (attrib.startswith ('__') && attrib.endswith ('__')) || attrib == 'constructor' || attrib.startswith ('py_');\n\t}\n\t__all__.__specialattrib__ = __specialattrib__;\n\t\t\n\t// Len function for any object\n\tvar len = function (anObject) {\n\t\ttry {\n\t\t\treturn anObject.length;\n\t\t}\n\t\tcatch (exception) {\n\t\t\tvar result = 0;\n\t\t\tfor (attrib in anObject) {\n\t\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t};\n\t__all__.len = len;\n\t\n\tvar bool = {__name__: 'bool'}\n\t__all__.bool = bool;\n\t\n\tvar float = function (any) {\n\t\tif (isNaN (any)) {\n\t\t\tthrow ('ValueError');\t// !!! Turn into real value error\n\t\t}\n\t\telse {\n\t\t\treturn +any;\n\t\t}\n\t}\n\tfloat.__name__ = 'float'\n\t__all__.float = float;\n\t\n\tvar int = function (any) {\n\t\treturn float (any) | 0\n\t}\n\tint.__name__ = 'int';\n\t__all__.int = int;\n\t\n\tvar type = function (anObject) {\n\t\ttry {\n\t\t\treturn anObject.__class__;\n\t\t}\n\t\tcatch (exception) {\n\t\t\tvar aType = typeof anObject;\n\t\t\tif (aType == 'boolean') {\n\t\t\t\treturn bool;\n\t\t\t}\n\t\t\telse if (aType == 'number') {\n\t\t\t\tif (anObject % 1 == 0) {\n\t\t\t\t\treturn int;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn float;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn aType;\n\t\t\t}\n\t\t}\n\t}\n\t__all__.type = type;\n\t\n\tvar isinstance = function (anObject, classinfo) {\n\t\tfunction isA (queryClass) {\n\t\t\tif (queryClass == classinfo) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tfor (var index = 0; index < queryClass.__bases__.length; index++) {\n\t\t\t\tif (isA (queryClass.__bases__ [index], classinfo)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn isA (anObject.__class__)\n\t};\n\t__all__.isinstance = isinstance;\n\t\n\t// Repr function uses __repr__ method, then __str__ then toString\n\tvar repr = function (anObject) {\n\t\ttry {\n\t\t\treturn anObject.__repr__ ();\n\t\t}\n\t\tcatch (exception) {\n\t\t\ttry {\n\t\t\t\treturn anObject.__str__ ();\n\t\t\t}\n\t\t\tcatch (exception) {\t// It was a dict in Python, so an Object in JavaScript\n\t\t\t\ttry {\n\t\t\t\t\tif (anObject.constructor == Object) {\n\t\t\t\t\t\tvar result = '{';\n\t\t\t\t\t\tvar comma = false;\n\t\t\t\t\t\tfor (var attrib in anObject) {\n\t\t\t\t\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\t\t\t\t\tif (attrib.isnumeric ()) {\n\t\t\t\t\t\t\t\t\tvar attribRepr = attrib;\t\t\t\t// If key can be interpreted as numerical, we make it numerical \n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t// So we accept that '1' is misrepresented as 1\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tvar attribRepr = '\\'' + attrib + '\\'';\t// Alpha key in dict\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (comma) {\n\t\t\t\t\t\t\t\t\tresult += ', ';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tcomma = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tresult += attribRepr + ': ' + anObject [attrib] .__repr__ ();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (exception) {\n\t\t\t\t\t\t\t\t\tresult += attribRepr + ': ' + anObject [attrib] .toString ();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult += '}';\n\t\t\t\t\t\treturn result;\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\treturn typeof anObject == 'boolean' ? anObject.toString () .capitalize () : anObject.toString ();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (exception) {\n\t\t\t\t\tconsole.log ('ERROR: Could not evaluate repr (<object of type ' + typeof anObject + '>)');\n\t\t\t\t\treturn '???';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t__all__.repr = repr;\n\t\n\t// Char from Unicode or ASCII\n\t\n\tvar chr = function (charCode) {\n\t\treturn String.fromCharCode (charCode);\n\t}\n\t__all__.chr = chr;\n\n\t// Unicode or ASCII from char\n\t\n\tvar ord = function (aChar) {\n\t\treturn aChar.charCodeAt (0);\n\t}\n\t__all__.org = ord;\n\t\n\t// Reversed function for arrays\n\tvar reversed = function (iterable) {\n\t\titerable = iterable.slice ();\n\t\titerable.reverse ();\n\t\treturn iterable;\n\t}\n\t\n\t// Zip method for arrays\n\tvar zip = function () {\n\t\tvar args = [] .slice.call (arguments);\n\t\tvar shortest = args.length == 0 ? [] : args.reduce (\t// Find shortest array in arguments\n\t\t\tfunction (array0, array1) {\n\t\t\t\treturn array0.length < array1.length ? array0 : array1;\n\t\t\t}\n\t\t);\n\t\treturn shortest.map (\t\t\t\t\t// Map each element of shortest array\n\t\t\tfunction (current, index) {\t\t\t// To the result of this function\n\t\t\t\treturn args.map (\t\t\t\t// Map each array in arguments\n\t\t\t\t\tfunction (current) {\t\t// To the result of this function\n\t\t\t\t\t\treturn current [index]; // Namely it's index't entry\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\t__all__.zip = zip;\n\t\n\t// Range method, returning an array\n\tfunction range (start, stop, step) {\n\t\tif (typeof stop == 'undefined') {\n\t\t\t// one param defined\n\t\t\tstop = start;\n\t\t\tstart = 0;\n\t\t}\n\t\tif (typeof step == 'undefined') {\n\t\t\tstep = 1;\n\t\t}\n\t\tif ((step > 0 && start >= stop) || (step < 0 && start <= stop)) {\n\t\t\treturn [];\n\t\t}\n\t\tvar result = [];\n\t\tfor (var i = start; step > 0 ? i < stop : i > stop; i += step) {\n\t\t\tresult.push(i);\n\t\t}\n\t\treturn result;\n\t};\n\t__all__.range = range;\n\t\n\t// Enumerate method, returning a zipped list\n\tfunction enumerate (iterable) {\n\t\treturn zip (range (len (iterable)), iterable);\n\t}\n\t__all__.enumerate = enumerate;\n\t\t\n\t// Shallow and deepcopy\n\t\n\tfunction copy (anObject) {\n\t\tif (anObject == null || typeof anObject == \"object\") {\n\t\t\treturn anObject;\n\t\t}\n\t\telse {\n\t\t\tvar result = {}\n\t\t\tfor (var attrib in obj) {\n\t\t\t\tif (anObject.hasOwnProperty (attrib)) {\n\t\t\t\t\tresult [attrib] = anObject [attrib];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\t__all__.copy = copy;\n\t\n\tfunction deepcopy (anObject) {\n\t\tif (anObject == null || typeof anObject == \"object\") {\n\t\t\treturn anObject;\n\t\t}\n\t\telse {\n\t\t\tvar result = {}\n\t\t\tfor (var attrib in obj) {\n\t\t\t\tif (anObject.hasOwnProperty (attrib)) {\n\t\t\t\t\tresult [attrib] = deepcopy (anObject [attrib]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\t__all__.deepcopy = deepcopy;\n\t\t\n\t// List extensions to Array\n\t\n\tfunction list (iterable) {\t\t\t\t\t\t\t\t\t\t// All such creators should be callable without new\n\t\tvar instance = iterable ? [] .slice.apply (iterable) : [];\t// Spread iterable, n.b. array.slice (), so array before dot\n\t\t// Sort is the normal JavaScript sort, Python sort is a non-member function\n\t\treturn instance;\n\t}\n\t__all__.list = list;\n\tArray.prototype.__class__ = list;\t// All arrays are lists (not only if constructed by the list ctor), unless constructed otherwise\n\tlist.__name__ = 'list';\n\t\n\tArray.prototype.__getslice__ = function (start, stop, step) {\n\t\tif (start < 0) {\n\t\t\tstart = this.length + start;\n\t\t}\n\t\t\n\t\tif (stop == null) {\n\t\t\tstop = this.length;\n\t\t}\n\t\telse if (stop < 0) {\n\t\t\tstop = this.length + stop;\n\t\t}\n\t\t\n\t\tvar result = list ([]);\n\t\tfor (var index = start; index < stop; index += step) {\n\t\t\tresult.push (this [index]);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\t\n\tArray.prototype.__setslice__ = function (start, stop, step, source) {\n\t\tif (start < 0) {\n\t\t\tstart = this.length + start;\n\t\t}\n\t\t\t\n\t\tif (stop == null) {\n\t\t\tstop = this.length;\n\t\t}\n\t\telse if (stop < 0) {\n\t\t\tstop = this.length + stop;\n\t\t}\n\t\t\t\n\t\tif (step == null) {\t// Assign to 'ordinary' slice, replace subsequence\n\t\t\tArray.prototype.splice.apply (this, [start, stop - start] .concat (source)) \n\t\t}\n\t\telse {\t\t\t\t// Assign to extended slice, replace designated items one by one\n\t\t\tvar sourceIndex = 0;\n\t\t\tfor (var targetIndex = start; targetIndex < stop; targetIndex += step) {\n\t\t\t\tthis [targetIndex] = source [sourceIndex++];\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tArray.prototype.__repr__ = function () {\n\t\tif (this.__class__ == set && !this.length) {\n\t\t\treturn 'set()';\n\t\t}\n\t\t\n\t\tvar result = !this.__class__ || this.__class__ == list ? '[' : this.__class__ == tuple ? '(' : '{';\n\t\t\n\t\tfor (var index = 0; index < this.length; index++) {\n\t\t\tif (index) {\n\t\t\t\tresult += ', ';\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tresult += this [index] .__repr__ ();\n\t\t\t}\n\t\t\tcatch (exception) {\n\t\t\t\tresult += this [index] .toString ();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.__class__ == tuple && this.length == 1) {\n\t\t\tresult += ',';\n\t\t}\n\t\t\n\t\tresult += !this.__class__ || this.__class__ == list ? ']' : this.__class__ == tuple ? ')' : '}';;\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.__str__ = Array.prototype.__repr__;\n\t\n\tArray.prototype.append = function (element) {\n\t\tthis.push (element);\n\t};\n\n\tArray.prototype.clear = function () {\n\t\tthis.length = 0;\n\t};\n\t\n\tArray.prototype.extend = function (aList) {\n\t\tthis.push.apply (this, aList);\n\t};\n\t\n\tArray.prototype.insert = function (index, element) {\n\t\tthis.splice (index, 0, element);\n\t};\n\n\tArray.prototype.remove = function (element) {\n\t\tvar index = this.indexOf (element);\n\t\tif (index == -1) {\n\t\t\tthrow ('KeyError');\n\t\t}\n\t\tthis.splice (index, 1);\n\t};\n\n\tArray.prototype.index = function (element) {\n\t\treturn this.indexOf (element)\n\t};\n\t\n\tArray.prototype.py_pop = function (index) {\n\t\tif (index == undefined) {\n\t\t\treturn this.pop ()\t// Remove last element\n\t\t}\n\t\telse {\n\t\t\treturn this.splice (index, 1) [0];\n\t\t}\n\t};\t\n\t\n\tArray.prototype.py_sort = function () {\n\t\t__sort__.apply  (null, [this].concat ([] .slice.apply (arguments)));\t// Can't work directly with arguments\n\t\t// Python params: (iterable, key = None, reverse = False)\n\t\t// py_sort is called with the Transcrypt kwargs mechanism, and just passes the params on to __sort__\n\t\t// __sort__ is def'ed with the Transcrypt kwargs mechanism\n\t};\n\t\n\t// Tuple extensions to Array\n\t\n\tfunction tuple (iterable) {\n\t\tvar instance = iterable ? [] .slice.apply (iterable) : [];\n\t\tinstance.__class__ = tuple;\t// Not all arrays are tuples\n\t\treturn instance;\n\t}\n\t__all__.tuple = tuple;\n\ttuple.__name__ = 'tuple';\n\t\n\t// Set extensions to Array\n\t// N.B. Since sets are unordered, set operations will occasionally alter the 'this' array by sorting it\n\t\t\n\tfunction set (iterable) {\n\t\tvar instance = [];\n\t\tif (iterable) {\n\t\t\tfor (var index = 0; index < iterable.length; index++) {\n\t\t\t\tinstance.add (iterable [index]);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tinstance.__class__ = set;\t// Not all arrays are sets\n\t\treturn instance;\n\t}\n\t__all__.set = set;\n\tset.__name__ = 'set';\n\t\n\tArray.prototype.__bindexOf__ = function (element) {\t// Used to turn O (n^2) into O (n log n)\n\t// Since sorting is lex, compare has to be lex. This also allows for mixed lists\n\t\n\t\telement += '';\n\t\n\t\tvar mindex = 0;\n\t\tvar maxdex = this.length - 1;\n\t\t\t \n\t\twhile (mindex <= maxdex) {\n\t\t\tvar index = (mindex + maxdex) / 2 | 0;\n\t\t\tvar middle = this [index] + '';\n\t \n\t\t\tif (middle < element) {\n\t\t\t\tmindex = index + 1;\n\t\t\t}\n\t\t\telse if (middle > element) {\n\t\t\t\tmaxdex = index - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn index;\n\t\t\t}\n\t\t}\n\t \n\t\treturn -1;\n\t}\n\t\n\tArray.prototype.add = function (element) {\t\t\n\t\tif (this.indexOf (element) == -1) {\t// Avoid duplicates in set\n\t\t\tthis.push (element);\n\t\t}\n\t};\n\t\n\tArray.prototype.discard = function (element) {\n\t\tvar index = this.indexOf (element);\n\t\tif (index != -1) {\n\t\t\tthis.splice (index, 1);\n\t\t}\n\t};\n\t\n\tArray.prototype.isdisjoint = function (other) {\n\t\tthis.sort ();\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (this.__bindexOf__ (other [i]) != -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t\n\tArray.prototype.issuperset = function (other) {\n\t\tthis.sort ();\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (this.__bindexOf__ (other [i]) == -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t\n\tArray.prototype.issubset = function (other) {\n\t\treturn set (other.slice ()) .issuperset (this);\t// Sort copy of 'other', not 'other' itself, since it may be an ordered sequence\n\t};\n\t\n\tArray.prototype.union = function (other) {\n\t\tvar result = set (this.slice () .sort ());\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (result.__bindexOf__ (other [i]) == -1) {\n\t\t\t\tresult.push (other [i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.intersection = function (other) {\n\t\tthis.sort ();\n\t\tvar result = set ();\n\t\tfor (var i = 0; i < other.length; i++) {\n\t\t\tif (this.__bindexOf__ (other [i]) != -1) {\n\t\t\t\tresult.push (other [i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.difference = function (other) {\n\t\tvar sother = set (other.slice () .sort ());\n\t\tvar result = set ();\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tif (sother.__bindexOf__ (this [i]) == -1) {\n\t\t\t\tresult.push (this [i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\t\n\tArray.prototype.symmetric_difference = function (other) {\n\t\treturn this.union (other) .difference (this.intersection (other));\n\t};\n\t\n\tArray.prototype.update = function () {\t// O (n)\n\t\tvar updated = [] .concat.apply (this.slice (), arguments) .sort ();\t\t\n\t\tthis.clear ();\n\t\tfor (var i = 0; i < updated.length; i++) {\n\t\t\tif (updated [i] != updated [i - 1]) {\n\t\t\t\tthis.push (updated [i]);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Dict extensions to object\n\t\n\tfunction __keys__ () {\n\t\tvar keys = []\n\t\tfor (var attrib in this) {\n\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\tkeys.push (attrib);\n\t\t\t}     \n\t\t}\n\t\treturn keys;\n\t}\n\t__all__.__keys__ = __keys__;\n\t\t\n\tfunction __items__ () {\n\t\tvar items = []\n\t\tfor (var attrib in this) {\n\t\t\tif (!__specialattrib__ (attrib)) {\n\t\t\t\titems.push ([attrib, this [attrib]]);\n\t\t\t}     \n\t\t}\n\t\treturn items;\n\t}\n\t__all__.__items__ = __items__;\n\t\t\n\tfunction __del__ (key) {\n\t\tdelete this [key];\n\t}\n\t\n\t__all__.__del__ = __del__;\n\t\t\n\tfunction dict (objectOrPairs) {\n\t\tif (!objectOrPairs || objectOrPairs instanceof Array) {\t// It's undefined or an array of pairs\n\t\t\tvar instance = {};\n\t\t\tif (objectOrPairs) {\n\t\t\t\tfor (var index = 0; index < objectOrPairs.length; index++) {\n\t\t\t\t\tvar pair = objectOrPairs [index];\n\t\t\t\t\tinstance [pair [0]] = pair [1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t// It's a JavaScript object literal\n\t\t\tvar instance = objectOrPairs;\n\t\t}\n\t\t\t\n\t\t// Trancrypt interprets e.g. {aKey: 'aValue'} as a Python dict literal rather than a JavaScript object literal\n\t\t// So dict literals rather than bare Object literals will be passed to JavaScript libraries\n\t\t// Some JavaScript libraries call all enumerable callable properties of an object that's passed to them\n\t\t// So the properties of a dict should be non-enumerable\n\t\tObject.defineProperty (instance, '__class__', {value: dict, enumerable: false, writable: true});\n\t\tObject.defineProperty (instance, 'py_keys', {value: __keys__, enumerable: false});\t\t\t\n\t\tObject.defineProperty (instance, 'py_items', {value: __items__, enumerable: false});\t\t\n\t\tObject.defineProperty (instance, 'py_del', {value: __del__, enumerable: false});\n\t\t\n\t\treturn instance;\n\t}\n\t__all__.dict = dict;\n\tdict.__name__ = 'dict';\n\t\n\t// String extensions\n\t\t\n\tfunction str (stringable) {\n\t\ttry {\n\t\t\treturn stringable.__str__ ();\n\t\t}\n\t\tcatch (e) {\n\t\t\treturn new String (stringable);\n\t\t}\n\t}\n\t__all__.str = str;\t\n\t\n\tString.prototype.__class__ = str;\t// All strings are str\n\tstr.__name__ = 'str';\n\t\n\tString.prototype.__repr__ = function () {\n\t\treturn (this.indexOf ('\\'') == -1 ? '\\'' + this + '\\'' : '\"' + this + '\"') .replace ('\\n', '\\\\n');\n\t};\n\t\n\tString.prototype.__str__ = function () {\n\t\treturn this;\n\t};\n\t\n\tString.prototype.capitalize = function () {\n\t\treturn this.charAt (0).toUpperCase () + this.slice (1);\n\t};\n\t\n\tString.prototype.endswith = function (suffix) {\n\t\treturn suffix == '' || this.slice (-suffix.length) == suffix;\n\t};\n\t\n\tString.prototype.find  = function (sub, start) {\n\t\treturn this.indexOf (sub, start);\n\t};\n\t\n\t// Since it's worthwhile for the 'format' function to be able to deal with *args, it is defined as a property\n\t// __get__ will produce a bound function if there's something before the dot\n\t// Since a call using *args is compiled to e.g. <object>.<function>.apply (null, args), the function has to be bound already\n\t// Otherwise it will never be, because of the null argument\n\t// Using 'this' rather than 'null' contradicts the requirement to be able to pass bound functions around\n\t// The object 'before the dot' won't be available at call time in that case, unless implicitly via the function bound to it\n\t// While for Python methods this mechanism is generated by the compiler, for JavaScript methods it has to be provided manually\n\t// Call memoizing is unattractive here, since every string would then have to hold a reference to a bound format method\n\tObject.defineProperty (String.prototype, 'format', {\n\t\tget: function () {return __get__ (this, function (self) {\n\t\t\tvar args = tuple ([] .slice.apply (arguments).slice (1));\t\t\t\n\t\t\tvar autoIndex = 0;\n\t\t\treturn self.replace (/\\{(\\w*)\\}/g, function (match, key) { \n\t\t\t\tif (key == '') {\n\t\t\t\t\tkey = autoIndex++;\n\t\t\t\t}\n\t\t\t\tif (key == +key) {\t// So key is numerical\n\t\t\t\t\treturn args [key] == 'undefined' ? match : args [key];\n\t\t\t\t}\n\t\t\t\telse {\t\t\t\t// Key is a string\n\t\t\t\t\tfor (var index = 0; index < args.length; index++) {\n\t\t\t\t\t\t// Find first 'dict' that has that key and the right field\n\t\t\t\t\t\tif (typeof args [index] == 'object' && typeof args [index][key] != 'undefined') {\n\t\t\t\t\t\t\treturn args [index][key];\t// Return that field field\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t});\n\t\t});},\n\t\tenumerable: true\n\t});\n\t\n\tString.prototype.isnumeric = function () {\n\t\treturn !isNaN (parseFloat (this)) && isFinite (this);\n\t};\n\t\n\tString.prototype.join = function (aList) {\n\t\treturn aList.join (this);\n\t};\n\t\n\tString.prototype.lower = function () {\n\t\treturn this.toLowerCase ();\n\t};\n\t\n\tString.prototype.py_replace = function (old, aNew, maxreplace) {\n\t\treturn this.split (old, maxreplace) .join (aNew);\n\t};\n\t\n\tString.prototype.lstrip = function () {\n\t\treturn this.replace (/^\\s*/g, '');\n\t};\n\t\n\tString.prototype.rfind = function (sub, start) {\n\t\treturn this.lastIndexOf (sub, start);\n\t};\n\t\n\tString.prototype.rsplit = function (sep, maxsplit) {\n\t\tvar split = this.split (sep || /s+/);\n\t\treturn maxsplit ? [ split.slice (0, -maxsplit) .join (sep) ].concat (split.slice (-maxsplit)) : split;\n\t};\n\t\n\tString.prototype.rstrip = function () {\n\t\treturn this.replace (/\\s*$/g, '');\n\t};\n\t\n\tString.prototype.py_split = function (sep, maxsplit) {\n\t\tif (!sep) {\n\t\t\tsep = ' ';\n\t\t}\n\t\treturn this.split (sep || /s+/, maxsplit);\n\t};\n\t\n\tString.prototype.startswith = function (prefix) {\n\t\treturn this.indexOf (prefix) == 0;\n\t};\n\t\n\tString.prototype.strip = function () {\n\t\treturn this.trim ();\n\t};\n\t\t\n\tString.prototype.upper = function () {\n\t\treturn this.toUpperCase ();\n\t};\n\t\n\t// Operator overloading, only the ones that make most sense in matrix operations\n\t\n\tvar __neg__ = function (a) {\n\t\tif (typeof a == 'object' && '__neg__' in a) {\n\t\t\treturn a.__neg__ ();\n\t\t}\n\t\telse {\n\t\t\treturn -a;\n\t\t}\n\t};  \n\t__all__.__neg__ = __neg__;\n\t\n\tvar __matmul__ = function (a, b) {\n\t\treturn a.__matmul__ (b);\n\t};  \n\t__all__.__matmul__ = __matmul__;\n\t\n\tvar __mul__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__mul__' in a) {\n\t\t\treturn a.__mul__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rmul__' in b) {\n\t\t\treturn b.__rmul__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a * b;\n\t\t}\n\t};  \n\t__all__.__mul__ = __mul__;\n\t\n\tvar __div__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__div__' in a) {\n\t\t\treturn a.__div__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rdiv__' in b) {\n\t\t\treturn b.__rdiv__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a / b;\n\t\t}\n\t};  \n\t__all__.__div__ = __div__;\n\t\n\tvar __add__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__add__' in a) {\n\t\t\treturn a.__add__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__radd__' in b) {\n\t\t\treturn b.__radd__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a + b;\n\t\t}\n\t};  \n\t__all__.__add__ = __add__;\n\t\n\tvar __sub__ = function (a, b) {\n\t\tif (typeof a == 'object' && '__sub__' in a) {\n\t\t\treturn a.__sub__ (b);\n\t\t}\n\t\telse if (typeof b == 'object' && '__rsub__' in b) {\n\t\t\treturn b.__rsub__ (a);\n\t\t}\n\t\telse {\n\t\t\treturn a - b;\n\t\t}\n\t};  \n\t__all__.__sub__ = __sub__;\n\t\n\tvar __getitem__ = function (container, key) {\n\t\tif (typeof container == 'object' && '__getitem__' in container) {\n\t\t\treturn container.__getitem__ (key);\n\t\t}\n\t\telse {\n\t\t\treturn container [key];\n\t\t}\n\t};\n\t__all__.__getitem__ = __getitem__;\n\n\tvar __setitem__ = function (container, key, value) {\n\t\tif (typeof container == 'object' && '__setitem__' in container) {\n\t\t\tcontainer.__setitem__ (key, value);\n\t\t}\n\t\telse {\n\t\t\tcontainer [key] = value;\n\t\t}\n\t};\n\t__all__.__setitem__ = __setitem__;\n\n\tvar __getslice__ = function (container, lower, upper, step) {\n\t\tif (typeof container == 'object' && '__getitem__' in container) {\n\t\t\treturn container.__getitem__ ([lower, upper, step]);\n\t\t}\n\t\telse {\n\t\t\treturn container.__getslice__ (lower, upper, step);\n\t\t}\n\t};\n\t__all__.__getslice__ = __getslice__;\n\n\tvar __setslice__ = function (container, lower, upper, step, value) {\n\t\tif (typeof container == 'object' && '__setitem__' in container) {\n\t\t\tcontainer.__setitem__ ([lower, upper, step], value);\n\t\t}\n\t\telse {\n\t\t\tcontainer.__setslice__ (lower, upper, step, value);\n\t\t}\n\t};\n\t__all__.__setslice__ = __setslice__;\n\n\tvar __call__ = function (/* <callee>, <params>* */) {\n\t\tvar args = [] .slice.apply (arguments)\n\t\tif (typeof args [0] == 'object' && '__call__' in args [0]) {\n\t\t\treturn args [0] .__call__ .apply (null,  args.slice (1));\n\t\t}\n\t\telse {\n\t\t\treturn args [0] .apply (null, args.slice (1));\n\t\t}\t\t\n\t};\n\t__all__.__call__ = __call__;\n\n",
		"__pragma__ ('skip')\ndocument = Math = 0\n__pragma__ ('noskip')\n\n_debug = False\n\ndef abs (vec2D):\n\treturn Math.sqrt (vec2D [0] * vec2D [0] + vec2D [1] * vec2D [1])\n\n_ns = 'http://www.w3.org/2000/svg'\n_svg = document.createElementNS (_ns, 'svg')\n\n_defaultElement = document.body\n_defaultElement.appendChild (_svg)\n\n_width = None\n_height = None\n_offset = None\n\ndef _rightSize (self):\n\tnonlocal _width\n\tnonlocal _height\n\tnonlocal _offset\n\t\n\t_width = _defaultElement.offsetWidth\n\t_height = _defaultElement.offsetHeight\n\t_offset = [_width // 2, _height // 2]\n\t\n\t_svg.setAttribute ('width', _width)\n\t_svg.setAttribute ('height', _height)\n\t\nwindow.onresize = _rightSize\n\n_rightSize ()\n\ndef bgcolor (color):\n\tnonlocal _defaultElement\n\n\t_bgcolor = color\n\t_defaultElement.style.backgroundColor = _bgcolor\n\nbgcolor ('white')\n\t\ndef setDefaultElement (element):\n\tnonlocal _defaultElement\n\n\t_defaultElement.removeChild (_svg)\n\t_defaultElement = element\n\telement.appendChild (_svg)\n\t\n\t_rightSize ()\n\tbgcolor ('white')\n\n_allTurtles = []\n\t\nclass Turtle:\n\tdef __init__ (self):\n\t\t_allTurtles.append (self)\n\t\tself._paths = []\n\t\tself.reset ()\n\t\t\n\tdef reset (self):\n\t\tself._heading = Math.PI / 2\n\t\tself.pensize (1)\n\t\tself.color ('black', 'black')\n\t\tself.down ()\n\t\tself._track = []\t# Need to make track explicitly because:\n\t\tself.home ()\t\t# \tMakes a position but needs a track to put in in\n\t\tself.clear ()\t\t# \tMakes a track but needs a position to initialize it with\n\t\t\n\tdef clear (self):\n\t\tfor path in self._paths:\n\t\t\t_svg.removeChild (path)\n\t\tself._paths = []\n\t\t\n\t\tself._track = []\n\t\tself._moveto (self._position)\n\t\t\n\tdef _flush (self):\n\t\tif _debug:\n\t\t\tprint ('Flush:', self._track)\n\t\n\t\tif len (self._track) > 1:\n\t\t\tpath = document.createElementNS (_ns, 'path')\n\t\t\tpath.setAttribute ('d', ' '.join (self._track))\n\t\t\tpath.setAttribute ('stroke', self._pencolor if self._pencolor != None else 'none')\n\t\t\tpath.setAttribute ('stroke-width', self._pensize)\n\t\t\tpath.setAttribute ('fill', self._fillcolor if self._fill and self._fillcolor != None else 'none')\t\t\t\n\t\t\tpath.setAttribute ('fill-rule', 'evenodd')\n\t\t\t_svg.appendChild (path)\n\t\t\tself._paths.append (path)\n\t\t\t\t\n\t\t\tself._track = []\n\t\t\tself._moveto (self._position)\t# _track should start with a move command\n\t\t\n\tdef done (self):\n\t\tself._flush ()\n\t\t\n\tdef pensize (self, width):\n\t\tself._flush ()\n\t\tif width == None:\n\t\t\treturn self._pensize\n\t\telse:\n\t\t\tself._pensize = width\n\t\n\tdef color (self, pencolor, fillcolor = None):\n\t\tself._flush ()\n\t\tself._pencolor = pencolor\n\t\t\n\t\tif fillcolor != None:\n\t\t\tself._fillcolor = fillcolor\n\t\n\tdef goto (self, x, y = None):\n\t\tif y == None:\n\t\t\tself._position = x\n\t\telse:\n\t\t\tself._position = [x, y]\n\t\t\t\n\t\tself._track.append ('{} {} {}'.format (\n\t\t\t'L' if self._down else 'M',\n\t\t\tself._position [0] + _offset [0],\n\t\t\tself._position [1] + _offset [1])\n\t\t)\n\t\t\n\tdef _moveto (self, x, y = None):\n\t\twasdown = self.isdown ()\n\t\tself.up ()\n\t\tself.goto (x, y)\n\t\tif wasdown:\n\t\t\tself.down ()\n\t\t\t\n\tdef home (self):\n\t\tself._moveto (0, 0)\n\t\t\n\tdef position (self):\n\t\treturn self._position [:]\n\t\t\n\tdef pos (self):\n\t\treturn self.position ()\n\t\t\n\tdef distance (self, x, y = None):\n\t\tif y == None:\n\t\t\tother = x\n\t\telse:\n\t\t\tother = [x, y]\n\t\t\t\n\t\tdX = other [0] - self._position [0]\n\t\tdY = other [1] - self._position [1]\n\t\t\n\t\treturn Math.sqrt (dX * dX + dY * dY)\n\t\t\t\n\tdef up (self):\n\t\tself._down = False\n\t\t\n\tdef down (self):\n\t\tself._down = True\n\t\t\n\tdef isdown (self):\n\t\treturn self._down\n\t\t\n\tdef _predict (self, length):\n\t\tdelta = [Math.sin (self._heading), Math.cos (self._heading)]\n\t\treturn [self._position [0] + length * delta [0], self._position [1] + length * delta [1]]\n\t\t\n\tdef forward (self, length):\n\t\tself._position = self._predict (length)\n\t\t\n\t\tself._track.append ('{} {} {}'.format (\n\t\t\t'L' if self._down else 'M',\n\t\t\tself._position [0] + _offset [0],\n\t\t\tself._position [1] + _offset [1])\n\t\t)\n\t\t\n\tdef back (self, length):\n\t\tself.forward (-length)\n\t\t\n\tdef circle (self, radius):\n\t\tself.left (90)\n\t\topposite = self._predict (2 * (radius + 1) + 1)\n\t\tself.right (90)\n\t\n\t\tself._track.append ('{} {} {} {} {} {} {} {}'.format (\n\t\t\t'A',\n\t\t\tradius,\n\t\t\tradius,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\topposite [0] + _offset [0],\n\t\t\topposite [1] + _offset [1]\n\t\t))\n\t\t\n\t\tself._track.append ('{} {} {} {} {} {} {} {}'.format (\n\t\t\t'A',\n\t\t\tradius,\n\t\t\tradius,\n\t\t\t0,\n\t\t\t1,\n\t\t\t0,\n\t\t\tself._position [0] + _offset [0],\n\t\t\tself._position [1] + _offset [1]\n\t\t))\n\t\t\n\tdef left (self, angle):\n\t\tself._heading = (self._heading + Math.PI * angle / 180) % (2 * Math.PI)\n\t\t\t\n\tdef right (self, angle): \n\t\tself.left (-angle)\n\t\t\n\tdef begin_fill (self):\n\t\tself._flush ()\n\t\tself._fill = True\n\t\n\tdef end_fill (self):\n\t\tself._flush ()\n\t\tself._fill = False\n\t\t\n_defaultTurtle = Turtle ()\n\t\ndef reset ():\n\tnonlocal _allTurtles\n\tbgcolor ('white')\n\tfor turtle in _allTurtles:\n\t\tturtle.reset ()\n\t\tturtle.done ()\n\t\t\ndef clear ():\n\tnonlocal _allTurtles\n\tfor turtle in _allTurtles:\n\t\tturtle.clear ()\n\ndef done ():\t\t\t\t\t\t\t_defaultTurtle.done ()\ndef pensize (width):\t\t\t\t\t_defaultTurtle.pensize (width)\ndef color (pencolor, fillcolor = None):\t_defaultTurtle.color (pencolor, fillcolor)\ndef home ():\t\t\t\t\t\t\t_defaultTurtle.home ()\ndef goto (x, y = None):\t\t\t\t\t_defaultTurtle.goto (x, y)\ndef position ():\t\t\t\t\t\treturn _defaultTurtle.position ()\ndef pos ():\t\t\t\t\t\t\t\treturn _defaultTurtle.pos ()\ndef distance (x, y = None):\t\t\t\treturn _defaultTurtle.distance (x, y)\ndef up ():\t\t\t\t\t\t\t\t_defaultTurtle.up ()\ndef down ():\t\t\t\t\t\t\t_defaultTurtle.down ()\ndef forward (length):\t\t\t\t\t_defaultTurtle.forward (length)\ndef back (length):\t\t\t\t\t\t_defaultTurtle.back (length)\ndef circle (radius):\t\t\t\t\t_defaultTurtle.circle (radius)\ndef left (angle):\t\t\t\t\t\t_defaultTurtle.left (angle)\ndef right (angle):\t\t\t\t\t\t_defaultTurtle.right (angle)\ndef begin_fill ():\t\t\t\t\t\t_defaultTurtle.begin_fill ()\ndef end_fill ():\t\t\t\t\t\t_defaultTurtle.end_fill ()\n",
		"# Inspired by \"Georgia's Spirals\"\n\nfrom turtle import *\n\nbgcolor ('black')\n\nfor a_color, a_pensize, start_radius, stop_radius, radius_step in (\n\t('green', 1, 82, 40, -6),\t\t\n\t('red', 1, 84, 40, -6),\t\n\t('white', 2, 98, 50, -5),\n\t('yellow', 2, 70, 50, -5),\n\t('blue', 2, 97, 70, -5),\n\t('orange', 2, 87, 40, -17),\n\t('pink', 3, 102, 60, -17),\t\n):\n\tpensize (a_pensize)\n\tcolor (a_color)\n\tfor angle_index in range (10):\n\t\tfor radius in range (start_radius, stop_radius, radius_step):\n\t\t\tcircle (radius)\n\t\tright (36)\n\t\t\ndone ()\n"
	],
	"mappings": "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"
}