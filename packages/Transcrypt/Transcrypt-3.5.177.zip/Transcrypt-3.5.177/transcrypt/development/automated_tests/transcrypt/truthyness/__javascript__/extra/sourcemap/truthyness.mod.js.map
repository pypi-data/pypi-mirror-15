{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/truthyness/__javascript__/truthyness.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/truthyness/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('tconv')\n\ndef run (autoTester):\n\tautoTester.check (len ({1:2}))\n\n\tautoTester.check ('Select nonemtpy container, if any<br>')\n\n\tautoTester.check ((0) or (1, 2, 3))\n\tautoTester.check (() or (1, 2, 3))\n\tautoTester.check (() or ())\n\t\n\tautoTester.check ((-1) or (0) or (1, 2, 3))\n\tautoTester.check (() or (0) or (1, 2, 3))\n\tautoTester.check (() or () or (1, 2, 3))\n\tautoTester.check (() or () or ())\n\t\n\tautoTester.check ([0] or [1, 2, 3])\n\tautoTester.check ([] or [1, 2, 3])\n\tautoTester.check ([] or [])\n\t\n\tautoTester.check ([-1] or [0] or [1, 2, 3])\n\tautoTester.check ([] or [0] or [1, 2, 3])\n\tautoTester.check ([] or [] or [1, 2, 3])\n\tautoTester.check ([] or [] or [])\n\t\n\tautoTester.check ({0} or {1, 2, 3})\n\tautoTester.check (set () or {1, 2, 3})\n\tautoTester.check (set () or set ())\n\t\n\tautoTester.check ({-1} or {0} or {1, 2, 3})\n\tautoTester.check (set () or {0} or {1, 2, 3})\n\tautoTester.check (set () or set () or {1, 2, 3})\n\tautoTester.check (set () or set () or set ())\n\t\n\tautoTester.check ({0:10} or {1:11, 2:12, 3:13})\n\tautoTester.check ({} or {1, 2, 3})\n\tautoTester.check ({} or {})\n\t\n\tautoTester.check ({-1:-11} or {0:10} or {1:11, 2:12, 3:13})\n\tautoTester.check ({} or {0:10} or {1:11, 2:12, 3:13})\n\tautoTester.check ({} or {} or {1:11, 2:12, 3:13})\n\tautoTester.check ({} or {} or {})\n\t\n\tautoTester.check ('<br><br>')\n\tautoTester.check ('Boolean evaluations')\n\tfor expression in (\n\t\t'<br> -- falsy -- <br>',\n\t\t(),\n\t\t[],\n\t\tset (),\n\t\t{},\n\t\t0,\n\t\t'',\n\t\t3 > 5,\n\t\tFalse,\n\t\t'<br> -- truthy -- <br>',\n\t\t(1, 2, 3),\n\t\t[1, 2, 3],\n\t\t{1, 2, 3},\n\t\t{'a': 1, 'b': 2, 'c': 3},\n\t\t3,\n\t\t'hello',\n\t\t5 > 3,\n\t\tTrue\n\t):\n\t\tif expression in ('<br> -- falsy -- <br>', '<br> -- truthy -- <br>'):\n\t\t\tautoTester.check (expression)\n\t\telse:\n\t\t\tautoTester.check (expression, ' . . . ')\n\t\t\tautoTester.check ('operators')\n\t\t\tautoTester.check (not not expression)\n\t\t\tautoTester.check (not not (True and expression))\n\t\t\tautoTester.check (not not (False or expression))\n\t\t\tautoTester.check (not not (expression and True))\n\t\t\tautoTester.check (not not (expression and False))\n\t\t\t\n\t\t\tautoTester.check ('if')\n\t\t\tif expression:\n\t\t\t\tautoTester.check (True)\n\t\t\telse:\n\t\t\t\tautoTester.check (False)\n\t\t\t\t\n\t\t\tif expression or expression:\n\t\t\t\tautoTester.check (True)\n\t\t\telse:\n\t\t\t\tautoTester.check (False)\n\t\t\t\t\n\t\t\tif False:\n\t\t\t\tautoTester.check ('if')\n\t\t\telif expression:\n\t\t\t\tautoTester.check ('elif')\n\t\t\telse:\n\t\t\t\tautoTester.check ('else')\n\t\t\t\t\n\t\t\tautoTester.check ('while')\n\t\t\twhile expression:\n\t\t\t\tautoTester.check (True)\n\t\t\t\tbreak\n\t\t\t\t\n\t\t\tautoTester.check ('condex')\n\t\t\tautoTester.check (True if expression else False)\n\t\t\t\n\tif (0.0):\n\t\tautoTester.check ('0.0')\n\telif (0.1):\n\t\tautoTester.check ('0.1')\n\telse:\n\t\tautoTester.check ('Shouldn\\'t be here...')\n\t"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAAA;AAcA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}