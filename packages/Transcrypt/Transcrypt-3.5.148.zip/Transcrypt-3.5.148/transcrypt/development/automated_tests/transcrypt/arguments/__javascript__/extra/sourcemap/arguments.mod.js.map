{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/arguments/__javascript__/arguments.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/arguments/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\n__pragma__ ('kwargs')\n\nclass A:\n\tdef __init__ (self, x = 123, y = 456, *args, m, n = 456, **kwargs):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.args = args\n\t\tself.m = m\n\t\tself.n = n\n\t\tself.kwargs = kwargs\n\t\tself.extra = 'hello'\n\n\tdef f (self, autoTester):\n\t\tautoTester.check (self.x, self.y, self.args, self.m, self.n, self.kwargs, self.extra)\n\t\t\nclass B (A):\n\tdef __init__ (self, x, y = -1, *args, m = -2, n, **kwargs):\n\t\tA.__init__ (self, y, x, *args, m = n, n = m, **kwargs)\n\t\t\nclass C:\n\t__pragma__ ('nokwargs')\n\tdef tricky (self, *args):\n\t\treturn args\n\t__pragma__ ('kwargs')\n\t\ndef run (autoTester):\n\tdef f (x, y = -1, *args, m = -2, n, **kwargs):\n\t\tdef f2 (x, y = -3, *args, m = -4, n, **kwargs):\n\t\t\tautoTester.check (x, y, args, m, n, kwargs)\n\t\tf2 (11, 22, 1010, 2020, m = 100100, n = 200200, p = 10001000, q = 20002000)\n\t\tautoTester.check (x, y, args, m, n, kwargs)\n\t\t\n\tf (1, 2, 10, 20, m = 100, n = 200, p = 1000, q = 2000)\n\t\n\tb = B (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000)\n\tb.f (autoTester)\n\t\n\tdef g (*args, **kwargs):\n\t\tautoTester.check (args, kwargs)\n\t\t\n\tg (*(1, 2, 3), **{'p': 'aP', 'q': 'aQ', 'r': 'anR'})\n\t\n\t(lambda x, y = -1, *args, m = -2, n, **kwargs: autoTester.check (x, y, args, m, n, kwargs)) (1, 2, 8, 16, m = 128, n = 256.3, p = 1024.3, q = 2048.3)\n\t\n\tautoTester.check (C () .tricky (* range (4)))\n\tautoTester.check ('{}-{}'.format (1, 3, 5, 7, 9))\n\tautoTester.check ('{}-{}'.format (* range (4)))\n"
	],
	"mappings
}