{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/autotester/__javascript__/org.transcrypt.autotester.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/modules/org/transcrypt/autotester/__init__.py"
	],
	"sourcesContent": [
		"# First run a test from the command prompt, generating an HTML file.\n# The output of the test is stored in a DIV.\n# Also the script is automatically included in the HTML file.\n# Loading the HTML file will run the script.\n# This will compare the output of the script running in the browswer to the output in the DIV.\n# If those two match, the test reports OK, else it reports failure.\n\nfrom org.transcrypt.stubs.browser import *\nfrom org.transcrypt.stubs.browser import __main__, __envir__, __pragma__\n# Don't import __envir__ from __base__ since it will overwrite __buildin__.__envir__ in the browser\n# Import from stubs will be skipped in the browser\n# ... The ice is a bit thin here\n\n__pragma__ ('nokwargs')\n\nimport itertools\n\nokColor = 'green'\nerrorColor = 'red'\nhighlightColor = 'yellow'\ntestletNameColor = 'blue'\n\nclass AutoTester:\n\tdef __init__ (self):\n\t\tself.referenceBuffer = []\n\t\tself.testBuffer = []\n\t\tself.messageDivId = 'message'\n\t\tself.referenceDivId = 'python'\n\t\tself.testDivId = 'transcrypt'\n\t\t\n\tdef sortedRepr (self, any):\t# When using sets or dicts, use elemens or keys of one type, in sort order\n\t\tdef tryGetNumKey (key):\n\t\t\tif type (key) == str:\t# Try to interpret key as numerical, see comment with repr function in __builtins__\n\t\t\t\ttry:\n\t\t\t\t\treturn int (key)\n\t\t\t\texcept:\n\t\t\t\t\ttry:\n\t\t\t\t\t\treturn float (key)\n\t\t\t\t\texcept:\n\t\t\t\t\t\treturn key\n\t\t\telse:\n\t\t\t\treturn key\n\t\t\t\t\n\t\tif type (any) == dict:\n\t\t\treturn '{' + ', '.join ([\n\t\t\t\t'{}: {}'.format (repr (key), repr (any [key]))\n\t\t\t\tfor index, key in enumerate (sorted ([tryGetNumKey (key) for key in any.keys ()], key = lambda aKey: str (aKey)))\n\t\t\t]) + '}'\n\t\telif type (any) == set:\n\t\t\tif len (any):\n\t\t\t\treturn '{' + ', '.join (sorted ([str (item) for item in list (any)])) + '}'\n\t\t\telse:\n\t\t\t\treturn repr (any)\n\t\telif type (any) == range:\n\t\t\treturn repr (list (any))\n\t\telse:\n\t\t\treturn repr (any)\n\t\t\t\n\tdef check (self, *args):\n\t\titem = ' '.join ([self.sortedRepr (arg) for arg in args])\t# N.B. stubs.browser provides a special sorting repr\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.testBuffer.append (item)\n\t\telse:\n\t\t\tself.referenceBuffer.append (item)\n\t\t\n\tdef dump (self, filePrename):\n\t\tfor minified in (False, True):\n\t\t\tminiInfix = '.min' if minified else ''\n\t\t\twith open ('{}{}.html'.format (filePrename, miniInfix), 'w') as aFile:\t\t\t\t\n\t\t\t\taFile.write ('<b>Status:</b>\\n')\n\t\t\t\taFile.write ('<div id=\"{}\"></div><br><br>\\n\\n'.format (self.messageDivId))\n\t\t\t\t\n\t\t\t\taFile.write ('<b>CPython output:</b>\\n')\n\t\t\t\taFile.write ('<div id=\"{}\">{}</div><br><br>\\n\\n'.format (self.referenceDivId, ' | '.join (self.referenceBuffer)))\n\t\t\t\t\n\t\t\t\taFile.write ('<b>Transcrypt output:</b>\\n')\n\t\t\t\taFile.write ('<div id=\"{}\"></div>\\n\\n'.format (self.testDivId))\n\n\t\t\t\taFile.write ('<script src=\"{}/{}{}.js\"></script>\\n\\n'.format (__envir__.target_subdir, filePrename, miniInfix))\n\t\t\t\t\n\tdef compare (self):\n\t\tself.referenceBuffer = document.getElementById (self.referenceDivId) .innerHTML.split (' | ')\n\t\tfor index, (testItem, referenceItem) in enumerate (zip (self.testBuffer, self.referenceBuffer)):\n\t\t\tif testItem != referenceItem:\n\t\t\t\tdocument.getElementById (self.messageDivId) .innerHTML = '<div style=\"color: {}\"><b>Test failed</b></div>'.format (errorColor)\n\t\t\t\tfor buffer, divId, accentColor in ((self.referenceBuffer, self.referenceDivId, okColor), (self.testBuffer, self.testDivId, errorColor)):\n\t\t\t\t\tbuffer = itertools.chain (buffer [ : index], [\n\t\t\t\t\t\t'!!! <div style=\"display: inline; color: {}; background-color: {}\"><b><i>{}</i></b></div>'.format (accentColor, highlightColor, buffer [index])\n\t\t\t\t\t], buffer [index + 1 : ])\n\t\t\t\t\tdocument.getElementById (divId) .innerHTML = ' | '.join (buffer)\n\t\t\t\tbreak\n\t\telse:\t\t\n\t\t\tdocument.getElementById (self.messageDivId) .innerHTML = '<div style=\"color: {}\">Test succeeded</div>'.format (okColor)\n\t\t\tdocument.getElementById (self.testDivId) .innerHTML = ' | '.join (self.testBuffer)\n\t\t\t\n\tdef run (self, testlet, testletName):\n\t\tself.check ('<div style=\"display: inline; color: {}\"> --- Testlet: {} --- </div><br>'.format (testletNameColor, testletName))\n\t\ttestlet.run (self)\n\t\tself.check ('<br><br>')\n\t\t\t\n\tdef done (self):\n\t\tif __envir__.executor_name == __envir__.transpiler_name:\n\t\t\tself.compare ()\n\t\telse:\n\t\t\tself.dump (__main__.__file__ [ : -3] .replace ('\\\\', '/') .rsplit ('/', 1) [-1])\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwGA;AAz
}