{
	"version": 3,
	"file": "D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/operator_overloading/__javascript__/operator_overloading.mod.js",
	"sources": [
		"D:/activ_tosh/geatec/transcrypt/transcrypt/development/automated_tests/transcrypt/operator_overloading/__init__.py"
	],
	"sourcesContent": [
		"from org.transcrypt.stubs.browser import __pragma__\n\nclass Matrix:\n\tdef __init__ (self, nRows, nCols, elements = []):\n\t\tself.nRows = nRows\n\t\tself.nCols = nCols\n\t\t\n\t\tif len (elements):\n\t\t\tself._ = elements\n\t\telse:\n\t\t\tself._ = [[0 for col in range (nCols)] for row in range (nRows)]\n\t\t\n\tdef __mul__ (self, other):\n\t\tif type (other) == Matrix:\n\t\t\tresult = Matrix (self.nRows, other.nCols)\n\t\t\tfor iTargetRow in range (result.nRows):\n\t\t\t\tfor iTargetCol in range (result.nCols):\n\t\t\t\t\tfor iTerm in range (self.nCols):\n\t\t\t\t\t\tresult._ [iTargetRow][iTargetCol] += self._ [iTargetRow][iTerm] * other._ [iTerm][iTargetCol]\n\t\t\treturn result\n\t\telse:\t# other is a scalar\n\t\t\treturn self.__rmul__ (other)\n\t\t\t\t\n\tdef __rmul__ (self, scalar):\t# Only called if left operand is scalar, all other cases will call __mul__\n\t\tresult = Matrix (self.nRows, self.nCols)\n\t\tfor iRow in range (self.nRows):\n\t\t\tfor iCol in range (self.nCols):\t\n\t\t\t\tresult._ [iRow][iCol] = scalar * self._ [iRow][iCol]\n\t\treturn result\n\t\n\tdef __add__ (self, other):\n\t\tresult = Matrix (self.nRows, self.nCols)\n\t\tfor iRow in range (self.nRows):\n\t\t\tfor iCol in range (self.nCols):\n\t\t\t\tresult._ [iRow][iCol] = self._ [iRow][iCol] + other._ [iRow][iCol]\n\t\treturn result\n\t\t\n\tdef __getitem__ (self, index):\n\t\treturn self._ [index]\n\n\tdef __setitem__ (self, index, value):\n\t\tself._ [index] = value\n\t\t\n\tdef __repr__ (self):\n\t\treturn repr (self._)\n\t\t\nclass Functor:\n\tdef __init__ (self, factor):\n\t\tself.factor = factor\n\t\t\n\t__pragma__ ('kwargs')\n\tdef __call__ (self, x, y = -1, *args, m = -2, n, **kwargs):\n\t\treturn (\n\t\t\tself.factor * x,\n\t\t\tself.factor * y,\n\t\t\t[self.factor * arg for arg in args],\n\t\t\tself.factor * m,\n\t\t\tself.factor * n,\n\t\t\t# !!! [self.factor * kwargs [key] for key in sorted (kwargs.keys ())] Add supoprt for keys () on kwargs\n\t\t)\n\t__pragma__ ('nokwargs')\n\t\nf = Functor (10)\n\n__pragma__ ('kwargs')\ndef g (x, y = -1, *args, m = -2, n, **kwargs):\n\treturn (x, y, args, m, n) # !!! , [kwargs [key] for key in sorted (kwargs.keys ())]) Add support for keys () on kwargs\n__pragma__ ('nokwargs')\n\t\t\ndef run (autoTester):\n\tm0 = Matrix (3, 3, [\n\t\t[1, 2, 3],\n\t\t[4, 5, 6],\n\t\t[7, 8, 10]\n\t])\n\t\n\tm1 = Matrix (3, 3, [\n\t\t[10, 20, 30],\n\t\t[40, 50, 60],\n\t\t[70, 80, 90]\n\t])\n\t\n\tx = 3\n\ty = x * 4 * x\n\tfast = 2 * 3\n\t\n\t__pragma__ ('opov')\n\t\n\tm1 [1][2] = m0 [1][2]\n\tslow = 2 + 3\n\tm2 = m0 * m1  + m1 * (m0 + m1)\n\tm3 = 2 * (2 * m0 * 3 * m1 + m2 * 4) * 2\n\tautoTester.check (m0 [1][1], m0 [1][2], m1 [1][1], m1 [1][2])\n\t\n\t__pragma__ ('noopov')\n\t\n\tfast2 = 16 * y + 1\n\t\n\tautoTester.check (m0, m1)\n\tautoTester.check (x, y)\n\tautoTester.check (m2)\n\tautoTester.check (m3)\n\tautoTester.check (fast, slow, fast2)\n\t\n\tx = 'marker'\n\t\n\t__pragma__ ('opov')\n\tautoTester.check (f (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000))\n\tautoTester.check (g (3, 4, 30, 40, m = 300, n = 400, p = 3000, q = 4000))\n\t__pragma__ ('noopov')\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAMA;AAMA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}