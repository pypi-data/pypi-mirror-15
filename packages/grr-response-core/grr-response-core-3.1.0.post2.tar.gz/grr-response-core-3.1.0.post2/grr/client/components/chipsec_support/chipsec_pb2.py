# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: grr/client/components/chipsec_support/chipsec.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import grr.proto.semantic_pb2
import grr.proto.jobs_pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='grr/client/components/chipsec_support/chipsec.proto',
  package='',
  serialized_pb=_b('\n3grr/client/components/chipsec_support/chipsec.proto\x1a\x18grr/proto/semantic.proto\x1a\x14grr/proto/jobs.proto\"\xfb\x03\n\x15\x44umpFlashImageRequest\x12\x7f\n\tlog_level\x18\x01 \x01(\rBl\xe2\xfc\xe3\xc4\x01\x66\x12\x64Set the log level. If set, the log returned will include additional information reported by Chipsec.\x12\x86\x01\n\nchunk_size\x18\x02 \x01(\r:\x05\x36\x35\x35\x33\x36\x42k\xe2\xfc\xe3\xc4\x01\x65\x12\x61\x41 heartbeat will be emitted every chunk_size.This could be reduced in case the process times out.\x18\x01\x12\xd7\x01\n\rnotify_syslog\x18\x03 \x01(\x08\x42\xbf\x01\xe2\xfc\xe3\xc4\x01\xb8\x01\x12\xb5\x01If true, a message will be written by the client to the syslog before running the action. This can be used for debugging in case the client crashes during the image dumping process.\"\x8d\x01\n\x16\x44umpFlashImageResponse\x12\x43\n\x04path\x18\x01 \x01(\x0b\x32\t.PathSpecB*\xe2\xfc\xe3\xc4\x01$\x12\"Temporary path to the flash image.\x12.\n\x04logs\x18\x02 \x03(\tB \xe2\xfc\xe3\xc4\x01\x1a\x12\x18\x45xtra debug information.')
  ,
  dependencies=[grr.proto.semantic_pb2.DESCRIPTOR,grr.proto.jobs_pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_DUMPFLASHIMAGEREQUEST = _descriptor.Descriptor(
  name='DumpFlashImageRequest',
  full_name='DumpFlashImageRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='log_level', full_name='DumpFlashImageRequest.log_level', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001f\022dSet the log level. If set, the log returned will include additional information reported by Chipsec.'))),
    _descriptor.FieldDescriptor(
      name='chunk_size', full_name='DumpFlashImageRequest.chunk_size', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=True, default_value=65536,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001e\022aA heartbeat will be emitted every chunk_size.This could be reduced in case the process times out.\030\001'))),
    _descriptor.FieldDescriptor(
      name='notify_syslog', full_name='DumpFlashImageRequest.notify_syslog', index=2,
      number=3, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001\270\001\022\265\001If true, a message will be written by the client to the syslog before running the action. This can be used for debugging in case the client crashes during the image dumping process.'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=104,
  serialized_end=611,
)


_DUMPFLASHIMAGERESPONSE = _descriptor.Descriptor(
  name='DumpFlashImageResponse',
  full_name='DumpFlashImageResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='DumpFlashImageResponse.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001$\022\"Temporary path to the flash image.'))),
    _descriptor.FieldDescriptor(
      name='logs', full_name='DumpFlashImageResponse.logs', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001\032\022\030Extra debug information.'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=614,
  serialized_end=755,
)

_DUMPFLASHIMAGERESPONSE.fields_by_name['path'].message_type = grr.proto.jobs_pb2._PATHSPEC
DESCRIPTOR.message_types_by_name['DumpFlashImageRequest'] = _DUMPFLASHIMAGEREQUEST
DESCRIPTOR.message_types_by_name['DumpFlashImageResponse'] = _DUMPFLASHIMAGERESPONSE

DumpFlashImageRequest = _reflection.GeneratedProtocolMessageType('DumpFlashImageRequest', (_message.Message,), dict(
  DESCRIPTOR = _DUMPFLASHIMAGEREQUEST,
  __module__ = 'grr.client.components.chipsec_support.chipsec_pb2'
  # @@protoc_insertion_point(class_scope:DumpFlashImageRequest)
  ))
_sym_db.RegisterMessage(DumpFlashImageRequest)

DumpFlashImageResponse = _reflection.GeneratedProtocolMessageType('DumpFlashImageResponse', (_message.Message,), dict(
  DESCRIPTOR = _DUMPFLASHIMAGERESPONSE,
  __module__ = 'grr.client.components.chipsec_support.chipsec_pb2'
  # @@protoc_insertion_point(class_scope:DumpFlashImageResponse)
  ))
_sym_db.RegisterMessage(DumpFlashImageResponse)


_DUMPFLASHIMAGEREQUEST.fields_by_name['log_level'].has_options = True
_DUMPFLASHIMAGEREQUEST.fields_by_name['log_level']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001f\022dSet the log level. If set, the log returned will include additional information reported by Chipsec.'))
_DUMPFLASHIMAGEREQUEST.fields_by_name['chunk_size'].has_options = True
_DUMPFLASHIMAGEREQUEST.fields_by_name['chunk_size']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001e\022aA heartbeat will be emitted every chunk_size.This could be reduced in case the process times out.\030\001'))
_DUMPFLASHIMAGEREQUEST.fields_by_name['notify_syslog'].has_options = True
_DUMPFLASHIMAGEREQUEST.fields_by_name['notify_syslog']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001\270\001\022\265\001If true, a message will be written by the client to the syslog before running the action. This can be used for debugging in case the client crashes during the image dumping process.'))
_DUMPFLASHIMAGERESPONSE.fields_by_name['path'].has_options = True
_DUMPFLASHIMAGERESPONSE.fields_by_name['path']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001$\022\"Temporary path to the flash image.'))
_DUMPFLASHIMAGERESPONSE.fields_by_name['logs'].has_options = True
_DUMPFLASHIMAGERESPONSE.fields_by_name['logs']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\342\374\343\304\001\032\022\030Extra debug information.'))
# @@protoc_insertion_point(module_scope)
