#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Mar 30 10:14:46 2016 by generateDS.py version 2.20b.
#
# Command line options:
#   ('-o', '../../Work/libSpineML/component.py')
#
# Command line arguments:
#   ../SpineML/Schema/SpineMLComponentLayer.xsd
#
# Command line:
#   generateDS.py -o "../../Work/libSpineML/component.py" ../SpineML/Schema/SpineMLComponentLayer.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.20b0
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class PortType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, extensiontype_=None):
        self.original_tagname_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PortType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PortType.subclass:
            return PortType.subclass(*args_, **kwargs_)
        else:
            return PortType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='PortType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PortType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='PortType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='PortType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='NML:', name_='PortType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PortType


class SpineMLType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ComponentClass=None):
        self.original_tagname_ = None
        self.ComponentClass = ComponentClass
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpineMLType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpineMLType.subclass:
            return SpineMLType.subclass(*args_, **kwargs_)
        else:
            return SpineMLType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ComponentClass(self): return self.ComponentClass
    def set_ComponentClass(self, ComponentClass): self.ComponentClass = ComponentClass
    def hasContent_(self):
        if (
            self.ComponentClass is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='SpineMLType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpineMLType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='SpineMLType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='SpineMLType'):
        pass
    def exportChildren(self, outfile, level, namespace_='NML:', name_='SpineMLType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ComponentClass is not None:
            self.ComponentClass.export(outfile, level, namespace_, name_='ComponentClass', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ComponentClass':
            obj_ = ComponentClassType.factory()
            obj_.build(child_)
            self.ComponentClass = obj_
            obj_.original_tagname_ = 'ComponentClass'
# end class SpineMLType


class ParameterType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, dimension=None, extensiontype_=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.dimension = _cast(None, dimension)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ParameterType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ParameterType.subclass:
            return ParameterType.subclass(*args_, **kwargs_)
        else:
            return ParameterType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_dimension(self): return self.dimension
    def set_dimension(self, dimension): self.dimension = dimension
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ParameterType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParameterType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ParameterType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ParameterType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.dimension is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            outfile.write(' dimension=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dimension), input_name='dimension')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ParameterType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('dimension', node)
        if value is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            self.dimension = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ParameterType


class StateVariableType(ParameterType):
    subclass = None
    superclass = ParameterType
    def __init__(self, name=None, dimension=None):
        self.original_tagname_ = None
        super(StateVariableType, self).__init__(name, dimension, )
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StateVariableType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StateVariableType.subclass:
            return StateVariableType.subclass(*args_, **kwargs_)
        else:
            return StateVariableType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(StateVariableType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='StateVariableType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StateVariableType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='StateVariableType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='StateVariableType'):
        super(StateVariableType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='StateVariableType')
    def exportChildren(self, outfile, level, namespace_='NML:', name_='StateVariableType', fromsubclass_=False, pretty_print=True):
        super(StateVariableType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(StateVariableType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(StateVariableType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class StateVariableType


class AliasType(ParameterType):
    subclass = None
    superclass = ParameterType
    def __init__(self, name=None, dimension=None, MathInline=None):
        self.original_tagname_ = None
        super(AliasType, self).__init__(name, dimension, )
        self.MathInline = MathInline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AliasType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AliasType.subclass:
            return AliasType.subclass(*args_, **kwargs_)
        else:
            return AliasType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MathInline(self): return self.MathInline
    def set_MathInline(self, MathInline): self.MathInline = MathInline
    def hasContent_(self):
        if (
            self.MathInline is not None or
            super(AliasType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='AliasType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AliasType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='AliasType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='AliasType'):
        super(AliasType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AliasType')
    def exportChildren(self, outfile, level, namespace_='NML:', name_='AliasType', fromsubclass_=False, pretty_print=True):
        super(AliasType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MathInline is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMathInline>%s</%sMathInline>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MathInline), input_name='MathInline')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(AliasType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MathInline':
            MathInline_ = child_.text
            MathInline_ = self.gds_validate_string(MathInline_, node, 'MathInline')
            self.MathInline = MathInline_
        super(AliasType, self).buildChildren(child_, node, nodeName_, True)
# end class AliasType


class AnalogSendPortType(PortType):
    subclass = None
    superclass = PortType
    def __init__(self, name=None):
        self.original_tagname_ = None
        super(AnalogSendPortType, self).__init__()
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AnalogSendPortType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AnalogSendPortType.subclass:
            return AnalogSendPortType.subclass(*args_, **kwargs_)
        else:
            return AnalogSendPortType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            super(AnalogSendPortType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='AnalogSendPortType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AnalogSendPortType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='AnalogSendPortType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='AnalogSendPortType'):
        super(AnalogSendPortType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AnalogSendPortType')
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='AnalogSendPortType', fromsubclass_=False, pretty_print=True):
        super(AnalogSendPortType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        super(AnalogSendPortType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(AnalogSendPortType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class AnalogSendPortType


class AnalogReceivePortType(PortType):
    subclass = None
    superclass = PortType
    def __init__(self, name=None, dimension=None):
        self.original_tagname_ = None
        super(AnalogReceivePortType, self).__init__()
        self.name = _cast(None, name)
        self.dimension = _cast(None, dimension)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AnalogReceivePortType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AnalogReceivePortType.subclass:
            return AnalogReceivePortType.subclass(*args_, **kwargs_)
        else:
            return AnalogReceivePortType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_dimension(self): return self.dimension
    def set_dimension(self, dimension): self.dimension = dimension
    def hasContent_(self):
        if (
            super(AnalogReceivePortType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='AnalogReceivePortType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AnalogReceivePortType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='AnalogReceivePortType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='AnalogReceivePortType'):
        super(AnalogReceivePortType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AnalogReceivePortType')
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.dimension is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            outfile.write(' dimension=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dimension), input_name='dimension')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='AnalogReceivePortType', fromsubclass_=False, pretty_print=True):
        super(AnalogReceivePortType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('dimension', node)
        if value is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            self.dimension = value
        super(AnalogReceivePortType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(AnalogReceivePortType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class AnalogReceivePortType


class AnalogReducePortType(PortType):
    subclass = None
    superclass = PortType
    def __init__(self, name=None, reduce_op=None, dimension=None):
        self.original_tagname_ = None
        super(AnalogReducePortType, self).__init__()
        self.name = _cast(None, name)
        self.reduce_op = _cast(None, reduce_op)
        self.dimension = _cast(None, dimension)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AnalogReducePortType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AnalogReducePortType.subclass:
            return AnalogReducePortType.subclass(*args_, **kwargs_)
        else:
            return AnalogReducePortType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_reduce_op(self): return self.reduce_op
    def set_reduce_op(self, reduce_op): self.reduce_op = reduce_op
    def get_dimension(self): return self.dimension
    def set_dimension(self, dimension): self.dimension = dimension
    def validate_analog_port_reduction_type(self, value):
        # Validate type analog_port_reduction_type, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['+']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on analog_port_reduction_type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            super(AnalogReducePortType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='AnalogReducePortType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AnalogReducePortType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='AnalogReducePortType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='AnalogReducePortType'):
        super(AnalogReducePortType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AnalogReducePortType')
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.reduce_op is not None and 'reduce_op' not in already_processed:
            already_processed.add('reduce_op')
            outfile.write(' reduce_op=%s' % (quote_attrib(self.reduce_op), ))
        if self.dimension is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            outfile.write(' dimension=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dimension), input_name='dimension')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='AnalogReducePortType', fromsubclass_=False, pretty_print=True):
        super(AnalogReducePortType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('reduce_op', node)
        if value is not None and 'reduce_op' not in already_processed:
            already_processed.add('reduce_op')
            self.reduce_op = value
            self.validate_analog_port_reduction_type(self.reduce_op)    # validate type analog_port_reduction_type
        value = find_attr_value_('dimension', node)
        if value is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            self.dimension = value
        super(AnalogReducePortType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(AnalogReducePortType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class AnalogReducePortType


class EventSendPortType(PortType):
    subclass = None
    superclass = PortType
    def __init__(self, name=None):
        self.original_tagname_ = None
        super(EventSendPortType, self).__init__()
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EventSendPortType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EventSendPortType.subclass:
            return EventSendPortType.subclass(*args_, **kwargs_)
        else:
            return EventSendPortType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            super(EventSendPortType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='EventSendPortType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EventSendPortType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='EventSendPortType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='EventSendPortType'):
        super(EventSendPortType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='EventSendPortType')
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='EventSendPortType', fromsubclass_=False, pretty_print=True):
        super(EventSendPortType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        super(EventSendPortType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(EventSendPortType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class EventSendPortType


class EventReceivePortType(PortType):
    subclass = None
    superclass = PortType
    def __init__(self, name=None):
        self.original_tagname_ = None
        super(EventReceivePortType, self).__init__()
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EventReceivePortType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EventReceivePortType.subclass:
            return EventReceivePortType.subclass(*args_, **kwargs_)
        else:
            return EventReceivePortType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            super(EventReceivePortType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='EventReceivePortType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EventReceivePortType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='EventReceivePortType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='EventReceivePortType'):
        super(EventReceivePortType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='EventReceivePortType')
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='EventReceivePortType', fromsubclass_=False, pretty_print=True):
        super(EventReceivePortType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        super(EventReceivePortType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(EventReceivePortType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class EventReceivePortType


class ImpulseSendPortType(PortType):
    subclass = None
    superclass = PortType
    def __init__(self, name=None):
        self.original_tagname_ = None
        super(ImpulseSendPortType, self).__init__()
        self.name = _cast(None, name)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImpulseSendPortType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImpulseSendPortType.subclass:
            return ImpulseSendPortType.subclass(*args_, **kwargs_)
        else:
            return ImpulseSendPortType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            super(ImpulseSendPortType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ImpulseSendPortType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImpulseSendPortType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ImpulseSendPortType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ImpulseSendPortType'):
        super(ImpulseSendPortType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ImpulseSendPortType')
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ImpulseSendPortType', fromsubclass_=False, pretty_print=True):
        super(ImpulseSendPortType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        super(ImpulseSendPortType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(ImpulseSendPortType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class ImpulseSendPortType


class ImpulseReceivePortType(PortType):
    subclass = None
    superclass = PortType
    def __init__(self, name=None, dimension=None):
        self.original_tagname_ = None
        super(ImpulseReceivePortType, self).__init__()
        self.name = _cast(None, name)
        self.dimension = _cast(None, dimension)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImpulseReceivePortType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImpulseReceivePortType.subclass:
            return ImpulseReceivePortType.subclass(*args_, **kwargs_)
        else:
            return ImpulseReceivePortType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_dimension(self): return self.dimension
    def set_dimension(self, dimension): self.dimension = dimension
    def hasContent_(self):
        if (
            super(ImpulseReceivePortType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ImpulseReceivePortType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImpulseReceivePortType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ImpulseReceivePortType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ImpulseReceivePortType'):
        super(ImpulseReceivePortType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ImpulseReceivePortType')
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.dimension is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            outfile.write(' dimension=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dimension), input_name='dimension')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ImpulseReceivePortType', fromsubclass_=False, pretty_print=True):
        super(ImpulseReceivePortType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('dimension', node)
        if value is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            self.dimension = value
        super(ImpulseReceivePortType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(ImpulseReceivePortType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class ImpulseReceivePortType


class ComponentClassType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, type_=None, Dynamics=None, Port=None, Parameter=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.type_ = _cast(None, type_)
        self.Dynamics = Dynamics
        if Port is None:
            self.Port = []
        else:
            self.Port = Port
        if Parameter is None:
            self.Parameter = []
        else:
            self.Parameter = Parameter
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ComponentClassType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ComponentClassType.subclass:
            return ComponentClassType.subclass(*args_, **kwargs_)
        else:
            return ComponentClassType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Dynamics(self): return self.Dynamics
    def set_Dynamics(self, Dynamics): self.Dynamics = Dynamics
    def get_Port(self): return self.Port
    def set_Port(self, Port): self.Port = Port
    def add_Port(self, value): self.Port.append(value)
    def insert_Port_at(self, index, value): self.Port.insert(index, value)
    def replace_Port_at(self, index, value): self.Port[index] = value
    def get_Parameter(self): return self.Parameter
    def set_Parameter(self, Parameter): self.Parameter = Parameter
    def add_Parameter(self, value): self.Parameter.append(value)
    def insert_Parameter_at(self, index, value): self.Parameter.insert(index, value)
    def replace_Parameter_at(self, index, value): self.Parameter[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def validate_component_class_type(self, value):
        # Validate type component_class_type, a restriction on xs:normalizedString.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['neuron_body', 'weight_update', 'postsynapse', 'generic_component']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on component_class_type' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Dynamics is not None or
            self.Port or
            self.Parameter
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ComponentClassType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ComponentClassType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ComponentClassType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ComponentClassType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ComponentClassType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Dynamics is not None:
            self.Dynamics.export(outfile, level, namespace_, name_='Dynamics', pretty_print=pretty_print)
        for Port_ in self.Port:
            Port_.export(outfile, level, namespace_, name_='Port', pretty_print=pretty_print)
        for Parameter_ in self.Parameter:
            Parameter_.export(outfile, level, namespace_, name_='Parameter', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_component_class_type(self.type_)    # validate type component_class_type
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Dynamics':
            obj_ = DynamicsType.factory()
            obj_.build(child_)
            self.Dynamics = obj_
            obj_.original_tagname_ = 'Dynamics'
        elif nodeName_ == 'Port':
            class_obj_ = self.get_class_obj_(child_, PortType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Port.append(obj_)
            obj_.original_tagname_ = 'Port'
        elif nodeName_ == 'AnalogSendPort':
            obj_ = AnalogSendPortType.factory()
            obj_.build(child_)
            self.Port.append(obj_)
            obj_.original_tagname_ = 'AnalogSendPort'
        elif nodeName_ == 'AnalogReceivePort':
            obj_ = AnalogReceivePortType.factory()
            obj_.build(child_)
            self.Port.append(obj_)
            obj_.original_tagname_ = 'AnalogReceivePort'
        elif nodeName_ == 'AnalogReducePort':
            obj_ = AnalogReducePortType.factory()
            obj_.build(child_)
            self.Port.append(obj_)
            obj_.original_tagname_ = 'AnalogReducePort'
        elif nodeName_ == 'EventSendPort':
            obj_ = EventSendPortType.factory()
            obj_.build(child_)
            self.Port.append(obj_)
            obj_.original_tagname_ = 'EventSendPort'
        elif nodeName_ == 'EventReceivePort':
            obj_ = EventReceivePortType.factory()
            obj_.build(child_)
            self.Port.append(obj_)
            obj_.original_tagname_ = 'EventReceivePort'
        elif nodeName_ == 'ImpulseSendPort':
            obj_ = ImpulseSendPortType.factory()
            obj_.build(child_)
            self.Port.append(obj_)
            obj_.original_tagname_ = 'ImpulseSendPort'
        elif nodeName_ == 'ImpulseReceivePort':
            obj_ = ImpulseReceivePortType.factory()
            obj_.build(child_)
            self.Port.append(obj_)
            obj_.original_tagname_ = 'ImpulseReceivePort'
        elif nodeName_ == 'Parameter':
            class_obj_ = self.get_class_obj_(child_, ParameterType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.Parameter.append(obj_)
            obj_.original_tagname_ = 'Parameter'
# end class ComponentClassType


class DynamicsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, initial_regime=None, Regime=None, StateVariable=None, Alias=None):
        self.original_tagname_ = None
        self.initial_regime = _cast(None, initial_regime)
        if Regime is None:
            self.Regime = []
        else:
            self.Regime = Regime
        if StateVariable is None:
            self.StateVariable = []
        else:
            self.StateVariable = StateVariable
        if Alias is None:
            self.Alias = []
        else:
            self.Alias = Alias
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DynamicsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DynamicsType.subclass:
            return DynamicsType.subclass(*args_, **kwargs_)
        else:
            return DynamicsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Regime(self): return self.Regime
    def set_Regime(self, Regime): self.Regime = Regime
    def add_Regime(self, value): self.Regime.append(value)
    def insert_Regime_at(self, index, value): self.Regime.insert(index, value)
    def replace_Regime_at(self, index, value): self.Regime[index] = value
    def get_StateVariable(self): return self.StateVariable
    def set_StateVariable(self, StateVariable): self.StateVariable = StateVariable
    def add_StateVariable(self, value): self.StateVariable.append(value)
    def insert_StateVariable_at(self, index, value): self.StateVariable.insert(index, value)
    def replace_StateVariable_at(self, index, value): self.StateVariable[index] = value
    def get_Alias(self): return self.Alias
    def set_Alias(self, Alias): self.Alias = Alias
    def add_Alias(self, value): self.Alias.append(value)
    def insert_Alias_at(self, index, value): self.Alias.insert(index, value)
    def replace_Alias_at(self, index, value): self.Alias[index] = value
    def get_initial_regime(self): return self.initial_regime
    def set_initial_regime(self, initial_regime): self.initial_regime = initial_regime
    def hasContent_(self):
        if (
            self.Regime or
            self.StateVariable or
            self.Alias
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='DynamicsType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DynamicsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='DynamicsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='DynamicsType'):
        if self.initial_regime is not None and 'initial_regime' not in already_processed:
            already_processed.add('initial_regime')
            outfile.write(' initial_regime=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.initial_regime), input_name='initial_regime')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='DynamicsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Regime_ in self.Regime:
            Regime_.export(outfile, level, namespace_, name_='Regime', pretty_print=pretty_print)
        for StateVariable_ in self.StateVariable:
            StateVariable_.export(outfile, level, namespace_, name_='StateVariable', pretty_print=pretty_print)
        for Alias_ in self.Alias:
            Alias_.export(outfile, level, namespace_, name_='Alias', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('initial_regime', node)
        if value is not None and 'initial_regime' not in already_processed:
            already_processed.add('initial_regime')
            self.initial_regime = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Regime':
            obj_ = RegimeType.factory()
            obj_.build(child_)
            self.Regime.append(obj_)
            obj_.original_tagname_ = 'Regime'
        elif nodeName_ == 'StateVariable':
            obj_ = StateVariableType.factory()
            obj_.build(child_)
            self.StateVariable.append(obj_)
            obj_.original_tagname_ = 'StateVariable'
        elif nodeName_ == 'Alias':
            obj_ = AliasType.factory()
            obj_.build(child_)
            self.Alias.append(obj_)
            obj_.original_tagname_ = 'Alias'
# end class DynamicsType


class RegimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, TimeDerivative=None, OnCondition=None, OnEvent=None, OnImpulse=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        if TimeDerivative is None:
            self.TimeDerivative = []
        else:
            self.TimeDerivative = TimeDerivative
        if OnCondition is None:
            self.OnCondition = []
        else:
            self.OnCondition = OnCondition
        if OnEvent is None:
            self.OnEvent = []
        else:
            self.OnEvent = OnEvent
        if OnImpulse is None:
            self.OnImpulse = []
        else:
            self.OnImpulse = OnImpulse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RegimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RegimeType.subclass:
            return RegimeType.subclass(*args_, **kwargs_)
        else:
            return RegimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TimeDerivative(self): return self.TimeDerivative
    def set_TimeDerivative(self, TimeDerivative): self.TimeDerivative = TimeDerivative
    def add_TimeDerivative(self, value): self.TimeDerivative.append(value)
    def insert_TimeDerivative_at(self, index, value): self.TimeDerivative.insert(index, value)
    def replace_TimeDerivative_at(self, index, value): self.TimeDerivative[index] = value
    def get_OnCondition(self): return self.OnCondition
    def set_OnCondition(self, OnCondition): self.OnCondition = OnCondition
    def add_OnCondition(self, value): self.OnCondition.append(value)
    def insert_OnCondition_at(self, index, value): self.OnCondition.insert(index, value)
    def replace_OnCondition_at(self, index, value): self.OnCondition[index] = value
    def get_OnEvent(self): return self.OnEvent
    def set_OnEvent(self, OnEvent): self.OnEvent = OnEvent
    def add_OnEvent(self, value): self.OnEvent.append(value)
    def insert_OnEvent_at(self, index, value): self.OnEvent.insert(index, value)
    def replace_OnEvent_at(self, index, value): self.OnEvent[index] = value
    def get_OnImpulse(self): return self.OnImpulse
    def set_OnImpulse(self, OnImpulse): self.OnImpulse = OnImpulse
    def add_OnImpulse(self, value): self.OnImpulse.append(value)
    def insert_OnImpulse_at(self, index, value): self.OnImpulse.insert(index, value)
    def replace_OnImpulse_at(self, index, value): self.OnImpulse[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            self.TimeDerivative or
            self.OnCondition or
            self.OnEvent or
            self.OnImpulse
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='RegimeType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RegimeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='RegimeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='RegimeType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='RegimeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TimeDerivative_ in self.TimeDerivative:
            TimeDerivative_.export(outfile, level, namespace_, name_='TimeDerivative', pretty_print=pretty_print)
        for OnCondition_ in self.OnCondition:
            OnCondition_.export(outfile, level, namespace_, name_='OnCondition', pretty_print=pretty_print)
        for OnEvent_ in self.OnEvent:
            OnEvent_.export(outfile, level, namespace_, name_='OnEvent', pretty_print=pretty_print)
        for OnImpulse_ in self.OnImpulse:
            OnImpulse_.export(outfile, level, namespace_, name_='OnImpulse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TimeDerivative':
            obj_ = TimeDerivativeType.factory()
            obj_.build(child_)
            self.TimeDerivative.append(obj_)
            obj_.original_tagname_ = 'TimeDerivative'
        elif nodeName_ == 'OnCondition':
            obj_ = OnConditionType.factory()
            obj_.build(child_)
            self.OnCondition.append(obj_)
            obj_.original_tagname_ = 'OnCondition'
        elif nodeName_ == 'OnEvent':
            obj_ = OnEventType.factory()
            obj_.build(child_)
            self.OnEvent.append(obj_)
            obj_.original_tagname_ = 'OnEvent'
        elif nodeName_ == 'OnImpulse':
            obj_ = OnImpulseType.factory()
            obj_.build(child_)
            self.OnImpulse.append(obj_)
            obj_.original_tagname_ = 'OnImpulse'
# end class RegimeType


class TimeDerivativeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, variable=None, MathInline=None):
        self.original_tagname_ = None
        self.variable = _cast(None, variable)
        self.MathInline = MathInline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TimeDerivativeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TimeDerivativeType.subclass:
            return TimeDerivativeType.subclass(*args_, **kwargs_)
        else:
            return TimeDerivativeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MathInline(self): return self.MathInline
    def set_MathInline(self, MathInline): self.MathInline = MathInline
    def get_variable(self): return self.variable
    def set_variable(self, variable): self.variable = variable
    def hasContent_(self):
        if (
            self.MathInline is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='TimeDerivativeType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TimeDerivativeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='TimeDerivativeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='TimeDerivativeType'):
        if self.variable is not None and 'variable' not in already_processed:
            already_processed.add('variable')
            outfile.write(' variable=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.variable), input_name='variable')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='TimeDerivativeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MathInline is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMathInline>%s</%sMathInline>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MathInline), input_name='MathInline')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('variable', node)
        if value is not None and 'variable' not in already_processed:
            already_processed.add('variable')
            self.variable = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MathInline':
            MathInline_ = child_.text
            MathInline_ = self.gds_validate_string(MathInline_, node, 'MathInline')
            self.MathInline = MathInline_
# end class TimeDerivativeType


class OnConditionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, target_regime=None, StateAssignment=None, EventOut=None, ImpulseOut=None, Trigger=None):
        self.original_tagname_ = None
        self.target_regime = _cast(None, target_regime)
        if StateAssignment is None:
            self.StateAssignment = []
        else:
            self.StateAssignment = StateAssignment
        if EventOut is None:
            self.EventOut = []
        else:
            self.EventOut = EventOut
        if ImpulseOut is None:
            self.ImpulseOut = []
        else:
            self.ImpulseOut = ImpulseOut
        self.Trigger = Trigger
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OnConditionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OnConditionType.subclass:
            return OnConditionType.subclass(*args_, **kwargs_)
        else:
            return OnConditionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StateAssignment(self): return self.StateAssignment
    def set_StateAssignment(self, StateAssignment): self.StateAssignment = StateAssignment
    def add_StateAssignment(self, value): self.StateAssignment.append(value)
    def insert_StateAssignment_at(self, index, value): self.StateAssignment.insert(index, value)
    def replace_StateAssignment_at(self, index, value): self.StateAssignment[index] = value
    def get_EventOut(self): return self.EventOut
    def set_EventOut(self, EventOut): self.EventOut = EventOut
    def add_EventOut(self, value): self.EventOut.append(value)
    def insert_EventOut_at(self, index, value): self.EventOut.insert(index, value)
    def replace_EventOut_at(self, index, value): self.EventOut[index] = value
    def get_ImpulseOut(self): return self.ImpulseOut
    def set_ImpulseOut(self, ImpulseOut): self.ImpulseOut = ImpulseOut
    def add_ImpulseOut(self, value): self.ImpulseOut.append(value)
    def insert_ImpulseOut_at(self, index, value): self.ImpulseOut.insert(index, value)
    def replace_ImpulseOut_at(self, index, value): self.ImpulseOut[index] = value
    def get_Trigger(self): return self.Trigger
    def set_Trigger(self, Trigger): self.Trigger = Trigger
    def get_target_regime(self): return self.target_regime
    def set_target_regime(self, target_regime): self.target_regime = target_regime
    def hasContent_(self):
        if (
            self.StateAssignment or
            self.EventOut or
            self.ImpulseOut or
            self.Trigger is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='OnConditionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OnConditionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='OnConditionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='OnConditionType'):
        if self.target_regime is not None and 'target_regime' not in already_processed:
            already_processed.add('target_regime')
            outfile.write(' target_regime=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.target_regime), input_name='target_regime')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='OnConditionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StateAssignment_ in self.StateAssignment:
            StateAssignment_.export(outfile, level, namespace_, name_='StateAssignment', pretty_print=pretty_print)
        for EventOut_ in self.EventOut:
            EventOut_.export(outfile, level, namespace_, name_='EventOut', pretty_print=pretty_print)
        for ImpulseOut_ in self.ImpulseOut:
            ImpulseOut_.export(outfile, level, namespace_, name_='ImpulseOut', pretty_print=pretty_print)
        if self.Trigger is not None:
            self.Trigger.export(outfile, level, namespace_, name_='Trigger', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('target_regime', node)
        if value is not None and 'target_regime' not in already_processed:
            already_processed.add('target_regime')
            self.target_regime = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StateAssignment':
            obj_ = StateAssignmentType.factory()
            obj_.build(child_)
            self.StateAssignment.append(obj_)
            obj_.original_tagname_ = 'StateAssignment'
        elif nodeName_ == 'EventOut':
            obj_ = EventOutType.factory()
            obj_.build(child_)
            self.EventOut.append(obj_)
            obj_.original_tagname_ = 'EventOut'
        elif nodeName_ == 'ImpulseOut':
            obj_ = ImpulseOutType.factory()
            obj_.build(child_)
            self.ImpulseOut.append(obj_)
            obj_.original_tagname_ = 'ImpulseOut'
        elif nodeName_ == 'Trigger':
            obj_ = TriggerType.factory()
            obj_.build(child_)
            self.Trigger = obj_
            obj_.original_tagname_ = 'Trigger'
# end class OnConditionType


class OnEventType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, target_regime=None, src_port=None, StateAssignment=None, EventOut=None, ImpulseOut=None):
        self.original_tagname_ = None
        self.target_regime = _cast(None, target_regime)
        self.src_port = _cast(None, src_port)
        if StateAssignment is None:
            self.StateAssignment = []
        else:
            self.StateAssignment = StateAssignment
        if EventOut is None:
            self.EventOut = []
        else:
            self.EventOut = EventOut
        if ImpulseOut is None:
            self.ImpulseOut = []
        else:
            self.ImpulseOut = ImpulseOut
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OnEventType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OnEventType.subclass:
            return OnEventType.subclass(*args_, **kwargs_)
        else:
            return OnEventType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StateAssignment(self): return self.StateAssignment
    def set_StateAssignment(self, StateAssignment): self.StateAssignment = StateAssignment
    def add_StateAssignment(self, value): self.StateAssignment.append(value)
    def insert_StateAssignment_at(self, index, value): self.StateAssignment.insert(index, value)
    def replace_StateAssignment_at(self, index, value): self.StateAssignment[index] = value
    def get_EventOut(self): return self.EventOut
    def set_EventOut(self, EventOut): self.EventOut = EventOut
    def add_EventOut(self, value): self.EventOut.append(value)
    def insert_EventOut_at(self, index, value): self.EventOut.insert(index, value)
    def replace_EventOut_at(self, index, value): self.EventOut[index] = value
    def get_ImpulseOut(self): return self.ImpulseOut
    def set_ImpulseOut(self, ImpulseOut): self.ImpulseOut = ImpulseOut
    def add_ImpulseOut(self, value): self.ImpulseOut.append(value)
    def insert_ImpulseOut_at(self, index, value): self.ImpulseOut.insert(index, value)
    def replace_ImpulseOut_at(self, index, value): self.ImpulseOut[index] = value
    def get_target_regime(self): return self.target_regime
    def set_target_regime(self, target_regime): self.target_regime = target_regime
    def get_src_port(self): return self.src_port
    def set_src_port(self, src_port): self.src_port = src_port
    def hasContent_(self):
        if (
            self.StateAssignment or
            self.EventOut or
            self.ImpulseOut
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='OnEventType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OnEventType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='OnEventType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='OnEventType'):
        if self.target_regime is not None and 'target_regime' not in already_processed:
            already_processed.add('target_regime')
            outfile.write(' target_regime=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.target_regime), input_name='target_regime')), ))
        if self.src_port is not None and 'src_port' not in already_processed:
            already_processed.add('src_port')
            outfile.write(' src_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.src_port), input_name='src_port')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='OnEventType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StateAssignment_ in self.StateAssignment:
            StateAssignment_.export(outfile, level, namespace_, name_='StateAssignment', pretty_print=pretty_print)
        for EventOut_ in self.EventOut:
            EventOut_.export(outfile, level, namespace_, name_='EventOut', pretty_print=pretty_print)
        for ImpulseOut_ in self.ImpulseOut:
            ImpulseOut_.export(outfile, level, namespace_, name_='ImpulseOut', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('target_regime', node)
        if value is not None and 'target_regime' not in already_processed:
            already_processed.add('target_regime')
            self.target_regime = value
        value = find_attr_value_('src_port', node)
        if value is not None and 'src_port' not in already_processed:
            already_processed.add('src_port')
            self.src_port = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StateAssignment':
            obj_ = StateAssignmentType.factory()
            obj_.build(child_)
            self.StateAssignment.append(obj_)
            obj_.original_tagname_ = 'StateAssignment'
        elif nodeName_ == 'EventOut':
            obj_ = EventOutType.factory()
            obj_.build(child_)
            self.EventOut.append(obj_)
            obj_.original_tagname_ = 'EventOut'
        elif nodeName_ == 'ImpulseOut':
            obj_ = ImpulseOutType.factory()
            obj_.build(child_)
            self.ImpulseOut.append(obj_)
            obj_.original_tagname_ = 'ImpulseOut'
# end class OnEventType


class OnImpulseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, target_regime=None, src_port=None, StateAssignment=None, EventOut=None, ImpulseOut=None):
        self.original_tagname_ = None
        self.target_regime = _cast(None, target_regime)
        self.src_port = _cast(None, src_port)
        if StateAssignment is None:
            self.StateAssignment = []
        else:
            self.StateAssignment = StateAssignment
        if EventOut is None:
            self.EventOut = []
        else:
            self.EventOut = EventOut
        if ImpulseOut is None:
            self.ImpulseOut = []
        else:
            self.ImpulseOut = ImpulseOut
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OnImpulseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OnImpulseType.subclass:
            return OnImpulseType.subclass(*args_, **kwargs_)
        else:
            return OnImpulseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_StateAssignment(self): return self.StateAssignment
    def set_StateAssignment(self, StateAssignment): self.StateAssignment = StateAssignment
    def add_StateAssignment(self, value): self.StateAssignment.append(value)
    def insert_StateAssignment_at(self, index, value): self.StateAssignment.insert(index, value)
    def replace_StateAssignment_at(self, index, value): self.StateAssignment[index] = value
    def get_EventOut(self): return self.EventOut
    def set_EventOut(self, EventOut): self.EventOut = EventOut
    def add_EventOut(self, value): self.EventOut.append(value)
    def insert_EventOut_at(self, index, value): self.EventOut.insert(index, value)
    def replace_EventOut_at(self, index, value): self.EventOut[index] = value
    def get_ImpulseOut(self): return self.ImpulseOut
    def set_ImpulseOut(self, ImpulseOut): self.ImpulseOut = ImpulseOut
    def add_ImpulseOut(self, value): self.ImpulseOut.append(value)
    def insert_ImpulseOut_at(self, index, value): self.ImpulseOut.insert(index, value)
    def replace_ImpulseOut_at(self, index, value): self.ImpulseOut[index] = value
    def get_target_regime(self): return self.target_regime
    def set_target_regime(self, target_regime): self.target_regime = target_regime
    def get_src_port(self): return self.src_port
    def set_src_port(self, src_port): self.src_port = src_port
    def hasContent_(self):
        if (
            self.StateAssignment or
            self.EventOut or
            self.ImpulseOut
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='OnImpulseType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OnImpulseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='OnImpulseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='OnImpulseType'):
        if self.target_regime is not None and 'target_regime' not in already_processed:
            already_processed.add('target_regime')
            outfile.write(' target_regime=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.target_regime), input_name='target_regime')), ))
        if self.src_port is not None and 'src_port' not in already_processed:
            already_processed.add('src_port')
            outfile.write(' src_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.src_port), input_name='src_port')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='OnImpulseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for StateAssignment_ in self.StateAssignment:
            StateAssignment_.export(outfile, level, namespace_, name_='StateAssignment', pretty_print=pretty_print)
        for EventOut_ in self.EventOut:
            EventOut_.export(outfile, level, namespace_, name_='EventOut', pretty_print=pretty_print)
        for ImpulseOut_ in self.ImpulseOut:
            ImpulseOut_.export(outfile, level, namespace_, name_='ImpulseOut', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('target_regime', node)
        if value is not None and 'target_regime' not in already_processed:
            already_processed.add('target_regime')
            self.target_regime = value
        value = find_attr_value_('src_port', node)
        if value is not None and 'src_port' not in already_processed:
            already_processed.add('src_port')
            self.src_port = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'StateAssignment':
            obj_ = StateAssignmentType.factory()
            obj_.build(child_)
            self.StateAssignment.append(obj_)
            obj_.original_tagname_ = 'StateAssignment'
        elif nodeName_ == 'EventOut':
            obj_ = EventOutType.factory()
            obj_.build(child_)
            self.EventOut.append(obj_)
            obj_.original_tagname_ = 'EventOut'
        elif nodeName_ == 'ImpulseOut':
            obj_ = ImpulseOutType.factory()
            obj_.build(child_)
            self.ImpulseOut.append(obj_)
            obj_.original_tagname_ = 'ImpulseOut'
# end class OnImpulseType


class StateAssignmentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, variable=None, MathInline=None):
        self.original_tagname_ = None
        self.variable = _cast(None, variable)
        self.MathInline = MathInline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StateAssignmentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StateAssignmentType.subclass:
            return StateAssignmentType.subclass(*args_, **kwargs_)
        else:
            return StateAssignmentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MathInline(self): return self.MathInline
    def set_MathInline(self, MathInline): self.MathInline = MathInline
    def get_variable(self): return self.variable
    def set_variable(self, variable): self.variable = variable
    def hasContent_(self):
        if (
            self.MathInline is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='StateAssignmentType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='StateAssignmentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='StateAssignmentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='StateAssignmentType'):
        if self.variable is not None and 'variable' not in already_processed:
            already_processed.add('variable')
            outfile.write(' variable=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.variable), input_name='variable')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='StateAssignmentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MathInline is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMathInline>%s</%sMathInline>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MathInline), input_name='MathInline')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('variable', node)
        if value is not None and 'variable' not in already_processed:
            already_processed.add('variable')
            self.variable = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MathInline':
            MathInline_ = child_.text
            MathInline_ = self.gds_validate_string(MathInline_, node, 'MathInline')
            self.MathInline = MathInline_
# end class StateAssignmentType


class EventOutType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, port=None):
        self.original_tagname_ = None
        self.port = _cast(None, port)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EventOutType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EventOutType.subclass:
            return EventOutType.subclass(*args_, **kwargs_)
        else:
            return EventOutType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_port(self): return self.port
    def set_port(self, port): self.port = port
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='EventOutType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EventOutType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='EventOutType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='EventOutType'):
        if self.port is not None and 'port' not in already_processed:
            already_processed.add('port')
            outfile.write(' port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.port), input_name='port')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='EventOutType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('port', node)
        if value is not None and 'port' not in already_processed:
            already_processed.add('port')
            self.port = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EventOutType


class ImpulseOutType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, port=None):
        self.original_tagname_ = None
        self.port = _cast(None, port)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ImpulseOutType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ImpulseOutType.subclass:
            return ImpulseOutType.subclass(*args_, **kwargs_)
        else:
            return ImpulseOutType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_port(self): return self.port
    def set_port(self, port): self.port = port
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ImpulseOutType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ImpulseOutType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ImpulseOutType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ImpulseOutType'):
        if self.port is not None and 'port' not in already_processed:
            already_processed.add('port')
            outfile.write(' port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.port), input_name='port')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ImpulseOutType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('port', node)
        if value is not None and 'port' not in already_processed:
            already_processed.add('port')
            self.port = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ImpulseOutType


class TriggerType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MathInline=None):
        self.original_tagname_ = None
        self.MathInline = MathInline
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TriggerType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TriggerType.subclass:
            return TriggerType.subclass(*args_, **kwargs_)
        else:
            return TriggerType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MathInline(self): return self.MathInline
    def set_MathInline(self, MathInline): self.MathInline = MathInline
    def hasContent_(self):
        if (
            self.MathInline is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='TriggerType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TriggerType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='TriggerType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='TriggerType'):
        pass
    def exportChildren(self, outfile, level, namespace_='NML:', name_='TriggerType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MathInline is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMathInline>%s</%sMathInline>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MathInline), input_name='MathInline')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MathInline':
            MathInline_ = child_.text
            MathInline_ = self.gds_validate_string(MathInline_, node, 'MathInline')
            self.MathInline = MathInline_
# end class TriggerType


GDSClassesMapping = {
    'Alias': AliasType,
    'AnalogReceivePort': AnalogReceivePortType,
    'AnalogReducePort': AnalogReducePortType,
    'AnalogSendPort': AnalogSendPortType,
    'ComponentClass': ComponentClassType,
    'Dynamics': DynamicsType,
    'EventOut': EventOutType,
    'EventReceivePort': EventReceivePortType,
    'EventSendPort': EventSendPortType,
    'ImpulseOut': ImpulseOutType,
    'ImpulseReceivePort': ImpulseReceivePortType,
    'ImpulseSendPort': ImpulseSendPortType,
    'OnCondition': OnConditionType,
    'OnEvent': OnEventType,
    'OnImpulse': OnImpulseType,
    'Parameter': ParameterType,
    'Port': PortType,
    'Regime': RegimeType,
    'SpineML': SpineMLType,
    'StateAssignment': StateAssignmentType,
    'StateVariable': StateVariableType,
    'TimeDerivative': TimeDerivativeType,
    'Trigger': TriggerType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SpineMLType'
        rootClass = SpineMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SpineMLType'
        rootClass = SpineMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SpineMLType'
        rootClass = SpineMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLComponentLayer"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SpineMLType'
        rootClass = SpineMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from component import *\n\n')
        sys.stdout.write('import component as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AliasType",
    "AnalogReceivePortType",
    "AnalogReducePortType",
    "AnalogSendPortType",
    "ComponentClassType",
    "DynamicsType",
    "EventOutType",
    "EventReceivePortType",
    "EventSendPortType",
    "ImpulseOutType",
    "ImpulseReceivePortType",
    "ImpulseSendPortType",
    "OnConditionType",
    "OnEventType",
    "OnImpulseType",
    "ParameterType",
    "PortType",
    "RegimeType",
    "SpineMLType",
    "StateAssignmentType",
    "StateVariableType",
    "TimeDerivativeType",
    "TriggerType"
]
