#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Mar 30 10:14:25 2016 by generateDS.py version 2.20b.
#
# Command line options:
#   ('-o', '../../Work/libSpineML/network.py')
#
# Command line arguments:
#   ../SpineML/Schema/SpineMLNetworkLayer.xsd
#
# Command line:
#   generateDS.py -o "../../Work/libSpineML/network.py" ../SpineML/Schema/SpineMLNetworkLayer.xsd
#
# Current working directory (os.getcwd()):
#   generateDS-2.20b0
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class SpineMLType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, Population=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        if Population is None:
            self.Population = []
        else:
            self.Population = Population
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SpineMLType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SpineMLType.subclass:
            return SpineMLType.subclass(*args_, **kwargs_)
        else:
            return SpineMLType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Population(self): return self.Population
    def set_Population(self, Population): self.Population = Population
    def add_Population(self, value): self.Population.append(value)
    def insert_Population_at(self, index, value): self.Population.insert(index, value)
    def replace_Population_at(self, index, value): self.Population[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (
            self.Population
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='SpineMLType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpineMLType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='SpineMLType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='SpineMLType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='SpineMLType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Population_ in self.Population:
            Population_.export(outfile, level, namespace_, name_='Population', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Population':
            obj_ = PopulationType.factory()
            obj_.build(child_)
            self.Population.append(obj_)
            obj_.original_tagname_ = 'Population'
# end class SpineMLType


class ComponentType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, url=None, Property=None, extensiontype_=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.url = _cast(None, url)
        if Property is None:
            self.Property = []
        else:
            self.Property = Property
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ComponentType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ComponentType.subclass:
            return ComponentType.subclass(*args_, **kwargs_)
        else:
            return ComponentType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Property(self): return self.Property
    def set_Property(self, Property): self.Property = Property
    def add_Property(self, value): self.Property.append(value)
    def insert_Property_at(self, index, value): self.Property.insert(index, value)
    def replace_Property_at(self, index, value): self.Property[index] = value
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.Property
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ComponentType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ComponentType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ComponentType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ComponentType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.url is not None and 'url' not in already_processed:
            already_processed.add('url')
            outfile.write(' url=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.url), input_name='url')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ComponentType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Property_ in self.Property:
            Property_.export(outfile, level, namespace_, name_='Property', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('url', node)
        if value is not None and 'url' not in already_processed:
            already_processed.add('url')
            self.url = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Property':
            obj_ = PropertyType.factory()
            obj_.build(child_)
            self.Property.append(obj_)
            obj_.original_tagname_ = 'Property'
# end class ComponentType


class GroupType(ComponentType):
    subclass = None
    superclass = ComponentType
    def __init__(self, name=None, url=None, Property=None, size=None, Layout=None):
        self.original_tagname_ = None
        super(GroupType, self).__init__(name, url, Property, )
        self.size = _cast(int, size)
        self.Layout = Layout
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, GroupType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if GroupType.subclass:
            return GroupType.subclass(*args_, **kwargs_)
        else:
            return GroupType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Layout(self): return self.Layout
    def set_Layout(self, Layout): self.Layout = Layout
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def hasContent_(self):
        if (
            self.Layout is not None or
            super(GroupType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='GroupType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='GroupType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='GroupType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='GroupType'):
        super(GroupType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='GroupType')
        if self.size is not None and 'size' not in already_processed:
            already_processed.add('size')
            outfile.write(' size="%s"' % self.gds_format_integer(self.size, input_name='size'))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='GroupType', fromsubclass_=False, pretty_print=True):
        super(GroupType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Layout is not None:
            self.Layout.export(outfile, level, namespace_, name_='Layout', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('size', node)
        if value is not None and 'size' not in already_processed:
            already_processed.add('size')
            try:
                self.size = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        super(GroupType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Layout':
            obj_ = LayoutType.factory()
            obj_.build(child_)
            self.Layout = obj_
            obj_.original_tagname_ = 'Layout'
        super(GroupType, self).buildChildren(child_, node, nodeName_, True)
# end class GroupType


class PropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, dimension=None, AbstractValue=None, AbstractDistribution=None):
        self.original_tagname_ = None
        self.name = _cast(None, name)
        self.dimension = _cast(None, dimension)
        self.AbstractValue = AbstractValue
        self.AbstractDistribution = AbstractDistribution
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PropertyType.subclass:
            return PropertyType.subclass(*args_, **kwargs_)
        else:
            return PropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AbstractValue(self): return self.AbstractValue
    def set_AbstractValue(self, AbstractValue): self.AbstractValue = AbstractValue
    def get_AbstractDistribution(self): return self.AbstractDistribution
    def set_AbstractDistribution(self, AbstractDistribution): self.AbstractDistribution = AbstractDistribution
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_dimension(self): return self.dimension
    def set_dimension(self, dimension): self.dimension = dimension
    def hasContent_(self):
        if (
            self.AbstractValue is not None or
            self.AbstractDistribution is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='PropertyType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PropertyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='PropertyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='PropertyType'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.dimension is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            outfile.write(' dimension=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dimension), input_name='dimension')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='PropertyType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AbstractValue is not None:
            self.AbstractValue.export(outfile, level, namespace_, name_='AbstractValue', pretty_print=pretty_print)
        if self.AbstractDistribution is not None:
            self.AbstractDistribution.export(outfile, level, namespace_, name_='AbstractDistribution', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('dimension', node)
        if value is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            self.dimension = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AbstractValue':
            class_obj_ = self.get_class_obj_(child_, AbstractValueType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.AbstractValue = obj_
            obj_.original_tagname_ = 'AbstractValue'
        elif nodeName_ == 'FixedValue':
            obj_ = FixedValueType.factory()
            obj_.build(child_)
            self.AbstractValue = obj_
            obj_.original_tagname_ = 'FixedValue'
        elif nodeName_ == 'ValueList':
            obj_ = ValueListType.factory()
            obj_.build(child_)
            self.AbstractValue = obj_
            obj_.original_tagname_ = 'ValueList'
        elif nodeName_ == 'AbstractDistribution':
            class_obj_ = self.get_class_obj_(child_, AbstractDistributionType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.AbstractDistribution = obj_
            obj_.original_tagname_ = 'AbstractDistribution'
        elif nodeName_ == 'UniformDistribution':
            obj_ = UniformDistributionType.factory()
            obj_.build(child_)
            self.AbstractDistribution = obj_
            obj_.original_tagname_ = 'UniformDistribution'
        elif nodeName_ == 'NormalDistribution':
            obj_ = NormalDistributionType.factory()
            obj_.build(child_)
            self.AbstractDistribution = obj_
            obj_.original_tagname_ = 'NormalDistribution'
        elif nodeName_ == 'PoissonDistribution':
            obj_ = PoissonDistributionType.factory()
            obj_.build(child_)
            self.AbstractDistribution = obj_
            obj_.original_tagname_ = 'PoissonDistribution'
# end class PropertyType


class AbstractValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, extensiontype_=None):
        self.original_tagname_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AbstractValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AbstractValueType.subclass:
            return AbstractValueType.subclass(*args_, **kwargs_)
        else:
            return AbstractValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='AbstractValueType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AbstractValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='AbstractValueType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='AbstractValueType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='NML:', name_='AbstractValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AbstractValueType


class FixedValueType(AbstractValueType):
    subclass = None
    superclass = AbstractValueType
    def __init__(self, value=None):
        self.original_tagname_ = None
        super(FixedValueType, self).__init__()
        self.value = _cast(float, value)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FixedValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FixedValueType.subclass:
            return FixedValueType.subclass(*args_, **kwargs_)
        else:
            return FixedValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def hasContent_(self):
        if (
            super(FixedValueType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='FixedValueType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FixedValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='FixedValueType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='FixedValueType'):
        super(FixedValueType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='FixedValueType')
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_double(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='FixedValueType', fromsubclass_=False, pretty_print=True):
        super(FixedValueType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (value): %s' % exp)
        super(FixedValueType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(FixedValueType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class FixedValueType


class ValueListType(AbstractValueType):
    subclass = None
    superclass = AbstractValueType
    def __init__(self, Value=None):
        self.original_tagname_ = None
        super(ValueListType, self).__init__()
        if Value is None:
            self.Value = []
        else:
            self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValueListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValueListType.subclass:
            return ValueListType.subclass(*args_, **kwargs_)
        else:
            return ValueListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def add_Value(self, value): self.Value.append(value)
    def insert_Value_at(self, index, value): self.Value.insert(index, value)
    def replace_Value_at(self, index, value): self.Value[index] = value
    def hasContent_(self):
        if (
            self.Value or
            super(ValueListType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ValueListType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ValueListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ValueListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ValueListType'):
        super(ValueListType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ValueListType')
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ValueListType', fromsubclass_=False, pretty_print=True):
        super(ValueListType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Value_ in self.Value:
            Value_.export(outfile, level, namespace_, name_='Value', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ValueListType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Value':
            obj_ = ValueType.factory()
            obj_.build(child_)
            self.Value.append(obj_)
            obj_.original_tagname_ = 'Value'
        super(ValueListType, self).buildChildren(child_, node, nodeName_, True)
# end class ValueListType


class ValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, index=None, value=None):
        self.original_tagname_ = None
        self.index = _cast(int, index)
        self.value = _cast(float, value)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ValueType.subclass:
            return ValueType.subclass(*args_, **kwargs_)
        else:
            return ValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_index(self): return self.index
    def set_index(self, index): self.index = index
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ValueType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ValueType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ValueType'):
        if self.index is not None and 'index' not in already_processed:
            already_processed.add('index')
            outfile.write(' index="%s"' % self.gds_format_integer(self.index, input_name='index'))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value="%s"' % self.gds_format_double(self.value, input_name='value'))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('index', node)
        if value is not None and 'index' not in already_processed:
            already_processed.add('index')
            try:
                self.index = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            try:
                self.value = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (value): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ValueType


class AbstractDistributionType(AbstractValueType):
    subclass = None
    superclass = AbstractValueType
    def __init__(self, seed=None, extensiontype_=None):
        self.original_tagname_ = None
        super(AbstractDistributionType, self).__init__(extensiontype_, )
        self.seed = _cast(int, seed)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AbstractDistributionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AbstractDistributionType.subclass:
            return AbstractDistributionType.subclass(*args_, **kwargs_)
        else:
            return AbstractDistributionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_seed(self): return self.seed
    def set_seed(self, seed): self.seed = seed
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            super(AbstractDistributionType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='AbstractDistributionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AbstractDistributionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='AbstractDistributionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='AbstractDistributionType'):
        super(AbstractDistributionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AbstractDistributionType')
        if self.seed is not None and 'seed' not in already_processed:
            already_processed.add('seed')
            outfile.write(' seed="%s"' % self.gds_format_integer(self.seed, input_name='seed'))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='NML:', name_='AbstractDistributionType', fromsubclass_=False, pretty_print=True):
        super(AbstractDistributionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('seed', node)
        if value is not None and 'seed' not in already_processed:
            already_processed.add('seed')
            try:
                self.seed = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(AbstractDistributionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(AbstractDistributionType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class AbstractDistributionType


class UniformDistributionType(AbstractDistributionType):
    subclass = None
    superclass = AbstractDistributionType
    def __init__(self, seed=None, minimum=None, maximum=None):
        self.original_tagname_ = None
        super(UniformDistributionType, self).__init__(seed, )
        self.minimum = _cast(float, minimum)
        self.maximum = _cast(float, maximum)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, UniformDistributionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if UniformDistributionType.subclass:
            return UniformDistributionType.subclass(*args_, **kwargs_)
        else:
            return UniformDistributionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_minimum(self): return self.minimum
    def set_minimum(self, minimum): self.minimum = minimum
    def get_maximum(self): return self.maximum
    def set_maximum(self, maximum): self.maximum = maximum
    def hasContent_(self):
        if (
            super(UniformDistributionType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='UniformDistributionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UniformDistributionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='UniformDistributionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='UniformDistributionType'):
        super(UniformDistributionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='UniformDistributionType')
        if self.minimum is not None and 'minimum' not in already_processed:
            already_processed.add('minimum')
            outfile.write(' minimum="%s"' % self.gds_format_double(self.minimum, input_name='minimum'))
        if self.maximum is not None and 'maximum' not in already_processed:
            already_processed.add('maximum')
            outfile.write(' maximum="%s"' % self.gds_format_double(self.maximum, input_name='maximum'))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='UniformDistributionType', fromsubclass_=False, pretty_print=True):
        super(UniformDistributionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('minimum', node)
        if value is not None and 'minimum' not in already_processed:
            already_processed.add('minimum')
            try:
                self.minimum = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (minimum): %s' % exp)
        value = find_attr_value_('maximum', node)
        if value is not None and 'maximum' not in already_processed:
            already_processed.add('maximum')
            try:
                self.maximum = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (maximum): %s' % exp)
        super(UniformDistributionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(UniformDistributionType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class UniformDistributionType


class NormalDistributionType(AbstractDistributionType):
    subclass = None
    superclass = AbstractDistributionType
    def __init__(self, seed=None, mean=None, variance=None):
        self.original_tagname_ = None
        super(NormalDistributionType, self).__init__(seed, )
        self.mean = _cast(float, mean)
        self.variance = _cast(float, variance)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NormalDistributionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NormalDistributionType.subclass:
            return NormalDistributionType.subclass(*args_, **kwargs_)
        else:
            return NormalDistributionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mean(self): return self.mean
    def set_mean(self, mean): self.mean = mean
    def get_variance(self): return self.variance
    def set_variance(self, variance): self.variance = variance
    def hasContent_(self):
        if (
            super(NormalDistributionType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='NormalDistributionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NormalDistributionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='NormalDistributionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='NormalDistributionType'):
        super(NormalDistributionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='NormalDistributionType')
        if self.mean is not None and 'mean' not in already_processed:
            already_processed.add('mean')
            outfile.write(' mean="%s"' % self.gds_format_double(self.mean, input_name='mean'))
        if self.variance is not None and 'variance' not in already_processed:
            already_processed.add('variance')
            outfile.write(' variance="%s"' % self.gds_format_double(self.variance, input_name='variance'))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='NormalDistributionType', fromsubclass_=False, pretty_print=True):
        super(NormalDistributionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('mean', node)
        if value is not None and 'mean' not in already_processed:
            already_processed.add('mean')
            try:
                self.mean = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (mean): %s' % exp)
        value = find_attr_value_('variance', node)
        if value is not None and 'variance' not in already_processed:
            already_processed.add('variance')
            try:
                self.variance = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (variance): %s' % exp)
        super(NormalDistributionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(NormalDistributionType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class NormalDistributionType


class PoissonDistributionType(AbstractDistributionType):
    subclass = None
    superclass = AbstractDistributionType
    def __init__(self, seed=None, mean=None):
        self.original_tagname_ = None
        super(PoissonDistributionType, self).__init__(seed, )
        self.mean = _cast(float, mean)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PoissonDistributionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PoissonDistributionType.subclass:
            return PoissonDistributionType.subclass(*args_, **kwargs_)
        else:
            return PoissonDistributionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mean(self): return self.mean
    def set_mean(self, mean): self.mean = mean
    def hasContent_(self):
        if (
            super(PoissonDistributionType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='PoissonDistributionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PoissonDistributionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='PoissonDistributionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='PoissonDistributionType'):
        super(PoissonDistributionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='PoissonDistributionType')
        if self.mean is not None and 'mean' not in already_processed:
            already_processed.add('mean')
            outfile.write(' mean="%s"' % self.gds_format_double(self.mean, input_name='mean'))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='PoissonDistributionType', fromsubclass_=False, pretty_print=True):
        super(PoissonDistributionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('mean', node)
        if value is not None and 'mean' not in already_processed:
            already_processed.add('mean')
            try:
                self.mean = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (mean): %s' % exp)
        super(PoissonDistributionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(PoissonDistributionType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class PoissonDistributionType


class AbstractConnectionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, extensiontype_=None):
        self.original_tagname_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AbstractConnectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AbstractConnectionType.subclass:
            return AbstractConnectionType.subclass(*args_, **kwargs_)
        else:
            return AbstractConnectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='AbstractConnectionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AbstractConnectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='AbstractConnectionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='AbstractConnectionType'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='NML:', name_='AbstractConnectionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AbstractConnectionType


class ConnectionListType(AbstractConnectionType):
    subclass = None
    superclass = AbstractConnectionType
    def __init__(self, Delay=None, Connection=None):
        self.original_tagname_ = None
        super(ConnectionListType, self).__init__()
        self.Delay = Delay
        if Connection is None:
            self.Connection = []
        else:
            self.Connection = Connection
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConnectionListType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConnectionListType.subclass:
            return ConnectionListType.subclass(*args_, **kwargs_)
        else:
            return ConnectionListType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Delay(self): return self.Delay
    def set_Delay(self, Delay): self.Delay = Delay
    def get_Connection(self): return self.Connection
    def set_Connection(self, Connection): self.Connection = Connection
    def add_Connection(self, value): self.Connection.append(value)
    def insert_Connection_at(self, index, value): self.Connection.insert(index, value)
    def replace_Connection_at(self, index, value): self.Connection[index] = value
    def hasContent_(self):
        if (
            self.Delay is not None or
            self.Connection or
            super(ConnectionListType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ConnectionListType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConnectionListType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ConnectionListType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ConnectionListType'):
        super(ConnectionListType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ConnectionListType')
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ConnectionListType', fromsubclass_=False, pretty_print=True):
        super(ConnectionListType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Delay is not None:
            self.Delay.export(outfile, level, namespace_, name_='Delay', pretty_print=pretty_print)
        for Connection_ in self.Connection:
            Connection_.export(outfile, level, namespace_, name_='Connection', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ConnectionListType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Delay':
            obj_ = DelayType.factory()
            obj_.build(child_)
            self.Delay = obj_
            obj_.original_tagname_ = 'Delay'
        elif nodeName_ == 'Connection':
            obj_ = ConnectionType.factory()
            obj_.build(child_)
            self.Connection.append(obj_)
            obj_.original_tagname_ = 'Connection'
        super(ConnectionListType, self).buildChildren(child_, node, nodeName_, True)
# end class ConnectionListType


class OneToOneConnectionType(AbstractConnectionType):
    subclass = None
    superclass = AbstractConnectionType
    def __init__(self, Delay=None):
        self.original_tagname_ = None
        super(OneToOneConnectionType, self).__init__()
        self.Delay = Delay
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OneToOneConnectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OneToOneConnectionType.subclass:
            return OneToOneConnectionType.subclass(*args_, **kwargs_)
        else:
            return OneToOneConnectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Delay(self): return self.Delay
    def set_Delay(self, Delay): self.Delay = Delay
    def hasContent_(self):
        if (
            self.Delay is not None or
            super(OneToOneConnectionType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='OneToOneConnectionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OneToOneConnectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='OneToOneConnectionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='OneToOneConnectionType'):
        super(OneToOneConnectionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='OneToOneConnectionType')
    def exportChildren(self, outfile, level, namespace_='NML:', name_='OneToOneConnectionType', fromsubclass_=False, pretty_print=True):
        super(OneToOneConnectionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Delay is not None:
            self.Delay.export(outfile, level, namespace_, name_='Delay', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(OneToOneConnectionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Delay':
            obj_ = DelayType.factory()
            obj_.build(child_)
            self.Delay = obj_
            obj_.original_tagname_ = 'Delay'
        super(OneToOneConnectionType, self).buildChildren(child_, node, nodeName_, True)
# end class OneToOneConnectionType


class AllToAllConnectionType(AbstractConnectionType):
    subclass = None
    superclass = AbstractConnectionType
    def __init__(self, Delay=None):
        self.original_tagname_ = None
        super(AllToAllConnectionType, self).__init__()
        self.Delay = Delay
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AllToAllConnectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AllToAllConnectionType.subclass:
            return AllToAllConnectionType.subclass(*args_, **kwargs_)
        else:
            return AllToAllConnectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Delay(self): return self.Delay
    def set_Delay(self, Delay): self.Delay = Delay
    def hasContent_(self):
        if (
            self.Delay is not None or
            super(AllToAllConnectionType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='AllToAllConnectionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AllToAllConnectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='AllToAllConnectionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='AllToAllConnectionType'):
        super(AllToAllConnectionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='AllToAllConnectionType')
    def exportChildren(self, outfile, level, namespace_='NML:', name_='AllToAllConnectionType', fromsubclass_=False, pretty_print=True):
        super(AllToAllConnectionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Delay is not None:
            self.Delay.export(outfile, level, namespace_, name_='Delay', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(AllToAllConnectionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Delay':
            obj_ = DelayType.factory()
            obj_.build(child_)
            self.Delay = obj_
            obj_.original_tagname_ = 'Delay'
        super(AllToAllConnectionType, self).buildChildren(child_, node, nodeName_, True)
# end class AllToAllConnectionType


class FixedProbabilityConnectionType(AbstractConnectionType):
    subclass = None
    superclass = AbstractConnectionType
    def __init__(self, probability=None, seed=None, Delay=None):
        self.original_tagname_ = None
        super(FixedProbabilityConnectionType, self).__init__()
        self.probability = _cast(float, probability)
        self.seed = _cast(int, seed)
        self.Delay = Delay
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FixedProbabilityConnectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FixedProbabilityConnectionType.subclass:
            return FixedProbabilityConnectionType.subclass(*args_, **kwargs_)
        else:
            return FixedProbabilityConnectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Delay(self): return self.Delay
    def set_Delay(self, Delay): self.Delay = Delay
    def get_probability(self): return self.probability
    def set_probability(self, probability): self.probability = probability
    def get_seed(self): return self.seed
    def set_seed(self, seed): self.seed = seed
    def hasContent_(self):
        if (
            self.Delay is not None or
            super(FixedProbabilityConnectionType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='FixedProbabilityConnectionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FixedProbabilityConnectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='FixedProbabilityConnectionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='FixedProbabilityConnectionType'):
        super(FixedProbabilityConnectionType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='FixedProbabilityConnectionType')
        if self.probability is not None and 'probability' not in already_processed:
            already_processed.add('probability')
            outfile.write(' probability="%s"' % self.gds_format_double(self.probability, input_name='probability'))
        if self.seed is not None and 'seed' not in already_processed:
            already_processed.add('seed')
            outfile.write(' seed="%s"' % self.gds_format_integer(self.seed, input_name='seed'))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='FixedProbabilityConnectionType', fromsubclass_=False, pretty_print=True):
        super(FixedProbabilityConnectionType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Delay is not None:
            self.Delay.export(outfile, level, namespace_, name_='Delay', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('probability', node)
        if value is not None and 'probability' not in already_processed:
            already_processed.add('probability')
            try:
                self.probability = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (probability): %s' % exp)
        value = find_attr_value_('seed', node)
        if value is not None and 'seed' not in already_processed:
            already_processed.add('seed')
            try:
                self.seed = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        super(FixedProbabilityConnectionType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Delay':
            obj_ = DelayType.factory()
            obj_.build(child_)
            self.Delay = obj_
            obj_.original_tagname_ = 'Delay'
        super(FixedProbabilityConnectionType, self).buildChildren(child_, node, nodeName_, True)
# end class FixedProbabilityConnectionType


class ConnectionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, src_neuron=None, dst_neuron=None, delay=None):
        self.original_tagname_ = None
        self.src_neuron = _cast(int, src_neuron)
        self.dst_neuron = _cast(int, dst_neuron)
        self.delay = _cast(float, delay)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConnectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConnectionType.subclass:
            return ConnectionType.subclass(*args_, **kwargs_)
        else:
            return ConnectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_src_neuron(self): return self.src_neuron
    def set_src_neuron(self, src_neuron): self.src_neuron = src_neuron
    def get_dst_neuron(self): return self.dst_neuron
    def set_dst_neuron(self, dst_neuron): self.dst_neuron = dst_neuron
    def get_delay(self): return self.delay
    def set_delay(self, delay): self.delay = delay
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ConnectionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ConnectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ConnectionType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ConnectionType'):
        if self.src_neuron is not None and 'src_neuron' not in already_processed:
            already_processed.add('src_neuron')
            outfile.write(' src_neuron="%s"' % self.gds_format_integer(self.src_neuron, input_name='src_neuron'))
        if self.dst_neuron is not None and 'dst_neuron' not in already_processed:
            already_processed.add('dst_neuron')
            outfile.write(' dst_neuron="%s"' % self.gds_format_integer(self.dst_neuron, input_name='dst_neuron'))
        if self.delay is not None and 'delay' not in already_processed:
            already_processed.add('delay')
            outfile.write(' delay="%s"' % self.gds_format_double(self.delay, input_name='delay'))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ConnectionType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('src_neuron', node)
        if value is not None and 'src_neuron' not in already_processed:
            already_processed.add('src_neuron')
            try:
                self.src_neuron = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('dst_neuron', node)
        if value is not None and 'dst_neuron' not in already_processed:
            already_processed.add('dst_neuron')
            try:
                self.dst_neuron = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('delay', node)
        if value is not None and 'delay' not in already_processed:
            already_processed.add('delay')
            try:
                self.delay = float(value)
            except ValueError as exp:
                raise ValueError('Bad float/double attribute (delay): %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ConnectionType


class DelayType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dimension=None, FixedValue=None, AbstractDistribution=None):
        self.original_tagname_ = None
        self.dimension = _cast(None, dimension)
        self.FixedValue = FixedValue
        self.AbstractDistribution = AbstractDistribution
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DelayType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DelayType.subclass:
            return DelayType.subclass(*args_, **kwargs_)
        else:
            return DelayType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FixedValue(self): return self.FixedValue
    def set_FixedValue(self, FixedValue): self.FixedValue = FixedValue
    def get_AbstractDistribution(self): return self.AbstractDistribution
    def set_AbstractDistribution(self, AbstractDistribution): self.AbstractDistribution = AbstractDistribution
    def get_dimension(self): return self.dimension
    def set_dimension(self, dimension): self.dimension = dimension
    def hasContent_(self):
        if (
            self.FixedValue is not None or
            self.AbstractDistribution is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='DelayType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DelayType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='DelayType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='DelayType'):
        if self.dimension is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            outfile.write(' dimension=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dimension), input_name='dimension')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='DelayType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FixedValue is not None:
            self.FixedValue.export(outfile, level, namespace_, name_='FixedValue', pretty_print=pretty_print)
        if self.AbstractDistribution is not None:
            self.AbstractDistribution.export(outfile, level, namespace_, name_='AbstractDistribution', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dimension', node)
        if value is not None and 'dimension' not in already_processed:
            already_processed.add('dimension')
            self.dimension = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FixedValue':
            obj_ = FixedValueType.factory()
            obj_.build(child_)
            self.FixedValue = obj_
            obj_.original_tagname_ = 'FixedValue'
        elif nodeName_ == 'AbstractDistribution':
            class_obj_ = self.get_class_obj_(child_, AbstractDistributionType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.AbstractDistribution = obj_
            obj_.original_tagname_ = 'AbstractDistribution'
        elif nodeName_ == 'UniformDistribution':
            obj_ = UniformDistributionType.factory()
            obj_.build(child_)
            self.AbstractDistribution = obj_
            obj_.original_tagname_ = 'UniformDistribution'
        elif nodeName_ == 'NormalDistribution':
            obj_ = NormalDistributionType.factory()
            obj_.build(child_)
            self.AbstractDistribution = obj_
            obj_.original_tagname_ = 'NormalDistribution'
        elif nodeName_ == 'PoissonDistribution':
            obj_ = PoissonDistributionType.factory()
            obj_.build(child_)
            self.AbstractDistribution = obj_
            obj_.original_tagname_ = 'PoissonDistribution'
# end class DelayType


class PopulationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Neuron=None, Layout=None, Projection=None):
        self.original_tagname_ = None
        self.Neuron = Neuron
        self.Layout = Layout
        if Projection is None:
            self.Projection = []
        else:
            self.Projection = Projection
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PopulationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PopulationType.subclass:
            return PopulationType.subclass(*args_, **kwargs_)
        else:
            return PopulationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Neuron(self): return self.Neuron
    def set_Neuron(self, Neuron): self.Neuron = Neuron
    def get_Layout(self): return self.Layout
    def set_Layout(self, Layout): self.Layout = Layout
    def get_Projection(self): return self.Projection
    def set_Projection(self, Projection): self.Projection = Projection
    def add_Projection(self, value): self.Projection.append(value)
    def insert_Projection_at(self, index, value): self.Projection.insert(index, value)
    def replace_Projection_at(self, index, value): self.Projection[index] = value
    def hasContent_(self):
        if (
            self.Neuron is not None or
            self.Layout is not None or
            self.Projection
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='PopulationType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PopulationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='PopulationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='PopulationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='NML:', name_='PopulationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Neuron is not None:
            self.Neuron.export(outfile, level, namespace_, name_='Neuron', pretty_print=pretty_print)
        if self.Layout is not None:
            self.Layout.export(outfile, level, namespace_, name_='Layout', pretty_print=pretty_print)
        for Projection_ in self.Projection:
            Projection_.export(outfile, level, namespace_, name_='Projection', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Neuron':
            obj_ = NeuronType.factory()
            obj_.build(child_)
            self.Neuron = obj_
            obj_.original_tagname_ = 'Neuron'
        elif nodeName_ == 'Layout':
            obj_ = LayoutType.factory()
            obj_.build(child_)
            self.Layout = obj_
            obj_.original_tagname_ = 'Layout'
        elif nodeName_ == 'Projection':
            obj_ = ProjectionType.factory()
            obj_.build(child_)
            self.Projection.append(obj_)
            obj_.original_tagname_ = 'Projection'
# end class PopulationType


class NeuronType(ComponentType):
    subclass = None
    superclass = ComponentType
    def __init__(self, name=None, url=None, Property=None, size=None):
        self.original_tagname_ = None
        super(NeuronType, self).__init__(name, url, Property, )
        self.size = _cast(int, size)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NeuronType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NeuronType.subclass:
            return NeuronType.subclass(*args_, **kwargs_)
        else:
            return NeuronType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def hasContent_(self):
        if (
            super(NeuronType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='NeuronType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NeuronType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='NeuronType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='NeuronType'):
        super(NeuronType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='NeuronType')
        if self.size is not None and 'size' not in already_processed:
            already_processed.add('size')
            outfile.write(' size="%s"' % self.gds_format_integer(self.size, input_name='size'))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='NeuronType', fromsubclass_=False, pretty_print=True):
        super(NeuronType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('size', node)
        if value is not None and 'size' not in already_processed:
            already_processed.add('size')
            try:
                self.size = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        super(NeuronType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(NeuronType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class NeuronType


class ProjectionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dst_population=None, Synapse=None):
        self.original_tagname_ = None
        self.dst_population = _cast(None, dst_population)
        if Synapse is None:
            self.Synapse = []
        else:
            self.Synapse = Synapse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ProjectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ProjectionType.subclass:
            return ProjectionType.subclass(*args_, **kwargs_)
        else:
            return ProjectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Synapse(self): return self.Synapse
    def set_Synapse(self, Synapse): self.Synapse = Synapse
    def add_Synapse(self, value): self.Synapse.append(value)
    def insert_Synapse_at(self, index, value): self.Synapse.insert(index, value)
    def replace_Synapse_at(self, index, value): self.Synapse[index] = value
    def get_dst_population(self): return self.dst_population
    def set_dst_population(self, dst_population): self.dst_population = dst_population
    def hasContent_(self):
        if (
            self.Synapse
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='ProjectionType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProjectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='ProjectionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='ProjectionType'):
        if self.dst_population is not None and 'dst_population' not in already_processed:
            already_processed.add('dst_population')
            outfile.write(' dst_population=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.dst_population), input_name='dst_population')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='ProjectionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Synapse_ in self.Synapse:
            Synapse_.export(outfile, level, namespace_, name_='Synapse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dst_population', node)
        if value is not None and 'dst_population' not in already_processed:
            already_processed.add('dst_population')
            self.dst_population = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Synapse':
            obj_ = SynapseType.factory()
            obj_.build(child_)
            self.Synapse.append(obj_)
            obj_.original_tagname_ = 'Synapse'
# end class ProjectionType


class SynapseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AbstractConnection=None, WeightUpdate=None, PostSynapse=None):
        self.original_tagname_ = None
        self.AbstractConnection = AbstractConnection
        self.WeightUpdate = WeightUpdate
        self.PostSynapse = PostSynapse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SynapseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SynapseType.subclass:
            return SynapseType.subclass(*args_, **kwargs_)
        else:
            return SynapseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AbstractConnection(self): return self.AbstractConnection
    def set_AbstractConnection(self, AbstractConnection): self.AbstractConnection = AbstractConnection
    def get_WeightUpdate(self): return self.WeightUpdate
    def set_WeightUpdate(self, WeightUpdate): self.WeightUpdate = WeightUpdate
    def get_PostSynapse(self): return self.PostSynapse
    def set_PostSynapse(self, PostSynapse): self.PostSynapse = PostSynapse
    def hasContent_(self):
        if (
            self.AbstractConnection is not None or
            self.WeightUpdate is not None or
            self.PostSynapse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='SynapseType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SynapseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='SynapseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='SynapseType'):
        pass
    def exportChildren(self, outfile, level, namespace_='NML:', name_='SynapseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AbstractConnection is not None:
            self.AbstractConnection.export(outfile, level, namespace_, name_='AbstractConnection', pretty_print=pretty_print)
        if self.WeightUpdate is not None:
            self.WeightUpdate.export(outfile, level, namespace_, name_='WeightUpdate', pretty_print=pretty_print)
        if self.PostSynapse is not None:
            self.PostSynapse.export(outfile, level, namespace_, name_='PostSynapse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AbstractConnection':
            class_obj_ = self.get_class_obj_(child_, AbstractConnectionType)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.AbstractConnection = obj_
            obj_.original_tagname_ = 'AbstractConnection'
        elif nodeName_ == 'ConnectionList':
            obj_ = ConnectionListType.factory()
            obj_.build(child_)
            self.AbstractConnection = obj_
            obj_.original_tagname_ = 'ConnectionList'
        elif nodeName_ == 'OneToOneConnection':
            obj_ = OneToOneConnectionType.factory()
            obj_.build(child_)
            self.AbstractConnection = obj_
            obj_.original_tagname_ = 'OneToOneConnection'
        elif nodeName_ == 'AllToAllConnection':
            obj_ = AllToAllConnectionType.factory()
            obj_.build(child_)
            self.AbstractConnection = obj_
            obj_.original_tagname_ = 'AllToAllConnection'
        elif nodeName_ == 'FixedProbabilityConnection':
            obj_ = FixedProbabilityConnectionType.factory()
            obj_.build(child_)
            self.AbstractConnection = obj_
            obj_.original_tagname_ = 'FixedProbabilityConnection'
        elif nodeName_ == 'WeightUpdate':
            obj_ = WeightUpdateType.factory()
            obj_.build(child_)
            self.WeightUpdate = obj_
            obj_.original_tagname_ = 'WeightUpdate'
        elif nodeName_ == 'PostSynapse':
            obj_ = PostSynapseType.factory()
            obj_.build(child_)
            self.PostSynapse = obj_
            obj_.original_tagname_ = 'PostSynapse'
# end class SynapseType


class WeightUpdateType(ComponentType):
    subclass = None
    superclass = ComponentType
    def __init__(self, name=None, url=None, Property=None, input_src_port=None, input_dst_port=None, feedback_src_port=None, feedback_dst_port=None):
        self.original_tagname_ = None
        super(WeightUpdateType, self).__init__(name, url, Property, )
        self.input_src_port = _cast(None, input_src_port)
        self.input_dst_port = _cast(None, input_dst_port)
        self.feedback_src_port = _cast(None, feedback_src_port)
        self.feedback_dst_port = _cast(None, feedback_dst_port)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, WeightUpdateType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if WeightUpdateType.subclass:
            return WeightUpdateType.subclass(*args_, **kwargs_)
        else:
            return WeightUpdateType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_input_src_port(self): return self.input_src_port
    def set_input_src_port(self, input_src_port): self.input_src_port = input_src_port
    def get_input_dst_port(self): return self.input_dst_port
    def set_input_dst_port(self, input_dst_port): self.input_dst_port = input_dst_port
    def get_feedback_src_port(self): return self.feedback_src_port
    def set_feedback_src_port(self, feedback_src_port): self.feedback_src_port = feedback_src_port
    def get_feedback_dst_port(self): return self.feedback_dst_port
    def set_feedback_dst_port(self, feedback_dst_port): self.feedback_dst_port = feedback_dst_port
    def hasContent_(self):
        if (
            super(WeightUpdateType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='WeightUpdateType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='WeightUpdateType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='WeightUpdateType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='WeightUpdateType'):
        super(WeightUpdateType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='WeightUpdateType')
        if self.input_src_port is not None and 'input_src_port' not in already_processed:
            already_processed.add('input_src_port')
            outfile.write(' input_src_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.input_src_port), input_name='input_src_port')), ))
        if self.input_dst_port is not None and 'input_dst_port' not in already_processed:
            already_processed.add('input_dst_port')
            outfile.write(' input_dst_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.input_dst_port), input_name='input_dst_port')), ))
        if self.feedback_src_port is not None and 'feedback_src_port' not in already_processed:
            already_processed.add('feedback_src_port')
            outfile.write(' feedback_src_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.feedback_src_port), input_name='feedback_src_port')), ))
        if self.feedback_dst_port is not None and 'feedback_dst_port' not in already_processed:
            already_processed.add('feedback_dst_port')
            outfile.write(' feedback_dst_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.feedback_dst_port), input_name='feedback_dst_port')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='WeightUpdateType', fromsubclass_=False, pretty_print=True):
        super(WeightUpdateType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('input_src_port', node)
        if value is not None and 'input_src_port' not in already_processed:
            already_processed.add('input_src_port')
            self.input_src_port = value
        value = find_attr_value_('input_dst_port', node)
        if value is not None and 'input_dst_port' not in already_processed:
            already_processed.add('input_dst_port')
            self.input_dst_port = value
        value = find_attr_value_('feedback_src_port', node)
        if value is not None and 'feedback_src_port' not in already_processed:
            already_processed.add('feedback_src_port')
            self.feedback_src_port = value
        value = find_attr_value_('feedback_dst_port', node)
        if value is not None and 'feedback_dst_port' not in already_processed:
            already_processed.add('feedback_dst_port')
            self.feedback_dst_port = value
        super(WeightUpdateType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(WeightUpdateType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class WeightUpdateType


class PostSynapseType(ComponentType):
    subclass = None
    superclass = ComponentType
    def __init__(self, name=None, url=None, Property=None, input_src_port=None, input_dst_port=None, output_src_port=None, output_dst_port=None):
        self.original_tagname_ = None
        super(PostSynapseType, self).__init__(name, url, Property, )
        self.input_src_port = _cast(None, input_src_port)
        self.input_dst_port = _cast(None, input_dst_port)
        self.output_src_port = _cast(None, output_src_port)
        self.output_dst_port = _cast(None, output_dst_port)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PostSynapseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PostSynapseType.subclass:
            return PostSynapseType.subclass(*args_, **kwargs_)
        else:
            return PostSynapseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_input_src_port(self): return self.input_src_port
    def set_input_src_port(self, input_src_port): self.input_src_port = input_src_port
    def get_input_dst_port(self): return self.input_dst_port
    def set_input_dst_port(self, input_dst_port): self.input_dst_port = input_dst_port
    def get_output_src_port(self): return self.output_src_port
    def set_output_src_port(self, output_src_port): self.output_src_port = output_src_port
    def get_output_dst_port(self): return self.output_dst_port
    def set_output_dst_port(self, output_dst_port): self.output_dst_port = output_dst_port
    def hasContent_(self):
        if (
            super(PostSynapseType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='PostSynapseType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PostSynapseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='PostSynapseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='PostSynapseType'):
        super(PostSynapseType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='PostSynapseType')
        if self.input_src_port is not None and 'input_src_port' not in already_processed:
            already_processed.add('input_src_port')
            outfile.write(' input_src_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.input_src_port), input_name='input_src_port')), ))
        if self.input_dst_port is not None and 'input_dst_port' not in already_processed:
            already_processed.add('input_dst_port')
            outfile.write(' input_dst_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.input_dst_port), input_name='input_dst_port')), ))
        if self.output_src_port is not None and 'output_src_port' not in already_processed:
            already_processed.add('output_src_port')
            outfile.write(' output_src_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.output_src_port), input_name='output_src_port')), ))
        if self.output_dst_port is not None and 'output_dst_port' not in already_processed:
            already_processed.add('output_dst_port')
            outfile.write(' output_dst_port=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.output_dst_port), input_name='output_dst_port')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='PostSynapseType', fromsubclass_=False, pretty_print=True):
        super(PostSynapseType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('input_src_port', node)
        if value is not None and 'input_src_port' not in already_processed:
            already_processed.add('input_src_port')
            self.input_src_port = value
        value = find_attr_value_('input_dst_port', node)
        if value is not None and 'input_dst_port' not in already_processed:
            already_processed.add('input_dst_port')
            self.input_dst_port = value
        value = find_attr_value_('output_src_port', node)
        if value is not None and 'output_src_port' not in already_processed:
            already_processed.add('output_src_port')
            self.output_src_port = value
        value = find_attr_value_('output_dst_port', node)
        if value is not None and 'output_dst_port' not in already_processed:
            already_processed.add('output_dst_port')
            self.output_dst_port = value
        super(PostSynapseType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(PostSynapseType, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class PostSynapseType


class LayoutType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, url=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.url = _cast(None, url)
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, LayoutType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if LayoutType.subclass:
            return LayoutType.subclass(*args_, **kwargs_)
        else:
            return LayoutType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_url(self): return self.url
    def set_url(self, url): self.url = url
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='NML:', name_='LayoutType', namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LayoutType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='NML:', name_='LayoutType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='NML:', name_='LayoutType'):
        if self.url is not None and 'url' not in already_processed:
            already_processed.add('url')
            outfile.write(' url=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.url), input_name='url')), ))
    def exportChildren(self, outfile, level, namespace_='NML:', name_='LayoutType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('url', node)
        if value is not None and 'url' not in already_processed:
            already_processed.add('url')
            self.url = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        obj_ = self.gds_build_any(child_, 'LayoutType')
        if obj_ is not None:
            self.set_anytypeobjs_(obj_)
# end class LayoutType


GDSClassesMapping = {
    'AbstractConnection': AbstractConnectionType,
    'AbstractDistribution': AbstractDistributionType,
    'AbstractValue': AbstractValueType,
    'AllToAllConnection': AllToAllConnectionType,
    'Component': ComponentType,
    'Connection': ConnectionType,
    'ConnectionList': ConnectionListType,
    'Delay': DelayType,
    'FixedProbabilityConnection': FixedProbabilityConnectionType,
    'FixedValue': FixedValueType,
    'Layout': LayoutType,
    'Neuron': NeuronType,
    'NormalDistribution': NormalDistributionType,
    'OneToOneConnection': OneToOneConnectionType,
    'PoissonDistribution': PoissonDistributionType,
    'Population': PopulationType,
    'PostSynapse': PostSynapseType,
    'Projection': ProjectionType,
    'Property': PropertyType,
    'SpineML': SpineMLType,
    'Synapse': SynapseType,
    'UniformDistribution': UniformDistributionType,
    'Value': ValueType,
    'ValueList': ValueListType,
    'WeightUpdate': WeightUpdateType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SpineMLType'
        rootClass = SpineMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SpineMLType'
        rootClass = SpineMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SpineMLType'
        rootClass = SpineMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'SpineMLType'
        rootClass = SpineMLType
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from network import *\n\n')
        sys.stdout.write('import network as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AbstractConnectionType",
    "AbstractDistributionType",
    "AbstractValueType",
    "AllToAllConnectionType",
    "ComponentType",
    "ConnectionListType",
    "ConnectionType",
    "DelayType",
    "FixedProbabilityConnectionType",
    "FixedValueType",
    "GroupType",
    "LayoutType",
    "NeuronType",
    "NormalDistributionType",
    "OneToOneConnectionType",
    "PoissonDistributionType",
    "PopulationType",
    "PostSynapseType",
    "ProjectionType",
    "PropertyType",
    "SpineMLType",
    "SynapseType",
    "UniformDistributionType",
    "ValueListType",
    "ValueType",
    "WeightUpdateType"
]
