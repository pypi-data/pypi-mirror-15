#!/usr/bin/env python3


import argparse
import json

from leviathan.cooler import Cooler


def _color(arg):
    try:
        result = tuple(int(c) for c in arg.split(','))
        if len(result) != 3:
            raise ValueError
    except ValueError:
        raise argparse.ArgumentTypeError("colors must be in r,g,b format")
    else:
        return result


def _color_mode(arg):
    if arg.lower() == 'normal':
        return Cooler.COLOR_MODE_NORMAL
    if arg.lower() == 'alternating':
        return Cooler.COLOR_MODE_ALTERNATING
    if arg.lower() == 'blinking':
        return Cooler.COLOR_MODE_BLINKING
    if arg.lower() == 'off':
        return Cooler.COLOR_MODE_OFF

    raise argparse.ArgumentTypeError("color mode must be normal, alternating, "
                                     "blinking or off")


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument('-s', '--speed', dest='speed', type=int, default=50,
                        help="Speed between 30 and 100 with steps of 5")
    parser.add_argument('-c', '--color', dest='color', type=_color,
                        default=(255, 0, 0), help="Color in r,g,b format")
    parser.add_argument('-a', '--alt-color', dest='alt_color', type=_color,
                        default=(0, 0, 255),
                        help="Alternate color in r,g,b format")
    parser.add_argument('-i', '--interval', dest='interval', type=int,
                        default=1, help="Alternating/blinking interval")
    parser.add_argument('-m', '--color-mode', dest='color_mode',
                        type=_color_mode, default=Cooler.COLOR_MODE_NORMAL,
                        help="Color mode; normal, alternating, blinking or off")

    parser.add_argument('-q', '--quiet', dest='quiet', action='store_true',
                        help="Don't print cooler status")

    args = parser.parse_args()

    cooler = Cooler(0x2433, 0xb200)

    cooler.speed = args.speed
    cooler.color = args.color
    cooler.alternate_color = args.alt_color
    cooler.interval = args.interval
    cooler.color_mode = args.color_mode

    status = cooler.update()
    if not args.quiet:
        print(json.dumps(status, sort_keys=True, indent=4))

if __name__ == '__main__':
    main()
