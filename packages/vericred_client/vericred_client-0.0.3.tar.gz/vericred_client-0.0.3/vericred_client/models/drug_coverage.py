# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DrugCoverage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DrugCoverage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'plan_id': 'str',
            'drug_package_id': 'str',
            'tier': 'str',
            'quantity_limit': 'bool',
            'prior_authorization': 'bool',
            'step_therapy': 'bool'
        }

        self.attribute_map = {
            'plan_id': 'plan_id',
            'drug_package_id': 'drug_package_id',
            'tier': 'tier',
            'quantity_limit': 'quantity_limit',
            'prior_authorization': 'prior_authorization',
            'step_therapy': 'step_therapy'
        }

        self._plan_id = None
        self._drug_package_id = None
        self._tier = None
        self._quantity_limit = None
        self._prior_authorization = None
        self._step_therapy = None

    @property
    def plan_id(self):
        """
        Gets the plan_id of this DrugCoverage.
        Health Insurance Oversight System id

        :return: The plan_id of this DrugCoverage.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """
        Sets the plan_id of this DrugCoverage.
        Health Insurance Oversight System id

        :param plan_id: The plan_id of this DrugCoverage.
        :type: str
        """
        self._plan_id = plan_id

    @property
    def drug_package_id(self):
        """
        Gets the drug_package_id of this DrugCoverage.
        NDC package code

        :return: The drug_package_id of this DrugCoverage.
        :rtype: str
        """
        return self._drug_package_id

    @drug_package_id.setter
    def drug_package_id(self, drug_package_id):
        """
        Sets the drug_package_id of this DrugCoverage.
        NDC package code

        :param drug_package_id: The drug_package_id of this DrugCoverage.
        :type: str
        """
        self._drug_package_id = drug_package_id

    @property
    def tier(self):
        """
        Gets the tier of this DrugCoverage.
        Tier Name

        :return: The tier of this DrugCoverage.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """
        Sets the tier of this DrugCoverage.
        Tier Name

        :param tier: The tier of this DrugCoverage.
        :type: str
        """
        self._tier = tier

    @property
    def quantity_limit(self):
        """
        Gets the quantity_limit of this DrugCoverage.
        Quantity limit exists

        :return: The quantity_limit of this DrugCoverage.
        :rtype: bool
        """
        return self._quantity_limit

    @quantity_limit.setter
    def quantity_limit(self, quantity_limit):
        """
        Sets the quantity_limit of this DrugCoverage.
        Quantity limit exists

        :param quantity_limit: The quantity_limit of this DrugCoverage.
        :type: bool
        """
        self._quantity_limit = quantity_limit

    @property
    def prior_authorization(self):
        """
        Gets the prior_authorization of this DrugCoverage.
        Prior authorization required

        :return: The prior_authorization of this DrugCoverage.
        :rtype: bool
        """
        return self._prior_authorization

    @prior_authorization.setter
    def prior_authorization(self, prior_authorization):
        """
        Sets the prior_authorization of this DrugCoverage.
        Prior authorization required

        :param prior_authorization: The prior_authorization of this DrugCoverage.
        :type: bool
        """
        self._prior_authorization = prior_authorization

    @property
    def step_therapy(self):
        """
        Gets the step_therapy of this DrugCoverage.
        Step Treatment required

        :return: The step_therapy of this DrugCoverage.
        :rtype: bool
        """
        return self._step_therapy

    @step_therapy.setter
    def step_therapy(self, step_therapy):
        """
        Sets the step_therapy of this DrugCoverage.
        Step Treatment required

        :param step_therapy: The step_therapy of this DrugCoverage.
        :type: bool
        """
        self._step_therapy = step_therapy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

