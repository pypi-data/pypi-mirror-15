# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Graphobject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Graphobject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'instanceid': 'str',
            'context': 'object',
            'definition': 'object',
            'tasks': 'object',
            'node': 'Node'
        }

        self.attribute_map = {
            'id': 'id',
            'instanceid': 'instanceid',
            'context': 'context',
            'definition': 'definition',
            'tasks': 'tasks',
            'node': 'node'
        }

        self._id = None
        self._instanceid = None
        self._context = None
        self._definition = None
        self._tasks = None
        self._node = None

    @property
    def id(self):
        """
        Gets the id of this Graphobject.


        :return: The id of this Graphobject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Graphobject.


        :param id: The id of this Graphobject.
        :type: str
        """
        self._id = id

    @property
    def instanceid(self):
        """
        Gets the instanceid of this Graphobject.


        :return: The instanceid of this Graphobject.
        :rtype: str
        """
        return self._instanceid

    @instanceid.setter
    def instanceid(self, instanceid):
        """
        Sets the instanceid of this Graphobject.


        :param instanceid: The instanceid of this Graphobject.
        :type: str
        """
        self._instanceid = instanceid

    @property
    def context(self):
        """
        Gets the context of this Graphobject.


        :return: The context of this Graphobject.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this Graphobject.


        :param context: The context of this Graphobject.
        :type: object
        """
        self._context = context

    @property
    def definition(self):
        """
        Gets the definition of this Graphobject.


        :return: The definition of this Graphobject.
        :rtype: object
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """
        Sets the definition of this Graphobject.


        :param definition: The definition of this Graphobject.
        :type: object
        """
        self._definition = definition

    @property
    def tasks(self):
        """
        Gets the tasks of this Graphobject.


        :return: The tasks of this Graphobject.
        :rtype: object
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """
        Sets the tasks of this Graphobject.


        :param tasks: The tasks of this Graphobject.
        :type: object
        """
        self._tasks = tasks

    @property
    def node(self):
        """
        Gets the node of this Graphobject.


        :return: The node of this Graphobject.
        :rtype: Node
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this Graphobject.


        :param node: The node of this Graphobject.
        :type: Node
        """
        self._node = node

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

