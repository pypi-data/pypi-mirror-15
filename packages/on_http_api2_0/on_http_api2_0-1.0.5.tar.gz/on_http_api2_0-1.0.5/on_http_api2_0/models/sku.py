# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Sku(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Sku - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'rules': 'object',
            'nodes': 'list[Node]',
            'discovery_graph_name': 'str',
            'discovery_graph_options': 'object'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'rules': 'rules',
            'nodes': 'nodes',
            'discovery_graph_name': 'discoveryGraphName',
            'discovery_graph_options': 'discoveryGraphOptions'
        }

        self._id = None
        self._name = None
        self._rules = None
        self._nodes = None
        self._discovery_graph_name = None
        self._discovery_graph_options = None

    @property
    def id(self):
        """
        Gets the id of this Sku.


        :return: The id of this Sku.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Sku.


        :param id: The id of this Sku.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Sku.


        :return: The name of this Sku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Sku.


        :param name: The name of this Sku.
        :type: str
        """
        self._name = name

    @property
    def rules(self):
        """
        Gets the rules of this Sku.


        :return: The rules of this Sku.
        :rtype: object
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this Sku.


        :param rules: The rules of this Sku.
        :type: object
        """
        self._rules = rules

    @property
    def nodes(self):
        """
        Gets the nodes of this Sku.


        :return: The nodes of this Sku.
        :rtype: list[Node]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """
        Sets the nodes of this Sku.


        :param nodes: The nodes of this Sku.
        :type: list[Node]
        """
        self._nodes = nodes

    @property
    def discovery_graph_name(self):
        """
        Gets the discovery_graph_name of this Sku.


        :return: The discovery_graph_name of this Sku.
        :rtype: str
        """
        return self._discovery_graph_name

    @discovery_graph_name.setter
    def discovery_graph_name(self, discovery_graph_name):
        """
        Sets the discovery_graph_name of this Sku.


        :param discovery_graph_name: The discovery_graph_name of this Sku.
        :type: str
        """
        self._discovery_graph_name = discovery_graph_name

    @property
    def discovery_graph_options(self):
        """
        Gets the discovery_graph_options of this Sku.


        :return: The discovery_graph_options of this Sku.
        :rtype: object
        """
        return self._discovery_graph_options

    @discovery_graph_options.setter
    def discovery_graph_options(self, discovery_graph_options):
        """
        Sets the discovery_graph_options of this Sku.


        :param discovery_graph_options: The discovery_graph_options of this Sku.
        :type: object
        """
        self._discovery_graph_options = discovery_graph_options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

