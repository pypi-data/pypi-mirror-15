# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Lease(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Lease - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mac': 'str',
            'ip_address': 'str',
            'reservation_timer': 'int',
            'reservation_expires_at': 'int',
            'renewal_timer': 'int',
            'rebinding_timer': 'int',
            'expiration_timer': 'int',
            'renewal_expires_at': 'int',
            'rebind_expires_at': 'int',
            'lease_expires_at': 'int',
            'bound_flag': 'bool',
            'reserved_flag': 'bool',
            'reserve_timer': 'str'
        }

        self.attribute_map = {
            'mac': 'mac',
            'ip_address': 'ipAddress',
            'reservation_timer': 'reservationTimer',
            'reservation_expires_at': 'reservationExpiresAt',
            'renewal_timer': 'renewalTimer',
            'rebinding_timer': 'rebindingTimer',
            'expiration_timer': 'expirationTimer',
            'renewal_expires_at': 'renewalExpiresAt',
            'rebind_expires_at': 'rebindExpiresAt',
            'lease_expires_at': 'leaseExpiresAt',
            'bound_flag': 'boundFlag',
            'reserved_flag': 'reservedFlag',
            'reserve_timer': 'reserveTimer'
        }

        self._mac = None
        self._ip_address = None
        self._reservation_timer = None
        self._reservation_expires_at = None
        self._renewal_timer = None
        self._rebinding_timer = None
        self._expiration_timer = None
        self._renewal_expires_at = None
        self._rebind_expires_at = None
        self._lease_expires_at = None
        self._bound_flag = None
        self._reserved_flag = None
        self._reserve_timer = None

    @property
    def mac(self):
        """
        Gets the mac of this Lease.


        :return: The mac of this Lease.
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """
        Sets the mac of this Lease.


        :param mac: The mac of this Lease.
        :type: str
        """
        self._mac = mac

    @property
    def ip_address(self):
        """
        Gets the ip_address of this Lease.


        :return: The ip_address of this Lease.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """
        Sets the ip_address of this Lease.


        :param ip_address: The ip_address of this Lease.
        :type: str
        """
        self._ip_address = ip_address

    @property
    def reservation_timer(self):
        """
        Gets the reservation_timer of this Lease.


        :return: The reservation_timer of this Lease.
        :rtype: int
        """
        return self._reservation_timer

    @reservation_timer.setter
    def reservation_timer(self, reservation_timer):
        """
        Sets the reservation_timer of this Lease.


        :param reservation_timer: The reservation_timer of this Lease.
        :type: int
        """
        self._reservation_timer = reservation_timer

    @property
    def reservation_expires_at(self):
        """
        Gets the reservation_expires_at of this Lease.


        :return: The reservation_expires_at of this Lease.
        :rtype: int
        """
        return self._reservation_expires_at

    @reservation_expires_at.setter
    def reservation_expires_at(self, reservation_expires_at):
        """
        Sets the reservation_expires_at of this Lease.


        :param reservation_expires_at: The reservation_expires_at of this Lease.
        :type: int
        """
        self._reservation_expires_at = reservation_expires_at

    @property
    def renewal_timer(self):
        """
        Gets the renewal_timer of this Lease.


        :return: The renewal_timer of this Lease.
        :rtype: int
        """
        return self._renewal_timer

    @renewal_timer.setter
    def renewal_timer(self, renewal_timer):
        """
        Sets the renewal_timer of this Lease.


        :param renewal_timer: The renewal_timer of this Lease.
        :type: int
        """
        self._renewal_timer = renewal_timer

    @property
    def rebinding_timer(self):
        """
        Gets the rebinding_timer of this Lease.


        :return: The rebinding_timer of this Lease.
        :rtype: int
        """
        return self._rebinding_timer

    @rebinding_timer.setter
    def rebinding_timer(self, rebinding_timer):
        """
        Sets the rebinding_timer of this Lease.


        :param rebinding_timer: The rebinding_timer of this Lease.
        :type: int
        """
        self._rebinding_timer = rebinding_timer

    @property
    def expiration_timer(self):
        """
        Gets the expiration_timer of this Lease.


        :return: The expiration_timer of this Lease.
        :rtype: int
        """
        return self._expiration_timer

    @expiration_timer.setter
    def expiration_timer(self, expiration_timer):
        """
        Sets the expiration_timer of this Lease.


        :param expiration_timer: The expiration_timer of this Lease.
        :type: int
        """
        self._expiration_timer = expiration_timer

    @property
    def renewal_expires_at(self):
        """
        Gets the renewal_expires_at of this Lease.


        :return: The renewal_expires_at of this Lease.
        :rtype: int
        """
        return self._renewal_expires_at

    @renewal_expires_at.setter
    def renewal_expires_at(self, renewal_expires_at):
        """
        Sets the renewal_expires_at of this Lease.


        :param renewal_expires_at: The renewal_expires_at of this Lease.
        :type: int
        """
        self._renewal_expires_at = renewal_expires_at

    @property
    def rebind_expires_at(self):
        """
        Gets the rebind_expires_at of this Lease.


        :return: The rebind_expires_at of this Lease.
        :rtype: int
        """
        return self._rebind_expires_at

    @rebind_expires_at.setter
    def rebind_expires_at(self, rebind_expires_at):
        """
        Sets the rebind_expires_at of this Lease.


        :param rebind_expires_at: The rebind_expires_at of this Lease.
        :type: int
        """
        self._rebind_expires_at = rebind_expires_at

    @property
    def lease_expires_at(self):
        """
        Gets the lease_expires_at of this Lease.


        :return: The lease_expires_at of this Lease.
        :rtype: int
        """
        return self._lease_expires_at

    @lease_expires_at.setter
    def lease_expires_at(self, lease_expires_at):
        """
        Sets the lease_expires_at of this Lease.


        :param lease_expires_at: The lease_expires_at of this Lease.
        :type: int
        """
        self._lease_expires_at = lease_expires_at

    @property
    def bound_flag(self):
        """
        Gets the bound_flag of this Lease.


        :return: The bound_flag of this Lease.
        :rtype: bool
        """
        return self._bound_flag

    @bound_flag.setter
    def bound_flag(self, bound_flag):
        """
        Sets the bound_flag of this Lease.


        :param bound_flag: The bound_flag of this Lease.
        :type: bool
        """
        self._bound_flag = bound_flag

    @property
    def reserved_flag(self):
        """
        Gets the reserved_flag of this Lease.


        :return: The reserved_flag of this Lease.
        :rtype: bool
        """
        return self._reserved_flag

    @reserved_flag.setter
    def reserved_flag(self, reserved_flag):
        """
        Sets the reserved_flag of this Lease.


        :param reserved_flag: The reserved_flag of this Lease.
        :type: bool
        """
        self._reserved_flag = reserved_flag

    @property
    def reserve_timer(self):
        """
        Gets the reserve_timer of this Lease.


        :return: The reserve_timer of this Lease.
        :rtype: str
        """
        return self._reserve_timer

    @reserve_timer.setter
    def reserve_timer(self, reserve_timer):
        """
        Sets the reserve_timer of this Lease.


        :param reserve_timer: The reserve_timer of this Lease.
        :type: str
        """
        self._reserve_timer = reserve_timer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

