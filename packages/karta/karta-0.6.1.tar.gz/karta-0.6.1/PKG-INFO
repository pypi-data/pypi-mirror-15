Metadata-Version: 1.1
Name: karta
Version: 0.6.1
Summary: Geospatial analysis in Python
Home-page: http://www.fortyninemaps.com/karta.html
Author: Nat Wilson
Author-email: njwilson23@gmail.com
License: MIT License
Description: 
        *Karta* streamlines processing raster and vector geographical data in Python.
        
        Create vector geometries:
        
        .. code:: python
        
            point = Point((-130.0, 52.0), crs=LonLatWGS84)
        
            line = read_geojson("linedata.json")
        
            polygon = Polygon([(-515005.78, -1301130.53),
                               (-579174.89, -1282271.94),
                               (-542977.83, -1221147.82),
                               (-437864.05, -1251641.55),
                               (-438160.72, -1252421.48),
                               (-437961.28, -1285314.00)],
                               crs=NSIDCNorth)
        
        Perform simple queries:
        
        .. code:: python
        
            point2 = Point((-25.0, 48.0), crs=LonLatWGS84)
            point.distance(point2)          # Distance in geographical units
        
            line.intersects(polygon)        # True or False
        
            ch = polygon.convex_hull()      # Returns a new polygon
            ch.to_shapefile("poly.shp")
        
        Work with raster data:
        
        .. code:: python
        
            grid = read_gtiff("landsat_scene.tif")  # Leverages GDAL
        
            grid.profile(line)              # Collect data along a line
        
            grid.resample(500.0, 500.0)     # Return a grid resampled at a new resolution
        
        *Karta* works with Python 2 and 3. Suggestions, bug reports, test cases, and
        pull requests are welcome.
        
        DOCUMENTATION
        -------------
        
        See the `webpage <http://www.fortyninemaps.com/karta.html>`__ and the `manual
        <http://www.fortyninemaps.com/kartadocs/karta-manual.html>`__.
        
        The manual can also be built offline using Sphinx by running ``make`` from the
        ``doc/`` subdirectory. The documentation is built from source code docstrings
        and the example IPython notebooks, which are also reproduced in the `Wiki
        <https://github.com/fortyninemaps/karta/wiki/Tutorial>`__. Building the
        documentation requires `Sphinx <http://sphinx-doc.org/>`__, `alabaster
        <https://github.com/bitprophet/alabaster>`__ and `numpydoc
        <https://github.com/numpy/numpydoc>`__.
        
        DEPENDENCIES
        ------------
        
        Required
        ~~~~~~~~
        
        - numpy
        - blosc
        - GDAL
        - pyproj
        
        When installing from PyPI, C source code is provided. When building from
        sources, Cython is required.
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: GIS
Classifier: License :: OSI Approved :: MIT License
