# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_littlecms', [dirname(__file__)])
        except ImportError:
            import _littlecms
            return _littlecms
        if fp is not None:
            try:
                _mod = imp.load_module('_littlecms', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _littlecms = swig_import_helper()
    del swig_import_helper
else:
    import _littlecms
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def void_to_pipeline(x: 'void *') -> "cmsPipeline *":
    return _littlecms.void_to_pipeline(x)
void_to_pipeline = _littlecms.void_to_pipeline

def void_to_clut_data(x: 'void *') -> "_cmsStageCLutData *":
    return _littlecms.void_to_clut_data(x)
void_to_clut_data = _littlecms.void_to_clut_data
class uint64Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint64Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint64Array, name)
    __repr__ = _swig_repr
    __len__ = lambda self: self.nelements

    def __init__(self, nelements: 'size_t'):
        this = _littlecms.new_uint64Array(nelements)
        self.nelements = nelements
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_uint64Array
    __del__ = lambda self: None

    def __iter__(self):
        self.current_iter = 0
        return self
    def __next__(self):
        if self.current_iter >= self.nelements:
            raise StopIteration
        self.current_iter += 1
        return self.current_iter - 1

    def __getitem__(self, index: 'size_t') -> "unsigned long long":
        return _littlecms.uint64Array___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'unsigned long long') -> "void":
        return _littlecms.uint64Array___setitem__(self, index, value)

    def cast(self) -> "unsigned long long *":
        return _littlecms.uint64Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _littlecms.uint64Array_frompointer
    if _newclass:
        frompointer = staticmethod(_littlecms.uint64Array_frompointer)
uint64Array_swigregister = _littlecms.uint64Array_swigregister
uint64Array_swigregister(uint64Array)

def uint64Array_frompointer(t: 'unsigned long long *') -> "uint64Array *":
    return _littlecms.uint64Array_frompointer(t)
uint64Array_frompointer = _littlecms.uint64Array_frompointer

class uint32Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32Array, name)
    __repr__ = _swig_repr
    __len__ = lambda self: self.nelements

    def __init__(self, nelements: 'size_t'):
        this = _littlecms.new_uint32Array(nelements)
        self.nelements = nelements
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_uint32Array
    __del__ = lambda self: None

    def __iter__(self):
        self.current_iter = 0
        return self
    def __next__(self):
        if self.current_iter >= self.nelements:
            raise StopIteration
        self.current_iter += 1
        return self.current_iter - 1

    def __getitem__(self, index: 'size_t') -> "unsigned int":
        return _littlecms.uint32Array___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'unsigned int') -> "void":
        return _littlecms.uint32Array___setitem__(self, index, value)

    def cast(self) -> "unsigned int *":
        return _littlecms.uint32Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _littlecms.uint32Array_frompointer
    if _newclass:
        frompointer = staticmethod(_littlecms.uint32Array_frompointer)
uint32Array_swigregister = _littlecms.uint32Array_swigregister
uint32Array_swigregister(uint32Array)

def uint32Array_frompointer(t: 'unsigned int *') -> "uint32Array *":
    return _littlecms.uint32Array_frompointer(t)
uint32Array_frompointer = _littlecms.uint32Array_frompointer

class uint16Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint16Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint16Array, name)
    __repr__ = _swig_repr
    __len__ = lambda self: self.nelements

    def __init__(self, nelements: 'size_t'):
        this = _littlecms.new_uint16Array(nelements)
        self.nelements = nelements
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_uint16Array
    __del__ = lambda self: None

    def __iter__(self):
        self.current_iter = 0
        return self
    def __next__(self):
        if self.current_iter >= self.nelements:
            raise StopIteration
        self.current_iter += 1
        return self.current_iter - 1

    def __getitem__(self, index: 'size_t') -> "unsigned short":
        return _littlecms.uint16Array___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'unsigned short') -> "void":
        return _littlecms.uint16Array___setitem__(self, index, value)

    def cast(self) -> "unsigned short *":
        return _littlecms.uint16Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _littlecms.uint16Array_frompointer
    if _newclass:
        frompointer = staticmethod(_littlecms.uint16Array_frompointer)
uint16Array_swigregister = _littlecms.uint16Array_swigregister
uint16Array_swigregister(uint16Array)

def uint16Array_frompointer(t: 'unsigned short *') -> "uint16Array *":
    return _littlecms.uint16Array_frompointer(t)
uint16Array_frompointer = _littlecms.uint16Array_frompointer

class uint8Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint8Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint8Array, name)
    __repr__ = _swig_repr
    __len__ = lambda self: self.nelements

    def __init__(self, nelements: 'size_t'):
        this = _littlecms.new_uint8Array(nelements)
        self.nelements = nelements
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_uint8Array
    __del__ = lambda self: None

    def __iter__(self):
        self.current_iter = 0
        return self
    def __next__(self):
        if self.current_iter >= self.nelements:
            raise StopIteration
        self.current_iter += 1
        return self.current_iter - 1

    def __getitem__(self, index: 'size_t') -> "unsigned char":
        return _littlecms.uint8Array___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'unsigned char') -> "void":
        return _littlecms.uint8Array___setitem__(self, index, value)

    def cast(self) -> "unsigned char *":
        return _littlecms.uint8Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _littlecms.uint8Array_frompointer
    if _newclass:
        frompointer = staticmethod(_littlecms.uint8Array_frompointer)
uint8Array_swigregister = _littlecms.uint8Array_swigregister
uint8Array_swigregister(uint8Array)

def uint8Array_frompointer(t: 'unsigned char *') -> "uint8Array *":
    return _littlecms.uint8Array_frompointer(t)
uint8Array_frompointer = _littlecms.uint8Array_frompointer

class charArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, charArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, charArray, name)
    __repr__ = _swig_repr
    __len__ = lambda self: self.nelements

    def __init__(self, nelements: 'size_t'):
        this = _littlecms.new_charArray(nelements)
        self.nelements = nelements
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_charArray
    __del__ = lambda self: None

    def __iter__(self):
        self.current_iter = 0
        return self
    def __next__(self):
        if self.current_iter >= self.nelements:
            raise StopIteration
        self.current_iter += 1
        return self.current_iter - 1

    def __getitem__(self, index: 'size_t') -> "char":
        return _littlecms.charArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'char') -> "void":
        return _littlecms.charArray___setitem__(self, index, value)

    def cast(self) -> "char *":
        return _littlecms.charArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _littlecms.charArray_frompointer
    if _newclass:
        frompointer = staticmethod(_littlecms.charArray_frompointer)
charArray_swigregister = _littlecms.charArray_swigregister
charArray_swigregister(charArray)

def charArray_frompointer(t: 'char *') -> "charArray *":
    return _littlecms.charArray_frompointer(t)
charArray_frompointer = _littlecms.charArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    __len__ = lambda self: self.nelements

    def __init__(self, nelements: 'size_t'):
        this = _littlecms.new_doubleArray(nelements)
        self.nelements = nelements
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_doubleArray
    __del__ = lambda self: None

    def __iter__(self):
        self.current_iter = 0
        return self
    def __next__(self):
        if self.current_iter >= self.nelements:
            raise StopIteration
        self.current_iter += 1
        return self.current_iter - 1

    def __getitem__(self, index: 'size_t') -> "double":
        return _littlecms.doubleArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'double') -> "void":
        return _littlecms.doubleArray___setitem__(self, index, value)

    def cast(self) -> "double *":
        return _littlecms.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _littlecms.doubleArray_frompointer
    if _newclass:
        frompointer = staticmethod(_littlecms.doubleArray_frompointer)
doubleArray_swigregister = _littlecms.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t: 'double *') -> "doubleArray *":
    return _littlecms.doubleArray_frompointer(t)
doubleArray_frompointer = _littlecms.doubleArray_frompointer


def littlecms_set_error_function(new_context: 'cmsContext') -> "void":
    return _littlecms.littlecms_set_error_function(new_context)
littlecms_set_error_function = _littlecms.littlecms_set_error_function
class sampler_cargo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sampler_cargo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sampler_cargo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["in_dims"] = _littlecms.sampler_cargo_in_dims_set
    __swig_getmethods__["in_dims"] = _littlecms.sampler_cargo_in_dims_get
    if _newclass:
        in_dims = _swig_property(_littlecms.sampler_cargo_in_dims_get, _littlecms.sampler_cargo_in_dims_set)
    __swig_setmethods__["out_dims"] = _littlecms.sampler_cargo_out_dims_set
    __swig_getmethods__["out_dims"] = _littlecms.sampler_cargo_out_dims_get
    if _newclass:
        out_dims = _swig_property(_littlecms.sampler_cargo_out_dims_get, _littlecms.sampler_cargo_out_dims_set)
    __swig_setmethods__["py_in"] = _littlecms.sampler_cargo_py_in_set
    __swig_getmethods__["py_in"] = _littlecms.sampler_cargo_py_in_get
    if _newclass:
        py_in = _swig_property(_littlecms.sampler_cargo_py_in_get, _littlecms.sampler_cargo_py_in_set)
    __swig_setmethods__["py_out"] = _littlecms.sampler_cargo_py_out_set
    __swig_getmethods__["py_out"] = _littlecms.sampler_cargo_py_out_get
    if _newclass:
        py_out = _swig_property(_littlecms.sampler_cargo_py_out_get, _littlecms.sampler_cargo_py_out_set)
    __swig_setmethods__["py_cargo"] = _littlecms.sampler_cargo_py_cargo_set
    __swig_getmethods__["py_cargo"] = _littlecms.sampler_cargo_py_cargo_get
    if _newclass:
        py_cargo = _swig_property(_littlecms.sampler_cargo_py_cargo_get, _littlecms.sampler_cargo_py_cargo_set)

    def __init__(self):
        this = _littlecms.new_sampler_cargo()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_sampler_cargo
    __del__ = lambda self: None
sampler_cargo_swigregister = _littlecms.sampler_cargo_swigregister
sampler_cargo_swigregister(sampler_cargo)


def set_datetime(hProfile: 'cmsHPROFILE', datetime: 'cmsDateTimeNumber') -> "void":
    return _littlecms.set_datetime(hProfile, datetime)
set_datetime = _littlecms.set_datetime

_littlecms.LCMS_VERSION_swigconstant(_littlecms)
LCMS_VERSION = _littlecms.LCMS_VERSION

_littlecms.cmsMAX_PATH_swigconstant(_littlecms)
cmsMAX_PATH = _littlecms.cmsMAX_PATH

_littlecms.FALSE_swigconstant(_littlecms)
FALSE = _littlecms.FALSE

_littlecms.TRUE_swigconstant(_littlecms)
TRUE = _littlecms.TRUE

_littlecms.cmsD50X_swigconstant(_littlecms)
cmsD50X = _littlecms.cmsD50X

_littlecms.cmsD50Y_swigconstant(_littlecms)
cmsD50Y = _littlecms.cmsD50Y

_littlecms.cmsD50Z_swigconstant(_littlecms)
cmsD50Z = _littlecms.cmsD50Z

_littlecms.cmsPERCEPTUAL_BLACK_X_swigconstant(_littlecms)
cmsPERCEPTUAL_BLACK_X = _littlecms.cmsPERCEPTUAL_BLACK_X

_littlecms.cmsPERCEPTUAL_BLACK_Y_swigconstant(_littlecms)
cmsPERCEPTUAL_BLACK_Y = _littlecms.cmsPERCEPTUAL_BLACK_Y

_littlecms.cmsPERCEPTUAL_BLACK_Z_swigconstant(_littlecms)
cmsPERCEPTUAL_BLACK_Z = _littlecms.cmsPERCEPTUAL_BLACK_Z

_littlecms.cmsMagicNumber_swigconstant(_littlecms)
cmsMagicNumber = _littlecms.cmsMagicNumber

_littlecms.lcmsSignature_swigconstant(_littlecms)
lcmsSignature = _littlecms.lcmsSignature

_littlecms.cmsSigChromaticityType_swigconstant(_littlecms)
cmsSigChromaticityType = _littlecms.cmsSigChromaticityType

_littlecms.cmsSigColorantOrderType_swigconstant(_littlecms)
cmsSigColorantOrderType = _littlecms.cmsSigColorantOrderType

_littlecms.cmsSigColorantTableType_swigconstant(_littlecms)
cmsSigColorantTableType = _littlecms.cmsSigColorantTableType

_littlecms.cmsSigCrdInfoType_swigconstant(_littlecms)
cmsSigCrdInfoType = _littlecms.cmsSigCrdInfoType

_littlecms.cmsSigCurveType_swigconstant(_littlecms)
cmsSigCurveType = _littlecms.cmsSigCurveType

_littlecms.cmsSigDataType_swigconstant(_littlecms)
cmsSigDataType = _littlecms.cmsSigDataType

_littlecms.cmsSigDictType_swigconstant(_littlecms)
cmsSigDictType = _littlecms.cmsSigDictType

_littlecms.cmsSigDateTimeType_swigconstant(_littlecms)
cmsSigDateTimeType = _littlecms.cmsSigDateTimeType

_littlecms.cmsSigDeviceSettingsType_swigconstant(_littlecms)
cmsSigDeviceSettingsType = _littlecms.cmsSigDeviceSettingsType

_littlecms.cmsSigLut16Type_swigconstant(_littlecms)
cmsSigLut16Type = _littlecms.cmsSigLut16Type

_littlecms.cmsSigLut8Type_swigconstant(_littlecms)
cmsSigLut8Type = _littlecms.cmsSigLut8Type

_littlecms.cmsSigLutAtoBType_swigconstant(_littlecms)
cmsSigLutAtoBType = _littlecms.cmsSigLutAtoBType

_littlecms.cmsSigLutBtoAType_swigconstant(_littlecms)
cmsSigLutBtoAType = _littlecms.cmsSigLutBtoAType

_littlecms.cmsSigMeasurementType_swigconstant(_littlecms)
cmsSigMeasurementType = _littlecms.cmsSigMeasurementType

_littlecms.cmsSigMultiLocalizedUnicodeType_swigconstant(_littlecms)
cmsSigMultiLocalizedUnicodeType = _littlecms.cmsSigMultiLocalizedUnicodeType

_littlecms.cmsSigMultiProcessElementType_swigconstant(_littlecms)
cmsSigMultiProcessElementType = _littlecms.cmsSigMultiProcessElementType

_littlecms.cmsSigNamedColorType_swigconstant(_littlecms)
cmsSigNamedColorType = _littlecms.cmsSigNamedColorType

_littlecms.cmsSigNamedColor2Type_swigconstant(_littlecms)
cmsSigNamedColor2Type = _littlecms.cmsSigNamedColor2Type

_littlecms.cmsSigParametricCurveType_swigconstant(_littlecms)
cmsSigParametricCurveType = _littlecms.cmsSigParametricCurveType

_littlecms.cmsSigProfileSequenceDescType_swigconstant(_littlecms)
cmsSigProfileSequenceDescType = _littlecms.cmsSigProfileSequenceDescType

_littlecms.cmsSigProfileSequenceIdType_swigconstant(_littlecms)
cmsSigProfileSequenceIdType = _littlecms.cmsSigProfileSequenceIdType

_littlecms.cmsSigResponseCurveSet16Type_swigconstant(_littlecms)
cmsSigResponseCurveSet16Type = _littlecms.cmsSigResponseCurveSet16Type

_littlecms.cmsSigS15Fixed16ArrayType_swigconstant(_littlecms)
cmsSigS15Fixed16ArrayType = _littlecms.cmsSigS15Fixed16ArrayType

_littlecms.cmsSigScreeningType_swigconstant(_littlecms)
cmsSigScreeningType = _littlecms.cmsSigScreeningType

_littlecms.cmsSigSignatureType_swigconstant(_littlecms)
cmsSigSignatureType = _littlecms.cmsSigSignatureType

_littlecms.cmsSigTextType_swigconstant(_littlecms)
cmsSigTextType = _littlecms.cmsSigTextType

_littlecms.cmsSigTextDescriptionType_swigconstant(_littlecms)
cmsSigTextDescriptionType = _littlecms.cmsSigTextDescriptionType

_littlecms.cmsSigU16Fixed16ArrayType_swigconstant(_littlecms)
cmsSigU16Fixed16ArrayType = _littlecms.cmsSigU16Fixed16ArrayType

_littlecms.cmsSigUcrBgType_swigconstant(_littlecms)
cmsSigUcrBgType = _littlecms.cmsSigUcrBgType

_littlecms.cmsSigUInt16ArrayType_swigconstant(_littlecms)
cmsSigUInt16ArrayType = _littlecms.cmsSigUInt16ArrayType

_littlecms.cmsSigUInt32ArrayType_swigconstant(_littlecms)
cmsSigUInt32ArrayType = _littlecms.cmsSigUInt32ArrayType

_littlecms.cmsSigUInt64ArrayType_swigconstant(_littlecms)
cmsSigUInt64ArrayType = _littlecms.cmsSigUInt64ArrayType

_littlecms.cmsSigUInt8ArrayType_swigconstant(_littlecms)
cmsSigUInt8ArrayType = _littlecms.cmsSigUInt8ArrayType

_littlecms.cmsSigVcgtType_swigconstant(_littlecms)
cmsSigVcgtType = _littlecms.cmsSigVcgtType

_littlecms.cmsSigViewingConditionsType_swigconstant(_littlecms)
cmsSigViewingConditionsType = _littlecms.cmsSigViewingConditionsType

_littlecms.cmsSigXYZType_swigconstant(_littlecms)
cmsSigXYZType = _littlecms.cmsSigXYZType

_littlecms.cmsSigAToB0Tag_swigconstant(_littlecms)
cmsSigAToB0Tag = _littlecms.cmsSigAToB0Tag

_littlecms.cmsSigAToB1Tag_swigconstant(_littlecms)
cmsSigAToB1Tag = _littlecms.cmsSigAToB1Tag

_littlecms.cmsSigAToB2Tag_swigconstant(_littlecms)
cmsSigAToB2Tag = _littlecms.cmsSigAToB2Tag

_littlecms.cmsSigBlueColorantTag_swigconstant(_littlecms)
cmsSigBlueColorantTag = _littlecms.cmsSigBlueColorantTag

_littlecms.cmsSigBlueMatrixColumnTag_swigconstant(_littlecms)
cmsSigBlueMatrixColumnTag = _littlecms.cmsSigBlueMatrixColumnTag

_littlecms.cmsSigBlueTRCTag_swigconstant(_littlecms)
cmsSigBlueTRCTag = _littlecms.cmsSigBlueTRCTag

_littlecms.cmsSigBToA0Tag_swigconstant(_littlecms)
cmsSigBToA0Tag = _littlecms.cmsSigBToA0Tag

_littlecms.cmsSigBToA1Tag_swigconstant(_littlecms)
cmsSigBToA1Tag = _littlecms.cmsSigBToA1Tag

_littlecms.cmsSigBToA2Tag_swigconstant(_littlecms)
cmsSigBToA2Tag = _littlecms.cmsSigBToA2Tag

_littlecms.cmsSigCalibrationDateTimeTag_swigconstant(_littlecms)
cmsSigCalibrationDateTimeTag = _littlecms.cmsSigCalibrationDateTimeTag

_littlecms.cmsSigCharTargetTag_swigconstant(_littlecms)
cmsSigCharTargetTag = _littlecms.cmsSigCharTargetTag

_littlecms.cmsSigChromaticAdaptationTag_swigconstant(_littlecms)
cmsSigChromaticAdaptationTag = _littlecms.cmsSigChromaticAdaptationTag

_littlecms.cmsSigChromaticityTag_swigconstant(_littlecms)
cmsSigChromaticityTag = _littlecms.cmsSigChromaticityTag

_littlecms.cmsSigColorantOrderTag_swigconstant(_littlecms)
cmsSigColorantOrderTag = _littlecms.cmsSigColorantOrderTag

_littlecms.cmsSigColorantTableTag_swigconstant(_littlecms)
cmsSigColorantTableTag = _littlecms.cmsSigColorantTableTag

_littlecms.cmsSigColorantTableOutTag_swigconstant(_littlecms)
cmsSigColorantTableOutTag = _littlecms.cmsSigColorantTableOutTag

_littlecms.cmsSigColorimetricIntentImageStateTag_swigconstant(_littlecms)
cmsSigColorimetricIntentImageStateTag = _littlecms.cmsSigColorimetricIntentImageStateTag

_littlecms.cmsSigCopyrightTag_swigconstant(_littlecms)
cmsSigCopyrightTag = _littlecms.cmsSigCopyrightTag

_littlecms.cmsSigCrdInfoTag_swigconstant(_littlecms)
cmsSigCrdInfoTag = _littlecms.cmsSigCrdInfoTag

_littlecms.cmsSigDataTag_swigconstant(_littlecms)
cmsSigDataTag = _littlecms.cmsSigDataTag

_littlecms.cmsSigDateTimeTag_swigconstant(_littlecms)
cmsSigDateTimeTag = _littlecms.cmsSigDateTimeTag

_littlecms.cmsSigDeviceMfgDescTag_swigconstant(_littlecms)
cmsSigDeviceMfgDescTag = _littlecms.cmsSigDeviceMfgDescTag

_littlecms.cmsSigDeviceModelDescTag_swigconstant(_littlecms)
cmsSigDeviceModelDescTag = _littlecms.cmsSigDeviceModelDescTag

_littlecms.cmsSigDeviceSettingsTag_swigconstant(_littlecms)
cmsSigDeviceSettingsTag = _littlecms.cmsSigDeviceSettingsTag

_littlecms.cmsSigDToB0Tag_swigconstant(_littlecms)
cmsSigDToB0Tag = _littlecms.cmsSigDToB0Tag

_littlecms.cmsSigDToB1Tag_swigconstant(_littlecms)
cmsSigDToB1Tag = _littlecms.cmsSigDToB1Tag

_littlecms.cmsSigDToB2Tag_swigconstant(_littlecms)
cmsSigDToB2Tag = _littlecms.cmsSigDToB2Tag

_littlecms.cmsSigDToB3Tag_swigconstant(_littlecms)
cmsSigDToB3Tag = _littlecms.cmsSigDToB3Tag

_littlecms.cmsSigBToD0Tag_swigconstant(_littlecms)
cmsSigBToD0Tag = _littlecms.cmsSigBToD0Tag

_littlecms.cmsSigBToD1Tag_swigconstant(_littlecms)
cmsSigBToD1Tag = _littlecms.cmsSigBToD1Tag

_littlecms.cmsSigBToD2Tag_swigconstant(_littlecms)
cmsSigBToD2Tag = _littlecms.cmsSigBToD2Tag

_littlecms.cmsSigBToD3Tag_swigconstant(_littlecms)
cmsSigBToD3Tag = _littlecms.cmsSigBToD3Tag

_littlecms.cmsSigGamutTag_swigconstant(_littlecms)
cmsSigGamutTag = _littlecms.cmsSigGamutTag

_littlecms.cmsSigGrayTRCTag_swigconstant(_littlecms)
cmsSigGrayTRCTag = _littlecms.cmsSigGrayTRCTag

_littlecms.cmsSigGreenColorantTag_swigconstant(_littlecms)
cmsSigGreenColorantTag = _littlecms.cmsSigGreenColorantTag

_littlecms.cmsSigGreenMatrixColumnTag_swigconstant(_littlecms)
cmsSigGreenMatrixColumnTag = _littlecms.cmsSigGreenMatrixColumnTag

_littlecms.cmsSigGreenTRCTag_swigconstant(_littlecms)
cmsSigGreenTRCTag = _littlecms.cmsSigGreenTRCTag

_littlecms.cmsSigLuminanceTag_swigconstant(_littlecms)
cmsSigLuminanceTag = _littlecms.cmsSigLuminanceTag

_littlecms.cmsSigMeasurementTag_swigconstant(_littlecms)
cmsSigMeasurementTag = _littlecms.cmsSigMeasurementTag

_littlecms.cmsSigMediaBlackPointTag_swigconstant(_littlecms)
cmsSigMediaBlackPointTag = _littlecms.cmsSigMediaBlackPointTag

_littlecms.cmsSigMediaWhitePointTag_swigconstant(_littlecms)
cmsSigMediaWhitePointTag = _littlecms.cmsSigMediaWhitePointTag

_littlecms.cmsSigNamedColorTag_swigconstant(_littlecms)
cmsSigNamedColorTag = _littlecms.cmsSigNamedColorTag

_littlecms.cmsSigNamedColor2Tag_swigconstant(_littlecms)
cmsSigNamedColor2Tag = _littlecms.cmsSigNamedColor2Tag

_littlecms.cmsSigOutputResponseTag_swigconstant(_littlecms)
cmsSigOutputResponseTag = _littlecms.cmsSigOutputResponseTag

_littlecms.cmsSigPerceptualRenderingIntentGamutTag_swigconstant(_littlecms)
cmsSigPerceptualRenderingIntentGamutTag = _littlecms.cmsSigPerceptualRenderingIntentGamutTag

_littlecms.cmsSigPreview0Tag_swigconstant(_littlecms)
cmsSigPreview0Tag = _littlecms.cmsSigPreview0Tag

_littlecms.cmsSigPreview1Tag_swigconstant(_littlecms)
cmsSigPreview1Tag = _littlecms.cmsSigPreview1Tag

_littlecms.cmsSigPreview2Tag_swigconstant(_littlecms)
cmsSigPreview2Tag = _littlecms.cmsSigPreview2Tag

_littlecms.cmsSigProfileDescriptionTag_swigconstant(_littlecms)
cmsSigProfileDescriptionTag = _littlecms.cmsSigProfileDescriptionTag

_littlecms.cmsSigProfileDescriptionMLTag_swigconstant(_littlecms)
cmsSigProfileDescriptionMLTag = _littlecms.cmsSigProfileDescriptionMLTag

_littlecms.cmsSigProfileSequenceDescTag_swigconstant(_littlecms)
cmsSigProfileSequenceDescTag = _littlecms.cmsSigProfileSequenceDescTag

_littlecms.cmsSigProfileSequenceIdTag_swigconstant(_littlecms)
cmsSigProfileSequenceIdTag = _littlecms.cmsSigProfileSequenceIdTag

_littlecms.cmsSigPs2CRD0Tag_swigconstant(_littlecms)
cmsSigPs2CRD0Tag = _littlecms.cmsSigPs2CRD0Tag

_littlecms.cmsSigPs2CRD1Tag_swigconstant(_littlecms)
cmsSigPs2CRD1Tag = _littlecms.cmsSigPs2CRD1Tag

_littlecms.cmsSigPs2CRD2Tag_swigconstant(_littlecms)
cmsSigPs2CRD2Tag = _littlecms.cmsSigPs2CRD2Tag

_littlecms.cmsSigPs2CRD3Tag_swigconstant(_littlecms)
cmsSigPs2CRD3Tag = _littlecms.cmsSigPs2CRD3Tag

_littlecms.cmsSigPs2CSATag_swigconstant(_littlecms)
cmsSigPs2CSATag = _littlecms.cmsSigPs2CSATag

_littlecms.cmsSigPs2RenderingIntentTag_swigconstant(_littlecms)
cmsSigPs2RenderingIntentTag = _littlecms.cmsSigPs2RenderingIntentTag

_littlecms.cmsSigRedColorantTag_swigconstant(_littlecms)
cmsSigRedColorantTag = _littlecms.cmsSigRedColorantTag

_littlecms.cmsSigRedMatrixColumnTag_swigconstant(_littlecms)
cmsSigRedMatrixColumnTag = _littlecms.cmsSigRedMatrixColumnTag

_littlecms.cmsSigRedTRCTag_swigconstant(_littlecms)
cmsSigRedTRCTag = _littlecms.cmsSigRedTRCTag

_littlecms.cmsSigSaturationRenderingIntentGamutTag_swigconstant(_littlecms)
cmsSigSaturationRenderingIntentGamutTag = _littlecms.cmsSigSaturationRenderingIntentGamutTag

_littlecms.cmsSigScreeningDescTag_swigconstant(_littlecms)
cmsSigScreeningDescTag = _littlecms.cmsSigScreeningDescTag

_littlecms.cmsSigScreeningTag_swigconstant(_littlecms)
cmsSigScreeningTag = _littlecms.cmsSigScreeningTag

_littlecms.cmsSigTechnologyTag_swigconstant(_littlecms)
cmsSigTechnologyTag = _littlecms.cmsSigTechnologyTag

_littlecms.cmsSigUcrBgTag_swigconstant(_littlecms)
cmsSigUcrBgTag = _littlecms.cmsSigUcrBgTag

_littlecms.cmsSigViewingCondDescTag_swigconstant(_littlecms)
cmsSigViewingCondDescTag = _littlecms.cmsSigViewingCondDescTag

_littlecms.cmsSigViewingConditionsTag_swigconstant(_littlecms)
cmsSigViewingConditionsTag = _littlecms.cmsSigViewingConditionsTag

_littlecms.cmsSigVcgtTag_swigconstant(_littlecms)
cmsSigVcgtTag = _littlecms.cmsSigVcgtTag

_littlecms.cmsSigMetaTag_swigconstant(_littlecms)
cmsSigMetaTag = _littlecms.cmsSigMetaTag

_littlecms.cmsSigDigitalCamera_swigconstant(_littlecms)
cmsSigDigitalCamera = _littlecms.cmsSigDigitalCamera

_littlecms.cmsSigFilmScanner_swigconstant(_littlecms)
cmsSigFilmScanner = _littlecms.cmsSigFilmScanner

_littlecms.cmsSigReflectiveScanner_swigconstant(_littlecms)
cmsSigReflectiveScanner = _littlecms.cmsSigReflectiveScanner

_littlecms.cmsSigInkJetPrinter_swigconstant(_littlecms)
cmsSigInkJetPrinter = _littlecms.cmsSigInkJetPrinter

_littlecms.cmsSigThermalWaxPrinter_swigconstant(_littlecms)
cmsSigThermalWaxPrinter = _littlecms.cmsSigThermalWaxPrinter

_littlecms.cmsSigElectrophotographicPrinter_swigconstant(_littlecms)
cmsSigElectrophotographicPrinter = _littlecms.cmsSigElectrophotographicPrinter

_littlecms.cmsSigElectrostaticPrinter_swigconstant(_littlecms)
cmsSigElectrostaticPrinter = _littlecms.cmsSigElectrostaticPrinter

_littlecms.cmsSigDyeSublimationPrinter_swigconstant(_littlecms)
cmsSigDyeSublimationPrinter = _littlecms.cmsSigDyeSublimationPrinter

_littlecms.cmsSigPhotographicPaperPrinter_swigconstant(_littlecms)
cmsSigPhotographicPaperPrinter = _littlecms.cmsSigPhotographicPaperPrinter

_littlecms.cmsSigFilmWriter_swigconstant(_littlecms)
cmsSigFilmWriter = _littlecms.cmsSigFilmWriter

_littlecms.cmsSigVideoMonitor_swigconstant(_littlecms)
cmsSigVideoMonitor = _littlecms.cmsSigVideoMonitor

_littlecms.cmsSigVideoCamera_swigconstant(_littlecms)
cmsSigVideoCamera = _littlecms.cmsSigVideoCamera

_littlecms.cmsSigProjectionTelevision_swigconstant(_littlecms)
cmsSigProjectionTelevision = _littlecms.cmsSigProjectionTelevision

_littlecms.cmsSigCRTDisplay_swigconstant(_littlecms)
cmsSigCRTDisplay = _littlecms.cmsSigCRTDisplay

_littlecms.cmsSigPMDisplay_swigconstant(_littlecms)
cmsSigPMDisplay = _littlecms.cmsSigPMDisplay

_littlecms.cmsSigAMDisplay_swigconstant(_littlecms)
cmsSigAMDisplay = _littlecms.cmsSigAMDisplay

_littlecms.cmsSigPhotoCD_swigconstant(_littlecms)
cmsSigPhotoCD = _littlecms.cmsSigPhotoCD

_littlecms.cmsSigPhotoImageSetter_swigconstant(_littlecms)
cmsSigPhotoImageSetter = _littlecms.cmsSigPhotoImageSetter

_littlecms.cmsSigGravure_swigconstant(_littlecms)
cmsSigGravure = _littlecms.cmsSigGravure

_littlecms.cmsSigOffsetLithography_swigconstant(_littlecms)
cmsSigOffsetLithography = _littlecms.cmsSigOffsetLithography

_littlecms.cmsSigSilkscreen_swigconstant(_littlecms)
cmsSigSilkscreen = _littlecms.cmsSigSilkscreen

_littlecms.cmsSigFlexography_swigconstant(_littlecms)
cmsSigFlexography = _littlecms.cmsSigFlexography

_littlecms.cmsSigMotionPictureFilmScanner_swigconstant(_littlecms)
cmsSigMotionPictureFilmScanner = _littlecms.cmsSigMotionPictureFilmScanner

_littlecms.cmsSigMotionPictureFilmRecorder_swigconstant(_littlecms)
cmsSigMotionPictureFilmRecorder = _littlecms.cmsSigMotionPictureFilmRecorder

_littlecms.cmsSigDigitalMotionPictureCamera_swigconstant(_littlecms)
cmsSigDigitalMotionPictureCamera = _littlecms.cmsSigDigitalMotionPictureCamera

_littlecms.cmsSigDigitalCinemaProjector_swigconstant(_littlecms)
cmsSigDigitalCinemaProjector = _littlecms.cmsSigDigitalCinemaProjector

_littlecms.cmsSigXYZData_swigconstant(_littlecms)
cmsSigXYZData = _littlecms.cmsSigXYZData

_littlecms.cmsSigLabData_swigconstant(_littlecms)
cmsSigLabData = _littlecms.cmsSigLabData

_littlecms.cmsSigLuvData_swigconstant(_littlecms)
cmsSigLuvData = _littlecms.cmsSigLuvData

_littlecms.cmsSigYCbCrData_swigconstant(_littlecms)
cmsSigYCbCrData = _littlecms.cmsSigYCbCrData

_littlecms.cmsSigYxyData_swigconstant(_littlecms)
cmsSigYxyData = _littlecms.cmsSigYxyData

_littlecms.cmsSigRgbData_swigconstant(_littlecms)
cmsSigRgbData = _littlecms.cmsSigRgbData

_littlecms.cmsSigGrayData_swigconstant(_littlecms)
cmsSigGrayData = _littlecms.cmsSigGrayData

_littlecms.cmsSigHsvData_swigconstant(_littlecms)
cmsSigHsvData = _littlecms.cmsSigHsvData

_littlecms.cmsSigHlsData_swigconstant(_littlecms)
cmsSigHlsData = _littlecms.cmsSigHlsData

_littlecms.cmsSigCmykData_swigconstant(_littlecms)
cmsSigCmykData = _littlecms.cmsSigCmykData

_littlecms.cmsSigCmyData_swigconstant(_littlecms)
cmsSigCmyData = _littlecms.cmsSigCmyData

_littlecms.cmsSigMCH1Data_swigconstant(_littlecms)
cmsSigMCH1Data = _littlecms.cmsSigMCH1Data

_littlecms.cmsSigMCH2Data_swigconstant(_littlecms)
cmsSigMCH2Data = _littlecms.cmsSigMCH2Data

_littlecms.cmsSigMCH3Data_swigconstant(_littlecms)
cmsSigMCH3Data = _littlecms.cmsSigMCH3Data

_littlecms.cmsSigMCH4Data_swigconstant(_littlecms)
cmsSigMCH4Data = _littlecms.cmsSigMCH4Data

_littlecms.cmsSigMCH5Data_swigconstant(_littlecms)
cmsSigMCH5Data = _littlecms.cmsSigMCH5Data

_littlecms.cmsSigMCH6Data_swigconstant(_littlecms)
cmsSigMCH6Data = _littlecms.cmsSigMCH6Data

_littlecms.cmsSigMCH7Data_swigconstant(_littlecms)
cmsSigMCH7Data = _littlecms.cmsSigMCH7Data

_littlecms.cmsSigMCH8Data_swigconstant(_littlecms)
cmsSigMCH8Data = _littlecms.cmsSigMCH8Data

_littlecms.cmsSigMCH9Data_swigconstant(_littlecms)
cmsSigMCH9Data = _littlecms.cmsSigMCH9Data

_littlecms.cmsSigMCHAData_swigconstant(_littlecms)
cmsSigMCHAData = _littlecms.cmsSigMCHAData

_littlecms.cmsSigMCHBData_swigconstant(_littlecms)
cmsSigMCHBData = _littlecms.cmsSigMCHBData

_littlecms.cmsSigMCHCData_swigconstant(_littlecms)
cmsSigMCHCData = _littlecms.cmsSigMCHCData

_littlecms.cmsSigMCHDData_swigconstant(_littlecms)
cmsSigMCHDData = _littlecms.cmsSigMCHDData

_littlecms.cmsSigMCHEData_swigconstant(_littlecms)
cmsSigMCHEData = _littlecms.cmsSigMCHEData

_littlecms.cmsSigMCHFData_swigconstant(_littlecms)
cmsSigMCHFData = _littlecms.cmsSigMCHFData

_littlecms.cmsSigNamedData_swigconstant(_littlecms)
cmsSigNamedData = _littlecms.cmsSigNamedData

_littlecms.cmsSig1colorData_swigconstant(_littlecms)
cmsSig1colorData = _littlecms.cmsSig1colorData

_littlecms.cmsSig2colorData_swigconstant(_littlecms)
cmsSig2colorData = _littlecms.cmsSig2colorData

_littlecms.cmsSig3colorData_swigconstant(_littlecms)
cmsSig3colorData = _littlecms.cmsSig3colorData

_littlecms.cmsSig4colorData_swigconstant(_littlecms)
cmsSig4colorData = _littlecms.cmsSig4colorData

_littlecms.cmsSig5colorData_swigconstant(_littlecms)
cmsSig5colorData = _littlecms.cmsSig5colorData

_littlecms.cmsSig6colorData_swigconstant(_littlecms)
cmsSig6colorData = _littlecms.cmsSig6colorData

_littlecms.cmsSig7colorData_swigconstant(_littlecms)
cmsSig7colorData = _littlecms.cmsSig7colorData

_littlecms.cmsSig8colorData_swigconstant(_littlecms)
cmsSig8colorData = _littlecms.cmsSig8colorData

_littlecms.cmsSig9colorData_swigconstant(_littlecms)
cmsSig9colorData = _littlecms.cmsSig9colorData

_littlecms.cmsSig10colorData_swigconstant(_littlecms)
cmsSig10colorData = _littlecms.cmsSig10colorData

_littlecms.cmsSig11colorData_swigconstant(_littlecms)
cmsSig11colorData = _littlecms.cmsSig11colorData

_littlecms.cmsSig12colorData_swigconstant(_littlecms)
cmsSig12colorData = _littlecms.cmsSig12colorData

_littlecms.cmsSig13colorData_swigconstant(_littlecms)
cmsSig13colorData = _littlecms.cmsSig13colorData

_littlecms.cmsSig14colorData_swigconstant(_littlecms)
cmsSig14colorData = _littlecms.cmsSig14colorData

_littlecms.cmsSig15colorData_swigconstant(_littlecms)
cmsSig15colorData = _littlecms.cmsSig15colorData

_littlecms.cmsSigLuvKData_swigconstant(_littlecms)
cmsSigLuvKData = _littlecms.cmsSigLuvKData

_littlecms.cmsSigInputClass_swigconstant(_littlecms)
cmsSigInputClass = _littlecms.cmsSigInputClass

_littlecms.cmsSigDisplayClass_swigconstant(_littlecms)
cmsSigDisplayClass = _littlecms.cmsSigDisplayClass

_littlecms.cmsSigOutputClass_swigconstant(_littlecms)
cmsSigOutputClass = _littlecms.cmsSigOutputClass

_littlecms.cmsSigLinkClass_swigconstant(_littlecms)
cmsSigLinkClass = _littlecms.cmsSigLinkClass

_littlecms.cmsSigAbstractClass_swigconstant(_littlecms)
cmsSigAbstractClass = _littlecms.cmsSigAbstractClass

_littlecms.cmsSigColorSpaceClass_swigconstant(_littlecms)
cmsSigColorSpaceClass = _littlecms.cmsSigColorSpaceClass

_littlecms.cmsSigNamedColorClass_swigconstant(_littlecms)
cmsSigNamedColorClass = _littlecms.cmsSigNamedColorClass

_littlecms.cmsSigMacintosh_swigconstant(_littlecms)
cmsSigMacintosh = _littlecms.cmsSigMacintosh

_littlecms.cmsSigMicrosoft_swigconstant(_littlecms)
cmsSigMicrosoft = _littlecms.cmsSigMicrosoft

_littlecms.cmsSigSolaris_swigconstant(_littlecms)
cmsSigSolaris = _littlecms.cmsSigSolaris

_littlecms.cmsSigSGI_swigconstant(_littlecms)
cmsSigSGI = _littlecms.cmsSigSGI

_littlecms.cmsSigTaligent_swigconstant(_littlecms)
cmsSigTaligent = _littlecms.cmsSigTaligent

_littlecms.cmsSigUnices_swigconstant(_littlecms)
cmsSigUnices = _littlecms.cmsSigUnices

_littlecms.cmsSigPerceptualReferenceMediumGamut_swigconstant(_littlecms)
cmsSigPerceptualReferenceMediumGamut = _littlecms.cmsSigPerceptualReferenceMediumGamut

_littlecms.cmsSigSceneColorimetryEstimates_swigconstant(_littlecms)
cmsSigSceneColorimetryEstimates = _littlecms.cmsSigSceneColorimetryEstimates

_littlecms.cmsSigSceneAppearanceEstimates_swigconstant(_littlecms)
cmsSigSceneAppearanceEstimates = _littlecms.cmsSigSceneAppearanceEstimates

_littlecms.cmsSigFocalPlaneColorimetryEstimates_swigconstant(_littlecms)
cmsSigFocalPlaneColorimetryEstimates = _littlecms.cmsSigFocalPlaneColorimetryEstimates

_littlecms.cmsSigReflectionHardcopyOriginalColorimetry_swigconstant(_littlecms)
cmsSigReflectionHardcopyOriginalColorimetry = _littlecms.cmsSigReflectionHardcopyOriginalColorimetry

_littlecms.cmsSigReflectionPrintOutputColorimetry_swigconstant(_littlecms)
cmsSigReflectionPrintOutputColorimetry = _littlecms.cmsSigReflectionPrintOutputColorimetry

_littlecms.cmsSigCurveSetElemType_swigconstant(_littlecms)
cmsSigCurveSetElemType = _littlecms.cmsSigCurveSetElemType

_littlecms.cmsSigMatrixElemType_swigconstant(_littlecms)
cmsSigMatrixElemType = _littlecms.cmsSigMatrixElemType

_littlecms.cmsSigCLutElemType_swigconstant(_littlecms)
cmsSigCLutElemType = _littlecms.cmsSigCLutElemType

_littlecms.cmsSigBAcsElemType_swigconstant(_littlecms)
cmsSigBAcsElemType = _littlecms.cmsSigBAcsElemType

_littlecms.cmsSigEAcsElemType_swigconstant(_littlecms)
cmsSigEAcsElemType = _littlecms.cmsSigEAcsElemType

_littlecms.cmsSigXYZ2LabElemType_swigconstant(_littlecms)
cmsSigXYZ2LabElemType = _littlecms.cmsSigXYZ2LabElemType

_littlecms.cmsSigLab2XYZElemType_swigconstant(_littlecms)
cmsSigLab2XYZElemType = _littlecms.cmsSigLab2XYZElemType

_littlecms.cmsSigNamedColorElemType_swigconstant(_littlecms)
cmsSigNamedColorElemType = _littlecms.cmsSigNamedColorElemType

_littlecms.cmsSigLabV2toV4_swigconstant(_littlecms)
cmsSigLabV2toV4 = _littlecms.cmsSigLabV2toV4

_littlecms.cmsSigLabV4toV2_swigconstant(_littlecms)
cmsSigLabV4toV2 = _littlecms.cmsSigLabV4toV2

_littlecms.cmsSigIdentityElemType_swigconstant(_littlecms)
cmsSigIdentityElemType = _littlecms.cmsSigIdentityElemType

_littlecms.cmsSigLab2FloatPCS_swigconstant(_littlecms)
cmsSigLab2FloatPCS = _littlecms.cmsSigLab2FloatPCS

_littlecms.cmsSigFloatPCS2Lab_swigconstant(_littlecms)
cmsSigFloatPCS2Lab = _littlecms.cmsSigFloatPCS2Lab

_littlecms.cmsSigXYZ2FloatPCS_swigconstant(_littlecms)
cmsSigXYZ2FloatPCS = _littlecms.cmsSigXYZ2FloatPCS

_littlecms.cmsSigFloatPCS2XYZ_swigconstant(_littlecms)
cmsSigFloatPCS2XYZ = _littlecms.cmsSigFloatPCS2XYZ

_littlecms.cmsSigClipNegativesElemType_swigconstant(_littlecms)
cmsSigClipNegativesElemType = _littlecms.cmsSigClipNegativesElemType

_littlecms.cmsSigFormulaCurveSeg_swigconstant(_littlecms)
cmsSigFormulaCurveSeg = _littlecms.cmsSigFormulaCurveSeg

_littlecms.cmsSigSampledCurveSeg_swigconstant(_littlecms)
cmsSigSampledCurveSeg = _littlecms.cmsSigSampledCurveSeg

_littlecms.cmsSigSegmentedCurve_swigconstant(_littlecms)
cmsSigSegmentedCurve = _littlecms.cmsSigSegmentedCurve

_littlecms.cmsSigStatusA_swigconstant(_littlecms)
cmsSigStatusA = _littlecms.cmsSigStatusA

_littlecms.cmsSigStatusE_swigconstant(_littlecms)
cmsSigStatusE = _littlecms.cmsSigStatusE

_littlecms.cmsSigStatusI_swigconstant(_littlecms)
cmsSigStatusI = _littlecms.cmsSigStatusI

_littlecms.cmsSigStatusT_swigconstant(_littlecms)
cmsSigStatusT = _littlecms.cmsSigStatusT

_littlecms.cmsSigStatusM_swigconstant(_littlecms)
cmsSigStatusM = _littlecms.cmsSigStatusM

_littlecms.cmsSigDN_swigconstant(_littlecms)
cmsSigDN = _littlecms.cmsSigDN

_littlecms.cmsSigDNP_swigconstant(_littlecms)
cmsSigDNP = _littlecms.cmsSigDNP

_littlecms.cmsSigDNN_swigconstant(_littlecms)
cmsSigDNN = _littlecms.cmsSigDNN

_littlecms.cmsSigDNNP_swigconstant(_littlecms)
cmsSigDNNP = _littlecms.cmsSigDNNP

_littlecms.cmsReflective_swigconstant(_littlecms)
cmsReflective = _littlecms.cmsReflective

_littlecms.cmsTransparency_swigconstant(_littlecms)
cmsTransparency = _littlecms.cmsTransparency

_littlecms.cmsGlossy_swigconstant(_littlecms)
cmsGlossy = _littlecms.cmsGlossy

_littlecms.cmsMatte_swigconstant(_littlecms)
cmsMatte = _littlecms.cmsMatte
class cmsICCData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsICCData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsICCData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _littlecms.cmsICCData_len_set
    __swig_getmethods__["len"] = _littlecms.cmsICCData_len_get
    if _newclass:
        len = _swig_property(_littlecms.cmsICCData_len_get, _littlecms.cmsICCData_len_set)
    __swig_setmethods__["flag"] = _littlecms.cmsICCData_flag_set
    __swig_getmethods__["flag"] = _littlecms.cmsICCData_flag_get
    if _newclass:
        flag = _swig_property(_littlecms.cmsICCData_flag_get, _littlecms.cmsICCData_flag_set)
    __swig_setmethods__["data"] = _littlecms.cmsICCData_data_set
    __swig_getmethods__["data"] = _littlecms.cmsICCData_data_get
    if _newclass:
        data = _swig_property(_littlecms.cmsICCData_data_get, _littlecms.cmsICCData_data_set)

    def __init__(self):
        this = _littlecms.new_cmsICCData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsICCData
    __del__ = lambda self: None
cmsICCData_swigregister = _littlecms.cmsICCData_swigregister
cmsICCData_swigregister(cmsICCData)

class cmsDateTimeNumber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsDateTimeNumber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsDateTimeNumber, name)
    __repr__ = _swig_repr
    __swig_setmethods__["year"] = _littlecms.cmsDateTimeNumber_year_set
    __swig_getmethods__["year"] = _littlecms.cmsDateTimeNumber_year_get
    if _newclass:
        year = _swig_property(_littlecms.cmsDateTimeNumber_year_get, _littlecms.cmsDateTimeNumber_year_set)
    __swig_setmethods__["month"] = _littlecms.cmsDateTimeNumber_month_set
    __swig_getmethods__["month"] = _littlecms.cmsDateTimeNumber_month_get
    if _newclass:
        month = _swig_property(_littlecms.cmsDateTimeNumber_month_get, _littlecms.cmsDateTimeNumber_month_set)
    __swig_setmethods__["day"] = _littlecms.cmsDateTimeNumber_day_set
    __swig_getmethods__["day"] = _littlecms.cmsDateTimeNumber_day_get
    if _newclass:
        day = _swig_property(_littlecms.cmsDateTimeNumber_day_get, _littlecms.cmsDateTimeNumber_day_set)
    __swig_setmethods__["hours"] = _littlecms.cmsDateTimeNumber_hours_set
    __swig_getmethods__["hours"] = _littlecms.cmsDateTimeNumber_hours_get
    if _newclass:
        hours = _swig_property(_littlecms.cmsDateTimeNumber_hours_get, _littlecms.cmsDateTimeNumber_hours_set)
    __swig_setmethods__["minutes"] = _littlecms.cmsDateTimeNumber_minutes_set
    __swig_getmethods__["minutes"] = _littlecms.cmsDateTimeNumber_minutes_get
    if _newclass:
        minutes = _swig_property(_littlecms.cmsDateTimeNumber_minutes_get, _littlecms.cmsDateTimeNumber_minutes_set)
    __swig_setmethods__["seconds"] = _littlecms.cmsDateTimeNumber_seconds_set
    __swig_getmethods__["seconds"] = _littlecms.cmsDateTimeNumber_seconds_get
    if _newclass:
        seconds = _swig_property(_littlecms.cmsDateTimeNumber_seconds_get, _littlecms.cmsDateTimeNumber_seconds_set)

    def __init__(self):
        this = _littlecms.new_cmsDateTimeNumber()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsDateTimeNumber
    __del__ = lambda self: None
cmsDateTimeNumber_swigregister = _littlecms.cmsDateTimeNumber_swigregister
cmsDateTimeNumber_swigregister(cmsDateTimeNumber)

class cmsEncodedXYZNumber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsEncodedXYZNumber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsEncodedXYZNumber, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _littlecms.cmsEncodedXYZNumber_X_set
    __swig_getmethods__["X"] = _littlecms.cmsEncodedXYZNumber_X_get
    if _newclass:
        X = _swig_property(_littlecms.cmsEncodedXYZNumber_X_get, _littlecms.cmsEncodedXYZNumber_X_set)
    __swig_setmethods__["Y"] = _littlecms.cmsEncodedXYZNumber_Y_set
    __swig_getmethods__["Y"] = _littlecms.cmsEncodedXYZNumber_Y_get
    if _newclass:
        Y = _swig_property(_littlecms.cmsEncodedXYZNumber_Y_get, _littlecms.cmsEncodedXYZNumber_Y_set)
    __swig_setmethods__["Z"] = _littlecms.cmsEncodedXYZNumber_Z_set
    __swig_getmethods__["Z"] = _littlecms.cmsEncodedXYZNumber_Z_get
    if _newclass:
        Z = _swig_property(_littlecms.cmsEncodedXYZNumber_Z_get, _littlecms.cmsEncodedXYZNumber_Z_set)

    def __init__(self):
        this = _littlecms.new_cmsEncodedXYZNumber()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsEncodedXYZNumber
    __del__ = lambda self: None
cmsEncodedXYZNumber_swigregister = _littlecms.cmsEncodedXYZNumber_swigregister
cmsEncodedXYZNumber_swigregister(cmsEncodedXYZNumber)

class cmsProfileID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsProfileID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsProfileID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ID8"] = _littlecms.cmsProfileID_ID8_set
    __swig_getmethods__["ID8"] = _littlecms.cmsProfileID_ID8_get
    if _newclass:
        ID8 = _swig_property(_littlecms.cmsProfileID_ID8_get, _littlecms.cmsProfileID_ID8_set)
    __swig_setmethods__["ID16"] = _littlecms.cmsProfileID_ID16_set
    __swig_getmethods__["ID16"] = _littlecms.cmsProfileID_ID16_get
    if _newclass:
        ID16 = _swig_property(_littlecms.cmsProfileID_ID16_get, _littlecms.cmsProfileID_ID16_set)
    __swig_setmethods__["ID32"] = _littlecms.cmsProfileID_ID32_set
    __swig_getmethods__["ID32"] = _littlecms.cmsProfileID_ID32_get
    if _newclass:
        ID32 = _swig_property(_littlecms.cmsProfileID_ID32_get, _littlecms.cmsProfileID_ID32_set)

    def __init__(self):
        this = _littlecms.new_cmsProfileID()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsProfileID
    __del__ = lambda self: None
cmsProfileID_swigregister = _littlecms.cmsProfileID_swigregister
cmsProfileID_swigregister(cmsProfileID)

class cmsICCHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsICCHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsICCHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _littlecms.cmsICCHeader_size_set
    __swig_getmethods__["size"] = _littlecms.cmsICCHeader_size_get
    if _newclass:
        size = _swig_property(_littlecms.cmsICCHeader_size_get, _littlecms.cmsICCHeader_size_set)
    __swig_setmethods__["cmmId"] = _littlecms.cmsICCHeader_cmmId_set
    __swig_getmethods__["cmmId"] = _littlecms.cmsICCHeader_cmmId_get
    if _newclass:
        cmmId = _swig_property(_littlecms.cmsICCHeader_cmmId_get, _littlecms.cmsICCHeader_cmmId_set)
    __swig_setmethods__["version"] = _littlecms.cmsICCHeader_version_set
    __swig_getmethods__["version"] = _littlecms.cmsICCHeader_version_get
    if _newclass:
        version = _swig_property(_littlecms.cmsICCHeader_version_get, _littlecms.cmsICCHeader_version_set)
    __swig_setmethods__["deviceClass"] = _littlecms.cmsICCHeader_deviceClass_set
    __swig_getmethods__["deviceClass"] = _littlecms.cmsICCHeader_deviceClass_get
    if _newclass:
        deviceClass = _swig_property(_littlecms.cmsICCHeader_deviceClass_get, _littlecms.cmsICCHeader_deviceClass_set)
    __swig_setmethods__["colorSpace"] = _littlecms.cmsICCHeader_colorSpace_set
    __swig_getmethods__["colorSpace"] = _littlecms.cmsICCHeader_colorSpace_get
    if _newclass:
        colorSpace = _swig_property(_littlecms.cmsICCHeader_colorSpace_get, _littlecms.cmsICCHeader_colorSpace_set)
    __swig_setmethods__["pcs"] = _littlecms.cmsICCHeader_pcs_set
    __swig_getmethods__["pcs"] = _littlecms.cmsICCHeader_pcs_get
    if _newclass:
        pcs = _swig_property(_littlecms.cmsICCHeader_pcs_get, _littlecms.cmsICCHeader_pcs_set)
    __swig_setmethods__["date"] = _littlecms.cmsICCHeader_date_set
    __swig_getmethods__["date"] = _littlecms.cmsICCHeader_date_get
    if _newclass:
        date = _swig_property(_littlecms.cmsICCHeader_date_get, _littlecms.cmsICCHeader_date_set)
    __swig_setmethods__["magic"] = _littlecms.cmsICCHeader_magic_set
    __swig_getmethods__["magic"] = _littlecms.cmsICCHeader_magic_get
    if _newclass:
        magic = _swig_property(_littlecms.cmsICCHeader_magic_get, _littlecms.cmsICCHeader_magic_set)
    __swig_setmethods__["platform"] = _littlecms.cmsICCHeader_platform_set
    __swig_getmethods__["platform"] = _littlecms.cmsICCHeader_platform_get
    if _newclass:
        platform = _swig_property(_littlecms.cmsICCHeader_platform_get, _littlecms.cmsICCHeader_platform_set)
    __swig_setmethods__["flags"] = _littlecms.cmsICCHeader_flags_set
    __swig_getmethods__["flags"] = _littlecms.cmsICCHeader_flags_get
    if _newclass:
        flags = _swig_property(_littlecms.cmsICCHeader_flags_get, _littlecms.cmsICCHeader_flags_set)
    __swig_setmethods__["manufacturer"] = _littlecms.cmsICCHeader_manufacturer_set
    __swig_getmethods__["manufacturer"] = _littlecms.cmsICCHeader_manufacturer_get
    if _newclass:
        manufacturer = _swig_property(_littlecms.cmsICCHeader_manufacturer_get, _littlecms.cmsICCHeader_manufacturer_set)
    __swig_setmethods__["model"] = _littlecms.cmsICCHeader_model_set
    __swig_getmethods__["model"] = _littlecms.cmsICCHeader_model_get
    if _newclass:
        model = _swig_property(_littlecms.cmsICCHeader_model_get, _littlecms.cmsICCHeader_model_set)
    __swig_setmethods__["attributes"] = _littlecms.cmsICCHeader_attributes_set
    __swig_getmethods__["attributes"] = _littlecms.cmsICCHeader_attributes_get
    if _newclass:
        attributes = _swig_property(_littlecms.cmsICCHeader_attributes_get, _littlecms.cmsICCHeader_attributes_set)
    __swig_setmethods__["renderingIntent"] = _littlecms.cmsICCHeader_renderingIntent_set
    __swig_getmethods__["renderingIntent"] = _littlecms.cmsICCHeader_renderingIntent_get
    if _newclass:
        renderingIntent = _swig_property(_littlecms.cmsICCHeader_renderingIntent_get, _littlecms.cmsICCHeader_renderingIntent_set)
    __swig_setmethods__["illuminant"] = _littlecms.cmsICCHeader_illuminant_set
    __swig_getmethods__["illuminant"] = _littlecms.cmsICCHeader_illuminant_get
    if _newclass:
        illuminant = _swig_property(_littlecms.cmsICCHeader_illuminant_get, _littlecms.cmsICCHeader_illuminant_set)
    __swig_setmethods__["creator"] = _littlecms.cmsICCHeader_creator_set
    __swig_getmethods__["creator"] = _littlecms.cmsICCHeader_creator_get
    if _newclass:
        creator = _swig_property(_littlecms.cmsICCHeader_creator_get, _littlecms.cmsICCHeader_creator_set)
    __swig_setmethods__["profileID"] = _littlecms.cmsICCHeader_profileID_set
    __swig_getmethods__["profileID"] = _littlecms.cmsICCHeader_profileID_get
    if _newclass:
        profileID = _swig_property(_littlecms.cmsICCHeader_profileID_get, _littlecms.cmsICCHeader_profileID_set)
    __swig_setmethods__["reserved"] = _littlecms.cmsICCHeader_reserved_set
    __swig_getmethods__["reserved"] = _littlecms.cmsICCHeader_reserved_get
    if _newclass:
        reserved = _swig_property(_littlecms.cmsICCHeader_reserved_get, _littlecms.cmsICCHeader_reserved_set)

    def __init__(self):
        this = _littlecms.new_cmsICCHeader()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsICCHeader
    __del__ = lambda self: None
cmsICCHeader_swigregister = _littlecms.cmsICCHeader_swigregister
cmsICCHeader_swigregister(cmsICCHeader)

class cmsTagBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsTagBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsTagBase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sig"] = _littlecms.cmsTagBase_sig_set
    __swig_getmethods__["sig"] = _littlecms.cmsTagBase_sig_get
    if _newclass:
        sig = _swig_property(_littlecms.cmsTagBase_sig_get, _littlecms.cmsTagBase_sig_set)
    __swig_setmethods__["reserved"] = _littlecms.cmsTagBase_reserved_set
    __swig_getmethods__["reserved"] = _littlecms.cmsTagBase_reserved_get
    if _newclass:
        reserved = _swig_property(_littlecms.cmsTagBase_reserved_get, _littlecms.cmsTagBase_reserved_set)

    def __init__(self):
        this = _littlecms.new_cmsTagBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsTagBase
    __del__ = lambda self: None
cmsTagBase_swigregister = _littlecms.cmsTagBase_swigregister
cmsTagBase_swigregister(cmsTagBase)

class cmsTagEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsTagEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsTagEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sig"] = _littlecms.cmsTagEntry_sig_set
    __swig_getmethods__["sig"] = _littlecms.cmsTagEntry_sig_get
    if _newclass:
        sig = _swig_property(_littlecms.cmsTagEntry_sig_get, _littlecms.cmsTagEntry_sig_set)
    __swig_setmethods__["offset"] = _littlecms.cmsTagEntry_offset_set
    __swig_getmethods__["offset"] = _littlecms.cmsTagEntry_offset_get
    if _newclass:
        offset = _swig_property(_littlecms.cmsTagEntry_offset_get, _littlecms.cmsTagEntry_offset_set)
    __swig_setmethods__["size"] = _littlecms.cmsTagEntry_size_set
    __swig_getmethods__["size"] = _littlecms.cmsTagEntry_size_get
    if _newclass:
        size = _swig_property(_littlecms.cmsTagEntry_size_get, _littlecms.cmsTagEntry_size_set)

    def __init__(self):
        this = _littlecms.new_cmsTagEntry()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsTagEntry
    __del__ = lambda self: None
cmsTagEntry_swigregister = _littlecms.cmsTagEntry_swigregister
cmsTagEntry_swigregister(cmsTagEntry)


_littlecms.cmsMAXCHANNELS_swigconstant(_littlecms)
cmsMAXCHANNELS = _littlecms.cmsMAXCHANNELS

_littlecms.PT_ANY_swigconstant(_littlecms)
PT_ANY = _littlecms.PT_ANY

_littlecms.PT_GRAY_swigconstant(_littlecms)
PT_GRAY = _littlecms.PT_GRAY

_littlecms.PT_RGB_swigconstant(_littlecms)
PT_RGB = _littlecms.PT_RGB

_littlecms.PT_CMY_swigconstant(_littlecms)
PT_CMY = _littlecms.PT_CMY

_littlecms.PT_CMYK_swigconstant(_littlecms)
PT_CMYK = _littlecms.PT_CMYK

_littlecms.PT_YCbCr_swigconstant(_littlecms)
PT_YCbCr = _littlecms.PT_YCbCr

_littlecms.PT_YUV_swigconstant(_littlecms)
PT_YUV = _littlecms.PT_YUV

_littlecms.PT_XYZ_swigconstant(_littlecms)
PT_XYZ = _littlecms.PT_XYZ

_littlecms.PT_Lab_swigconstant(_littlecms)
PT_Lab = _littlecms.PT_Lab

_littlecms.PT_YUVK_swigconstant(_littlecms)
PT_YUVK = _littlecms.PT_YUVK

_littlecms.PT_HSV_swigconstant(_littlecms)
PT_HSV = _littlecms.PT_HSV

_littlecms.PT_HLS_swigconstant(_littlecms)
PT_HLS = _littlecms.PT_HLS

_littlecms.PT_Yxy_swigconstant(_littlecms)
PT_Yxy = _littlecms.PT_Yxy

_littlecms.PT_MCH1_swigconstant(_littlecms)
PT_MCH1 = _littlecms.PT_MCH1

_littlecms.PT_MCH2_swigconstant(_littlecms)
PT_MCH2 = _littlecms.PT_MCH2

_littlecms.PT_MCH3_swigconstant(_littlecms)
PT_MCH3 = _littlecms.PT_MCH3

_littlecms.PT_MCH4_swigconstant(_littlecms)
PT_MCH4 = _littlecms.PT_MCH4

_littlecms.PT_MCH5_swigconstant(_littlecms)
PT_MCH5 = _littlecms.PT_MCH5

_littlecms.PT_MCH6_swigconstant(_littlecms)
PT_MCH6 = _littlecms.PT_MCH6

_littlecms.PT_MCH7_swigconstant(_littlecms)
PT_MCH7 = _littlecms.PT_MCH7

_littlecms.PT_MCH8_swigconstant(_littlecms)
PT_MCH8 = _littlecms.PT_MCH8

_littlecms.PT_MCH9_swigconstant(_littlecms)
PT_MCH9 = _littlecms.PT_MCH9

_littlecms.PT_MCH10_swigconstant(_littlecms)
PT_MCH10 = _littlecms.PT_MCH10

_littlecms.PT_MCH11_swigconstant(_littlecms)
PT_MCH11 = _littlecms.PT_MCH11

_littlecms.PT_MCH12_swigconstant(_littlecms)
PT_MCH12 = _littlecms.PT_MCH12

_littlecms.PT_MCH13_swigconstant(_littlecms)
PT_MCH13 = _littlecms.PT_MCH13

_littlecms.PT_MCH14_swigconstant(_littlecms)
PT_MCH14 = _littlecms.PT_MCH14

_littlecms.PT_MCH15_swigconstant(_littlecms)
PT_MCH15 = _littlecms.PT_MCH15

_littlecms.PT_LabV2_swigconstant(_littlecms)
PT_LabV2 = _littlecms.PT_LabV2

_littlecms.TYPE_GRAY_8_swigconstant(_littlecms)
TYPE_GRAY_8 = _littlecms.TYPE_GRAY_8

_littlecms.TYPE_GRAY_8_REV_swigconstant(_littlecms)
TYPE_GRAY_8_REV = _littlecms.TYPE_GRAY_8_REV

_littlecms.TYPE_GRAY_16_swigconstant(_littlecms)
TYPE_GRAY_16 = _littlecms.TYPE_GRAY_16

_littlecms.TYPE_GRAY_16_REV_swigconstant(_littlecms)
TYPE_GRAY_16_REV = _littlecms.TYPE_GRAY_16_REV

_littlecms.TYPE_GRAY_16_SE_swigconstant(_littlecms)
TYPE_GRAY_16_SE = _littlecms.TYPE_GRAY_16_SE

_littlecms.TYPE_GRAYA_8_swigconstant(_littlecms)
TYPE_GRAYA_8 = _littlecms.TYPE_GRAYA_8

_littlecms.TYPE_GRAYA_16_swigconstant(_littlecms)
TYPE_GRAYA_16 = _littlecms.TYPE_GRAYA_16

_littlecms.TYPE_GRAYA_16_SE_swigconstant(_littlecms)
TYPE_GRAYA_16_SE = _littlecms.TYPE_GRAYA_16_SE

_littlecms.TYPE_GRAYA_8_PLANAR_swigconstant(_littlecms)
TYPE_GRAYA_8_PLANAR = _littlecms.TYPE_GRAYA_8_PLANAR

_littlecms.TYPE_GRAYA_16_PLANAR_swigconstant(_littlecms)
TYPE_GRAYA_16_PLANAR = _littlecms.TYPE_GRAYA_16_PLANAR

_littlecms.TYPE_RGB_8_swigconstant(_littlecms)
TYPE_RGB_8 = _littlecms.TYPE_RGB_8

_littlecms.TYPE_RGB_8_PLANAR_swigconstant(_littlecms)
TYPE_RGB_8_PLANAR = _littlecms.TYPE_RGB_8_PLANAR

_littlecms.TYPE_BGR_8_swigconstant(_littlecms)
TYPE_BGR_8 = _littlecms.TYPE_BGR_8

_littlecms.TYPE_BGR_8_PLANAR_swigconstant(_littlecms)
TYPE_BGR_8_PLANAR = _littlecms.TYPE_BGR_8_PLANAR

_littlecms.TYPE_RGB_16_swigconstant(_littlecms)
TYPE_RGB_16 = _littlecms.TYPE_RGB_16

_littlecms.TYPE_RGB_16_PLANAR_swigconstant(_littlecms)
TYPE_RGB_16_PLANAR = _littlecms.TYPE_RGB_16_PLANAR

_littlecms.TYPE_RGB_16_SE_swigconstant(_littlecms)
TYPE_RGB_16_SE = _littlecms.TYPE_RGB_16_SE

_littlecms.TYPE_BGR_16_swigconstant(_littlecms)
TYPE_BGR_16 = _littlecms.TYPE_BGR_16

_littlecms.TYPE_BGR_16_PLANAR_swigconstant(_littlecms)
TYPE_BGR_16_PLANAR = _littlecms.TYPE_BGR_16_PLANAR

_littlecms.TYPE_BGR_16_SE_swigconstant(_littlecms)
TYPE_BGR_16_SE = _littlecms.TYPE_BGR_16_SE

_littlecms.TYPE_RGBA_8_swigconstant(_littlecms)
TYPE_RGBA_8 = _littlecms.TYPE_RGBA_8

_littlecms.TYPE_RGBA_8_PLANAR_swigconstant(_littlecms)
TYPE_RGBA_8_PLANAR = _littlecms.TYPE_RGBA_8_PLANAR

_littlecms.TYPE_RGBA_16_swigconstant(_littlecms)
TYPE_RGBA_16 = _littlecms.TYPE_RGBA_16

_littlecms.TYPE_RGBA_16_PLANAR_swigconstant(_littlecms)
TYPE_RGBA_16_PLANAR = _littlecms.TYPE_RGBA_16_PLANAR

_littlecms.TYPE_RGBA_16_SE_swigconstant(_littlecms)
TYPE_RGBA_16_SE = _littlecms.TYPE_RGBA_16_SE

_littlecms.TYPE_ARGB_8_swigconstant(_littlecms)
TYPE_ARGB_8 = _littlecms.TYPE_ARGB_8

_littlecms.TYPE_ARGB_8_PLANAR_swigconstant(_littlecms)
TYPE_ARGB_8_PLANAR = _littlecms.TYPE_ARGB_8_PLANAR

_littlecms.TYPE_ARGB_16_swigconstant(_littlecms)
TYPE_ARGB_16 = _littlecms.TYPE_ARGB_16

_littlecms.TYPE_ABGR_8_swigconstant(_littlecms)
TYPE_ABGR_8 = _littlecms.TYPE_ABGR_8

_littlecms.TYPE_ABGR_8_PLANAR_swigconstant(_littlecms)
TYPE_ABGR_8_PLANAR = _littlecms.TYPE_ABGR_8_PLANAR

_littlecms.TYPE_ABGR_16_swigconstant(_littlecms)
TYPE_ABGR_16 = _littlecms.TYPE_ABGR_16

_littlecms.TYPE_ABGR_16_PLANAR_swigconstant(_littlecms)
TYPE_ABGR_16_PLANAR = _littlecms.TYPE_ABGR_16_PLANAR

_littlecms.TYPE_ABGR_16_SE_swigconstant(_littlecms)
TYPE_ABGR_16_SE = _littlecms.TYPE_ABGR_16_SE

_littlecms.TYPE_BGRA_8_swigconstant(_littlecms)
TYPE_BGRA_8 = _littlecms.TYPE_BGRA_8

_littlecms.TYPE_BGRA_8_PLANAR_swigconstant(_littlecms)
TYPE_BGRA_8_PLANAR = _littlecms.TYPE_BGRA_8_PLANAR

_littlecms.TYPE_BGRA_16_swigconstant(_littlecms)
TYPE_BGRA_16 = _littlecms.TYPE_BGRA_16

_littlecms.TYPE_BGRA_16_SE_swigconstant(_littlecms)
TYPE_BGRA_16_SE = _littlecms.TYPE_BGRA_16_SE

_littlecms.TYPE_CMY_8_swigconstant(_littlecms)
TYPE_CMY_8 = _littlecms.TYPE_CMY_8

_littlecms.TYPE_CMY_8_PLANAR_swigconstant(_littlecms)
TYPE_CMY_8_PLANAR = _littlecms.TYPE_CMY_8_PLANAR

_littlecms.TYPE_CMY_16_swigconstant(_littlecms)
TYPE_CMY_16 = _littlecms.TYPE_CMY_16

_littlecms.TYPE_CMY_16_PLANAR_swigconstant(_littlecms)
TYPE_CMY_16_PLANAR = _littlecms.TYPE_CMY_16_PLANAR

_littlecms.TYPE_CMY_16_SE_swigconstant(_littlecms)
TYPE_CMY_16_SE = _littlecms.TYPE_CMY_16_SE

_littlecms.TYPE_CMYK_8_swigconstant(_littlecms)
TYPE_CMYK_8 = _littlecms.TYPE_CMYK_8

_littlecms.TYPE_CMYKA_8_swigconstant(_littlecms)
TYPE_CMYKA_8 = _littlecms.TYPE_CMYKA_8

_littlecms.TYPE_CMYK_8_REV_swigconstant(_littlecms)
TYPE_CMYK_8_REV = _littlecms.TYPE_CMYK_8_REV

_littlecms.TYPE_YUVK_8_swigconstant(_littlecms)
TYPE_YUVK_8 = _littlecms.TYPE_YUVK_8

_littlecms.TYPE_CMYK_8_PLANAR_swigconstant(_littlecms)
TYPE_CMYK_8_PLANAR = _littlecms.TYPE_CMYK_8_PLANAR

_littlecms.TYPE_CMYK_16_swigconstant(_littlecms)
TYPE_CMYK_16 = _littlecms.TYPE_CMYK_16

_littlecms.TYPE_CMYK_16_REV_swigconstant(_littlecms)
TYPE_CMYK_16_REV = _littlecms.TYPE_CMYK_16_REV

_littlecms.TYPE_YUVK_16_swigconstant(_littlecms)
TYPE_YUVK_16 = _littlecms.TYPE_YUVK_16

_littlecms.TYPE_CMYK_16_PLANAR_swigconstant(_littlecms)
TYPE_CMYK_16_PLANAR = _littlecms.TYPE_CMYK_16_PLANAR

_littlecms.TYPE_CMYK_16_SE_swigconstant(_littlecms)
TYPE_CMYK_16_SE = _littlecms.TYPE_CMYK_16_SE

_littlecms.TYPE_KYMC_8_swigconstant(_littlecms)
TYPE_KYMC_8 = _littlecms.TYPE_KYMC_8

_littlecms.TYPE_KYMC_16_swigconstant(_littlecms)
TYPE_KYMC_16 = _littlecms.TYPE_KYMC_16

_littlecms.TYPE_KYMC_16_SE_swigconstant(_littlecms)
TYPE_KYMC_16_SE = _littlecms.TYPE_KYMC_16_SE

_littlecms.TYPE_KCMY_8_swigconstant(_littlecms)
TYPE_KCMY_8 = _littlecms.TYPE_KCMY_8

_littlecms.TYPE_KCMY_8_REV_swigconstant(_littlecms)
TYPE_KCMY_8_REV = _littlecms.TYPE_KCMY_8_REV

_littlecms.TYPE_KCMY_16_swigconstant(_littlecms)
TYPE_KCMY_16 = _littlecms.TYPE_KCMY_16

_littlecms.TYPE_KCMY_16_REV_swigconstant(_littlecms)
TYPE_KCMY_16_REV = _littlecms.TYPE_KCMY_16_REV

_littlecms.TYPE_KCMY_16_SE_swigconstant(_littlecms)
TYPE_KCMY_16_SE = _littlecms.TYPE_KCMY_16_SE

_littlecms.TYPE_CMYK5_8_swigconstant(_littlecms)
TYPE_CMYK5_8 = _littlecms.TYPE_CMYK5_8

_littlecms.TYPE_CMYK5_16_swigconstant(_littlecms)
TYPE_CMYK5_16 = _littlecms.TYPE_CMYK5_16

_littlecms.TYPE_CMYK5_16_SE_swigconstant(_littlecms)
TYPE_CMYK5_16_SE = _littlecms.TYPE_CMYK5_16_SE

_littlecms.TYPE_KYMC5_8_swigconstant(_littlecms)
TYPE_KYMC5_8 = _littlecms.TYPE_KYMC5_8

_littlecms.TYPE_KYMC5_16_swigconstant(_littlecms)
TYPE_KYMC5_16 = _littlecms.TYPE_KYMC5_16

_littlecms.TYPE_KYMC5_16_SE_swigconstant(_littlecms)
TYPE_KYMC5_16_SE = _littlecms.TYPE_KYMC5_16_SE

_littlecms.TYPE_CMYK6_8_swigconstant(_littlecms)
TYPE_CMYK6_8 = _littlecms.TYPE_CMYK6_8

_littlecms.TYPE_CMYK6_8_PLANAR_swigconstant(_littlecms)
TYPE_CMYK6_8_PLANAR = _littlecms.TYPE_CMYK6_8_PLANAR

_littlecms.TYPE_CMYK6_16_swigconstant(_littlecms)
TYPE_CMYK6_16 = _littlecms.TYPE_CMYK6_16

_littlecms.TYPE_CMYK6_16_PLANAR_swigconstant(_littlecms)
TYPE_CMYK6_16_PLANAR = _littlecms.TYPE_CMYK6_16_PLANAR

_littlecms.TYPE_CMYK6_16_SE_swigconstant(_littlecms)
TYPE_CMYK6_16_SE = _littlecms.TYPE_CMYK6_16_SE

_littlecms.TYPE_CMYK7_8_swigconstant(_littlecms)
TYPE_CMYK7_8 = _littlecms.TYPE_CMYK7_8

_littlecms.TYPE_CMYK7_16_swigconstant(_littlecms)
TYPE_CMYK7_16 = _littlecms.TYPE_CMYK7_16

_littlecms.TYPE_CMYK7_16_SE_swigconstant(_littlecms)
TYPE_CMYK7_16_SE = _littlecms.TYPE_CMYK7_16_SE

_littlecms.TYPE_KYMC7_8_swigconstant(_littlecms)
TYPE_KYMC7_8 = _littlecms.TYPE_KYMC7_8

_littlecms.TYPE_KYMC7_16_swigconstant(_littlecms)
TYPE_KYMC7_16 = _littlecms.TYPE_KYMC7_16

_littlecms.TYPE_KYMC7_16_SE_swigconstant(_littlecms)
TYPE_KYMC7_16_SE = _littlecms.TYPE_KYMC7_16_SE

_littlecms.TYPE_CMYK8_8_swigconstant(_littlecms)
TYPE_CMYK8_8 = _littlecms.TYPE_CMYK8_8

_littlecms.TYPE_CMYK8_16_swigconstant(_littlecms)
TYPE_CMYK8_16 = _littlecms.TYPE_CMYK8_16

_littlecms.TYPE_CMYK8_16_SE_swigconstant(_littlecms)
TYPE_CMYK8_16_SE = _littlecms.TYPE_CMYK8_16_SE

_littlecms.TYPE_KYMC8_8_swigconstant(_littlecms)
TYPE_KYMC8_8 = _littlecms.TYPE_KYMC8_8

_littlecms.TYPE_KYMC8_16_swigconstant(_littlecms)
TYPE_KYMC8_16 = _littlecms.TYPE_KYMC8_16

_littlecms.TYPE_KYMC8_16_SE_swigconstant(_littlecms)
TYPE_KYMC8_16_SE = _littlecms.TYPE_KYMC8_16_SE

_littlecms.TYPE_CMYK9_8_swigconstant(_littlecms)
TYPE_CMYK9_8 = _littlecms.TYPE_CMYK9_8

_littlecms.TYPE_CMYK9_16_swigconstant(_littlecms)
TYPE_CMYK9_16 = _littlecms.TYPE_CMYK9_16

_littlecms.TYPE_CMYK9_16_SE_swigconstant(_littlecms)
TYPE_CMYK9_16_SE = _littlecms.TYPE_CMYK9_16_SE

_littlecms.TYPE_KYMC9_8_swigconstant(_littlecms)
TYPE_KYMC9_8 = _littlecms.TYPE_KYMC9_8

_littlecms.TYPE_KYMC9_16_swigconstant(_littlecms)
TYPE_KYMC9_16 = _littlecms.TYPE_KYMC9_16

_littlecms.TYPE_KYMC9_16_SE_swigconstant(_littlecms)
TYPE_KYMC9_16_SE = _littlecms.TYPE_KYMC9_16_SE

_littlecms.TYPE_CMYK10_8_swigconstant(_littlecms)
TYPE_CMYK10_8 = _littlecms.TYPE_CMYK10_8

_littlecms.TYPE_CMYK10_16_swigconstant(_littlecms)
TYPE_CMYK10_16 = _littlecms.TYPE_CMYK10_16

_littlecms.TYPE_CMYK10_16_SE_swigconstant(_littlecms)
TYPE_CMYK10_16_SE = _littlecms.TYPE_CMYK10_16_SE

_littlecms.TYPE_KYMC10_8_swigconstant(_littlecms)
TYPE_KYMC10_8 = _littlecms.TYPE_KYMC10_8

_littlecms.TYPE_KYMC10_16_swigconstant(_littlecms)
TYPE_KYMC10_16 = _littlecms.TYPE_KYMC10_16

_littlecms.TYPE_KYMC10_16_SE_swigconstant(_littlecms)
TYPE_KYMC10_16_SE = _littlecms.TYPE_KYMC10_16_SE

_littlecms.TYPE_CMYK11_8_swigconstant(_littlecms)
TYPE_CMYK11_8 = _littlecms.TYPE_CMYK11_8

_littlecms.TYPE_CMYK11_16_swigconstant(_littlecms)
TYPE_CMYK11_16 = _littlecms.TYPE_CMYK11_16

_littlecms.TYPE_CMYK11_16_SE_swigconstant(_littlecms)
TYPE_CMYK11_16_SE = _littlecms.TYPE_CMYK11_16_SE

_littlecms.TYPE_KYMC11_8_swigconstant(_littlecms)
TYPE_KYMC11_8 = _littlecms.TYPE_KYMC11_8

_littlecms.TYPE_KYMC11_16_swigconstant(_littlecms)
TYPE_KYMC11_16 = _littlecms.TYPE_KYMC11_16

_littlecms.TYPE_KYMC11_16_SE_swigconstant(_littlecms)
TYPE_KYMC11_16_SE = _littlecms.TYPE_KYMC11_16_SE

_littlecms.TYPE_CMYK12_8_swigconstant(_littlecms)
TYPE_CMYK12_8 = _littlecms.TYPE_CMYK12_8

_littlecms.TYPE_CMYK12_16_swigconstant(_littlecms)
TYPE_CMYK12_16 = _littlecms.TYPE_CMYK12_16

_littlecms.TYPE_CMYK12_16_SE_swigconstant(_littlecms)
TYPE_CMYK12_16_SE = _littlecms.TYPE_CMYK12_16_SE

_littlecms.TYPE_KYMC12_8_swigconstant(_littlecms)
TYPE_KYMC12_8 = _littlecms.TYPE_KYMC12_8

_littlecms.TYPE_KYMC12_16_swigconstant(_littlecms)
TYPE_KYMC12_16 = _littlecms.TYPE_KYMC12_16

_littlecms.TYPE_KYMC12_16_SE_swigconstant(_littlecms)
TYPE_KYMC12_16_SE = _littlecms.TYPE_KYMC12_16_SE

_littlecms.TYPE_XYZ_16_swigconstant(_littlecms)
TYPE_XYZ_16 = _littlecms.TYPE_XYZ_16

_littlecms.TYPE_Lab_8_swigconstant(_littlecms)
TYPE_Lab_8 = _littlecms.TYPE_Lab_8

_littlecms.TYPE_LabV2_8_swigconstant(_littlecms)
TYPE_LabV2_8 = _littlecms.TYPE_LabV2_8

_littlecms.TYPE_ALab_8_swigconstant(_littlecms)
TYPE_ALab_8 = _littlecms.TYPE_ALab_8

_littlecms.TYPE_ALabV2_8_swigconstant(_littlecms)
TYPE_ALabV2_8 = _littlecms.TYPE_ALabV2_8

_littlecms.TYPE_Lab_16_swigconstant(_littlecms)
TYPE_Lab_16 = _littlecms.TYPE_Lab_16

_littlecms.TYPE_LabV2_16_swigconstant(_littlecms)
TYPE_LabV2_16 = _littlecms.TYPE_LabV2_16

_littlecms.TYPE_Yxy_16_swigconstant(_littlecms)
TYPE_Yxy_16 = _littlecms.TYPE_Yxy_16

_littlecms.TYPE_YCbCr_8_swigconstant(_littlecms)
TYPE_YCbCr_8 = _littlecms.TYPE_YCbCr_8

_littlecms.TYPE_YCbCr_8_PLANAR_swigconstant(_littlecms)
TYPE_YCbCr_8_PLANAR = _littlecms.TYPE_YCbCr_8_PLANAR

_littlecms.TYPE_YCbCr_16_swigconstant(_littlecms)
TYPE_YCbCr_16 = _littlecms.TYPE_YCbCr_16

_littlecms.TYPE_YCbCr_16_PLANAR_swigconstant(_littlecms)
TYPE_YCbCr_16_PLANAR = _littlecms.TYPE_YCbCr_16_PLANAR

_littlecms.TYPE_YCbCr_16_SE_swigconstant(_littlecms)
TYPE_YCbCr_16_SE = _littlecms.TYPE_YCbCr_16_SE

_littlecms.TYPE_YUV_8_swigconstant(_littlecms)
TYPE_YUV_8 = _littlecms.TYPE_YUV_8

_littlecms.TYPE_YUV_8_PLANAR_swigconstant(_littlecms)
TYPE_YUV_8_PLANAR = _littlecms.TYPE_YUV_8_PLANAR

_littlecms.TYPE_YUV_16_swigconstant(_littlecms)
TYPE_YUV_16 = _littlecms.TYPE_YUV_16

_littlecms.TYPE_YUV_16_PLANAR_swigconstant(_littlecms)
TYPE_YUV_16_PLANAR = _littlecms.TYPE_YUV_16_PLANAR

_littlecms.TYPE_YUV_16_SE_swigconstant(_littlecms)
TYPE_YUV_16_SE = _littlecms.TYPE_YUV_16_SE

_littlecms.TYPE_HLS_8_swigconstant(_littlecms)
TYPE_HLS_8 = _littlecms.TYPE_HLS_8

_littlecms.TYPE_HLS_8_PLANAR_swigconstant(_littlecms)
TYPE_HLS_8_PLANAR = _littlecms.TYPE_HLS_8_PLANAR

_littlecms.TYPE_HLS_16_swigconstant(_littlecms)
TYPE_HLS_16 = _littlecms.TYPE_HLS_16

_littlecms.TYPE_HLS_16_PLANAR_swigconstant(_littlecms)
TYPE_HLS_16_PLANAR = _littlecms.TYPE_HLS_16_PLANAR

_littlecms.TYPE_HLS_16_SE_swigconstant(_littlecms)
TYPE_HLS_16_SE = _littlecms.TYPE_HLS_16_SE

_littlecms.TYPE_HSV_8_swigconstant(_littlecms)
TYPE_HSV_8 = _littlecms.TYPE_HSV_8

_littlecms.TYPE_HSV_8_PLANAR_swigconstant(_littlecms)
TYPE_HSV_8_PLANAR = _littlecms.TYPE_HSV_8_PLANAR

_littlecms.TYPE_HSV_16_swigconstant(_littlecms)
TYPE_HSV_16 = _littlecms.TYPE_HSV_16

_littlecms.TYPE_HSV_16_PLANAR_swigconstant(_littlecms)
TYPE_HSV_16_PLANAR = _littlecms.TYPE_HSV_16_PLANAR

_littlecms.TYPE_HSV_16_SE_swigconstant(_littlecms)
TYPE_HSV_16_SE = _littlecms.TYPE_HSV_16_SE

_littlecms.TYPE_NAMED_COLOR_INDEX_swigconstant(_littlecms)
TYPE_NAMED_COLOR_INDEX = _littlecms.TYPE_NAMED_COLOR_INDEX

_littlecms.TYPE_XYZ_FLT_swigconstant(_littlecms)
TYPE_XYZ_FLT = _littlecms.TYPE_XYZ_FLT

_littlecms.TYPE_Lab_FLT_swigconstant(_littlecms)
TYPE_Lab_FLT = _littlecms.TYPE_Lab_FLT

_littlecms.TYPE_LabA_FLT_swigconstant(_littlecms)
TYPE_LabA_FLT = _littlecms.TYPE_LabA_FLT

_littlecms.TYPE_GRAY_FLT_swigconstant(_littlecms)
TYPE_GRAY_FLT = _littlecms.TYPE_GRAY_FLT

_littlecms.TYPE_RGB_FLT_swigconstant(_littlecms)
TYPE_RGB_FLT = _littlecms.TYPE_RGB_FLT

_littlecms.TYPE_RGBA_FLT_swigconstant(_littlecms)
TYPE_RGBA_FLT = _littlecms.TYPE_RGBA_FLT

_littlecms.TYPE_ARGB_FLT_swigconstant(_littlecms)
TYPE_ARGB_FLT = _littlecms.TYPE_ARGB_FLT

_littlecms.TYPE_BGR_FLT_swigconstant(_littlecms)
TYPE_BGR_FLT = _littlecms.TYPE_BGR_FLT

_littlecms.TYPE_BGRA_FLT_swigconstant(_littlecms)
TYPE_BGRA_FLT = _littlecms.TYPE_BGRA_FLT

_littlecms.TYPE_ABGR_FLT_swigconstant(_littlecms)
TYPE_ABGR_FLT = _littlecms.TYPE_ABGR_FLT

_littlecms.TYPE_CMYK_FLT_swigconstant(_littlecms)
TYPE_CMYK_FLT = _littlecms.TYPE_CMYK_FLT

_littlecms.TYPE_XYZ_DBL_swigconstant(_littlecms)
TYPE_XYZ_DBL = _littlecms.TYPE_XYZ_DBL

_littlecms.TYPE_Lab_DBL_swigconstant(_littlecms)
TYPE_Lab_DBL = _littlecms.TYPE_Lab_DBL

_littlecms.TYPE_GRAY_DBL_swigconstant(_littlecms)
TYPE_GRAY_DBL = _littlecms.TYPE_GRAY_DBL

_littlecms.TYPE_RGB_DBL_swigconstant(_littlecms)
TYPE_RGB_DBL = _littlecms.TYPE_RGB_DBL

_littlecms.TYPE_BGR_DBL_swigconstant(_littlecms)
TYPE_BGR_DBL = _littlecms.TYPE_BGR_DBL

_littlecms.TYPE_CMYK_DBL_swigconstant(_littlecms)
TYPE_CMYK_DBL = _littlecms.TYPE_CMYK_DBL

_littlecms.TYPE_GRAY_HALF_FLT_swigconstant(_littlecms)
TYPE_GRAY_HALF_FLT = _littlecms.TYPE_GRAY_HALF_FLT

_littlecms.TYPE_RGB_HALF_FLT_swigconstant(_littlecms)
TYPE_RGB_HALF_FLT = _littlecms.TYPE_RGB_HALF_FLT

_littlecms.TYPE_RGBA_HALF_FLT_swigconstant(_littlecms)
TYPE_RGBA_HALF_FLT = _littlecms.TYPE_RGBA_HALF_FLT

_littlecms.TYPE_CMYK_HALF_FLT_swigconstant(_littlecms)
TYPE_CMYK_HALF_FLT = _littlecms.TYPE_CMYK_HALF_FLT

_littlecms.TYPE_ARGB_HALF_FLT_swigconstant(_littlecms)
TYPE_ARGB_HALF_FLT = _littlecms.TYPE_ARGB_HALF_FLT

_littlecms.TYPE_BGR_HALF_FLT_swigconstant(_littlecms)
TYPE_BGR_HALF_FLT = _littlecms.TYPE_BGR_HALF_FLT

_littlecms.TYPE_BGRA_HALF_FLT_swigconstant(_littlecms)
TYPE_BGRA_HALF_FLT = _littlecms.TYPE_BGRA_HALF_FLT

_littlecms.TYPE_ABGR_HALF_FLT_swigconstant(_littlecms)
TYPE_ABGR_HALF_FLT = _littlecms.TYPE_ABGR_HALF_FLT
class cmsCIEXYZ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIEXYZ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIEXYZ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["X"] = _littlecms.cmsCIEXYZ_X_set
    __swig_getmethods__["X"] = _littlecms.cmsCIEXYZ_X_get
    if _newclass:
        X = _swig_property(_littlecms.cmsCIEXYZ_X_get, _littlecms.cmsCIEXYZ_X_set)
    __swig_setmethods__["Y"] = _littlecms.cmsCIEXYZ_Y_set
    __swig_getmethods__["Y"] = _littlecms.cmsCIEXYZ_Y_get
    if _newclass:
        Y = _swig_property(_littlecms.cmsCIEXYZ_Y_get, _littlecms.cmsCIEXYZ_Y_set)
    __swig_setmethods__["Z"] = _littlecms.cmsCIEXYZ_Z_set
    __swig_getmethods__["Z"] = _littlecms.cmsCIEXYZ_Z_get
    if _newclass:
        Z = _swig_property(_littlecms.cmsCIEXYZ_Z_get, _littlecms.cmsCIEXYZ_Z_set)

    def __init__(self):
        this = _littlecms.new_cmsCIEXYZ()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsCIEXYZ
    __del__ = lambda self: None
cmsCIEXYZ_swigregister = _littlecms.cmsCIEXYZ_swigregister
cmsCIEXYZ_swigregister(cmsCIEXYZ)

class cmsCIExyY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIExyY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIExyY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _littlecms.cmsCIExyY_x_set
    __swig_getmethods__["x"] = _littlecms.cmsCIExyY_x_get
    if _newclass:
        x = _swig_property(_littlecms.cmsCIExyY_x_get, _littlecms.cmsCIExyY_x_set)
    __swig_setmethods__["y"] = _littlecms.cmsCIExyY_y_set
    __swig_getmethods__["y"] = _littlecms.cmsCIExyY_y_get
    if _newclass:
        y = _swig_property(_littlecms.cmsCIExyY_y_get, _littlecms.cmsCIExyY_y_set)
    __swig_setmethods__["Y"] = _littlecms.cmsCIExyY_Y_set
    __swig_getmethods__["Y"] = _littlecms.cmsCIExyY_Y_get
    if _newclass:
        Y = _swig_property(_littlecms.cmsCIExyY_Y_get, _littlecms.cmsCIExyY_Y_set)

    def __init__(self):
        this = _littlecms.new_cmsCIExyY()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsCIExyY
    __del__ = lambda self: None
cmsCIExyY_swigregister = _littlecms.cmsCIExyY_swigregister
cmsCIExyY_swigregister(cmsCIExyY)

class cmsCIELab(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIELab, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIELab, name)
    __repr__ = _swig_repr
    __swig_setmethods__["L"] = _littlecms.cmsCIELab_L_set
    __swig_getmethods__["L"] = _littlecms.cmsCIELab_L_get
    if _newclass:
        L = _swig_property(_littlecms.cmsCIELab_L_get, _littlecms.cmsCIELab_L_set)
    __swig_setmethods__["a"] = _littlecms.cmsCIELab_a_set
    __swig_getmethods__["a"] = _littlecms.cmsCIELab_a_get
    if _newclass:
        a = _swig_property(_littlecms.cmsCIELab_a_get, _littlecms.cmsCIELab_a_set)
    __swig_setmethods__["b"] = _littlecms.cmsCIELab_b_set
    __swig_getmethods__["b"] = _littlecms.cmsCIELab_b_get
    if _newclass:
        b = _swig_property(_littlecms.cmsCIELab_b_get, _littlecms.cmsCIELab_b_set)

    def __init__(self):
        this = _littlecms.new_cmsCIELab()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsCIELab
    __del__ = lambda self: None
cmsCIELab_swigregister = _littlecms.cmsCIELab_swigregister
cmsCIELab_swigregister(cmsCIELab)

class cmsCIELCh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIELCh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIELCh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["L"] = _littlecms.cmsCIELCh_L_set
    __swig_getmethods__["L"] = _littlecms.cmsCIELCh_L_get
    if _newclass:
        L = _swig_property(_littlecms.cmsCIELCh_L_get, _littlecms.cmsCIELCh_L_set)
    __swig_setmethods__["C"] = _littlecms.cmsCIELCh_C_set
    __swig_getmethods__["C"] = _littlecms.cmsCIELCh_C_get
    if _newclass:
        C = _swig_property(_littlecms.cmsCIELCh_C_get, _littlecms.cmsCIELCh_C_set)
    __swig_setmethods__["h"] = _littlecms.cmsCIELCh_h_set
    __swig_getmethods__["h"] = _littlecms.cmsCIELCh_h_get
    if _newclass:
        h = _swig_property(_littlecms.cmsCIELCh_h_get, _littlecms.cmsCIELCh_h_set)

    def __init__(self):
        this = _littlecms.new_cmsCIELCh()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsCIELCh
    __del__ = lambda self: None
cmsCIELCh_swigregister = _littlecms.cmsCIELCh_swigregister
cmsCIELCh_swigregister(cmsCIELCh)

class cmsJCh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsJCh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsJCh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["J"] = _littlecms.cmsJCh_J_set
    __swig_getmethods__["J"] = _littlecms.cmsJCh_J_get
    if _newclass:
        J = _swig_property(_littlecms.cmsJCh_J_get, _littlecms.cmsJCh_J_set)
    __swig_setmethods__["C"] = _littlecms.cmsJCh_C_set
    __swig_getmethods__["C"] = _littlecms.cmsJCh_C_get
    if _newclass:
        C = _swig_property(_littlecms.cmsJCh_C_get, _littlecms.cmsJCh_C_set)
    __swig_setmethods__["h"] = _littlecms.cmsJCh_h_set
    __swig_getmethods__["h"] = _littlecms.cmsJCh_h_get
    if _newclass:
        h = _swig_property(_littlecms.cmsJCh_h_get, _littlecms.cmsJCh_h_set)

    def __init__(self):
        this = _littlecms.new_cmsJCh()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsJCh
    __del__ = lambda self: None
cmsJCh_swigregister = _littlecms.cmsJCh_swigregister
cmsJCh_swigregister(cmsJCh)

class cmsCIEXYZTRIPLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIEXYZTRIPLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIEXYZTRIPLE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Red"] = _littlecms.cmsCIEXYZTRIPLE_Red_set
    __swig_getmethods__["Red"] = _littlecms.cmsCIEXYZTRIPLE_Red_get
    if _newclass:
        Red = _swig_property(_littlecms.cmsCIEXYZTRIPLE_Red_get, _littlecms.cmsCIEXYZTRIPLE_Red_set)
    __swig_setmethods__["Green"] = _littlecms.cmsCIEXYZTRIPLE_Green_set
    __swig_getmethods__["Green"] = _littlecms.cmsCIEXYZTRIPLE_Green_get
    if _newclass:
        Green = _swig_property(_littlecms.cmsCIEXYZTRIPLE_Green_get, _littlecms.cmsCIEXYZTRIPLE_Green_set)
    __swig_setmethods__["Blue"] = _littlecms.cmsCIEXYZTRIPLE_Blue_set
    __swig_getmethods__["Blue"] = _littlecms.cmsCIEXYZTRIPLE_Blue_get
    if _newclass:
        Blue = _swig_property(_littlecms.cmsCIEXYZTRIPLE_Blue_get, _littlecms.cmsCIEXYZTRIPLE_Blue_set)

    def __init__(self):
        this = _littlecms.new_cmsCIEXYZTRIPLE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsCIEXYZTRIPLE
    __del__ = lambda self: None
cmsCIEXYZTRIPLE_swigregister = _littlecms.cmsCIEXYZTRIPLE_swigregister
cmsCIEXYZTRIPLE_swigregister(cmsCIEXYZTRIPLE)

class cmsCIExyYTRIPLE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCIExyYTRIPLE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCIExyYTRIPLE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Red"] = _littlecms.cmsCIExyYTRIPLE_Red_set
    __swig_getmethods__["Red"] = _littlecms.cmsCIExyYTRIPLE_Red_get
    if _newclass:
        Red = _swig_property(_littlecms.cmsCIExyYTRIPLE_Red_get, _littlecms.cmsCIExyYTRIPLE_Red_set)
    __swig_setmethods__["Green"] = _littlecms.cmsCIExyYTRIPLE_Green_set
    __swig_getmethods__["Green"] = _littlecms.cmsCIExyYTRIPLE_Green_get
    if _newclass:
        Green = _swig_property(_littlecms.cmsCIExyYTRIPLE_Green_get, _littlecms.cmsCIExyYTRIPLE_Green_set)
    __swig_setmethods__["Blue"] = _littlecms.cmsCIExyYTRIPLE_Blue_set
    __swig_getmethods__["Blue"] = _littlecms.cmsCIExyYTRIPLE_Blue_get
    if _newclass:
        Blue = _swig_property(_littlecms.cmsCIExyYTRIPLE_Blue_get, _littlecms.cmsCIExyYTRIPLE_Blue_set)

    def __init__(self):
        this = _littlecms.new_cmsCIExyYTRIPLE()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsCIExyYTRIPLE
    __del__ = lambda self: None
cmsCIExyYTRIPLE_swigregister = _littlecms.cmsCIExyYTRIPLE_swigregister
cmsCIExyYTRIPLE_swigregister(cmsCIExyYTRIPLE)


_littlecms.cmsILLUMINANT_TYPE_UNKNOWN_swigconstant(_littlecms)
cmsILLUMINANT_TYPE_UNKNOWN = _littlecms.cmsILLUMINANT_TYPE_UNKNOWN

_littlecms.cmsILLUMINANT_TYPE_D50_swigconstant(_littlecms)
cmsILLUMINANT_TYPE_D50 = _littlecms.cmsILLUMINANT_TYPE_D50

_littlecms.cmsILLUMINANT_TYPE_D65_swigconstant(_littlecms)
cmsILLUMINANT_TYPE_D65 = _littlecms.cmsILLUMINANT_TYPE_D65

_littlecms.cmsILLUMINANT_TYPE_D93_swigconstant(_littlecms)
cmsILLUMINANT_TYPE_D93 = _littlecms.cmsILLUMINANT_TYPE_D93

_littlecms.cmsILLUMINANT_TYPE_F2_swigconstant(_littlecms)
cmsILLUMINANT_TYPE_F2 = _littlecms.cmsILLUMINANT_TYPE_F2

_littlecms.cmsILLUMINANT_TYPE_D55_swigconstant(_littlecms)
cmsILLUMINANT_TYPE_D55 = _littlecms.cmsILLUMINANT_TYPE_D55

_littlecms.cmsILLUMINANT_TYPE_A_swigconstant(_littlecms)
cmsILLUMINANT_TYPE_A = _littlecms.cmsILLUMINANT_TYPE_A

_littlecms.cmsILLUMINANT_TYPE_E_swigconstant(_littlecms)
cmsILLUMINANT_TYPE_E = _littlecms.cmsILLUMINANT_TYPE_E

_littlecms.cmsILLUMINANT_TYPE_F8_swigconstant(_littlecms)
cmsILLUMINANT_TYPE_F8 = _littlecms.cmsILLUMINANT_TYPE_F8
class cmsICCMeasurementConditions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsICCMeasurementConditions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsICCMeasurementConditions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Observer"] = _littlecms.cmsICCMeasurementConditions_Observer_set
    __swig_getmethods__["Observer"] = _littlecms.cmsICCMeasurementConditions_Observer_get
    if _newclass:
        Observer = _swig_property(_littlecms.cmsICCMeasurementConditions_Observer_get, _littlecms.cmsICCMeasurementConditions_Observer_set)
    __swig_setmethods__["Backing"] = _littlecms.cmsICCMeasurementConditions_Backing_set
    __swig_getmethods__["Backing"] = _littlecms.cmsICCMeasurementConditions_Backing_get
    if _newclass:
        Backing = _swig_property(_littlecms.cmsICCMeasurementConditions_Backing_get, _littlecms.cmsICCMeasurementConditions_Backing_set)
    __swig_setmethods__["Geometry"] = _littlecms.cmsICCMeasurementConditions_Geometry_set
    __swig_getmethods__["Geometry"] = _littlecms.cmsICCMeasurementConditions_Geometry_get
    if _newclass:
        Geometry = _swig_property(_littlecms.cmsICCMeasurementConditions_Geometry_get, _littlecms.cmsICCMeasurementConditions_Geometry_set)
    __swig_setmethods__["Flare"] = _littlecms.cmsICCMeasurementConditions_Flare_set
    __swig_getmethods__["Flare"] = _littlecms.cmsICCMeasurementConditions_Flare_get
    if _newclass:
        Flare = _swig_property(_littlecms.cmsICCMeasurementConditions_Flare_get, _littlecms.cmsICCMeasurementConditions_Flare_set)
    __swig_setmethods__["IlluminantType"] = _littlecms.cmsICCMeasurementConditions_IlluminantType_set
    __swig_getmethods__["IlluminantType"] = _littlecms.cmsICCMeasurementConditions_IlluminantType_get
    if _newclass:
        IlluminantType = _swig_property(_littlecms.cmsICCMeasurementConditions_IlluminantType_get, _littlecms.cmsICCMeasurementConditions_IlluminantType_set)

    def __init__(self):
        this = _littlecms.new_cmsICCMeasurementConditions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsICCMeasurementConditions
    __del__ = lambda self: None
cmsICCMeasurementConditions_swigregister = _littlecms.cmsICCMeasurementConditions_swigregister
cmsICCMeasurementConditions_swigregister(cmsICCMeasurementConditions)

class cmsICCViewingConditions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsICCViewingConditions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsICCViewingConditions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IlluminantXYZ"] = _littlecms.cmsICCViewingConditions_IlluminantXYZ_set
    __swig_getmethods__["IlluminantXYZ"] = _littlecms.cmsICCViewingConditions_IlluminantXYZ_get
    if _newclass:
        IlluminantXYZ = _swig_property(_littlecms.cmsICCViewingConditions_IlluminantXYZ_get, _littlecms.cmsICCViewingConditions_IlluminantXYZ_set)
    __swig_setmethods__["SurroundXYZ"] = _littlecms.cmsICCViewingConditions_SurroundXYZ_set
    __swig_getmethods__["SurroundXYZ"] = _littlecms.cmsICCViewingConditions_SurroundXYZ_get
    if _newclass:
        SurroundXYZ = _swig_property(_littlecms.cmsICCViewingConditions_SurroundXYZ_get, _littlecms.cmsICCViewingConditions_SurroundXYZ_set)
    __swig_setmethods__["IlluminantType"] = _littlecms.cmsICCViewingConditions_IlluminantType_set
    __swig_getmethods__["IlluminantType"] = _littlecms.cmsICCViewingConditions_IlluminantType_get
    if _newclass:
        IlluminantType = _swig_property(_littlecms.cmsICCViewingConditions_IlluminantType_get, _littlecms.cmsICCViewingConditions_IlluminantType_set)

    def __init__(self):
        this = _littlecms.new_cmsICCViewingConditions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsICCViewingConditions
    __del__ = lambda self: None
cmsICCViewingConditions_swigregister = _littlecms.cmsICCViewingConditions_swigregister
cmsICCViewingConditions_swigregister(cmsICCViewingConditions)


def cmsGetEncodedCMMversion() -> "int":
    return _littlecms.cmsGetEncodedCMMversion()
cmsGetEncodedCMMversion = _littlecms.cmsGetEncodedCMMversion

def cmsstrcasecmp(s1: 'char const *', s2: 'char const *') -> "int":
    return _littlecms.cmsstrcasecmp(s1, s2)
cmsstrcasecmp = _littlecms.cmsstrcasecmp

def cmsfilelength(f: 'FILE *') -> "long":
    return _littlecms.cmsfilelength(f)
cmsfilelength = _littlecms.cmsfilelength

def cmsCreateContext(Plugin: 'void *', UserData: 'void *') -> "cmsContext":
    return _littlecms.cmsCreateContext(Plugin, UserData)
cmsCreateContext = _littlecms.cmsCreateContext

def cmsDeleteContext(ContexID: 'cmsContext') -> "void":
    return _littlecms.cmsDeleteContext(ContexID)
cmsDeleteContext = _littlecms.cmsDeleteContext

def cmsDupContext(ContextID: 'cmsContext', NewUserData: 'void *') -> "cmsContext":
    return _littlecms.cmsDupContext(ContextID, NewUserData)
cmsDupContext = _littlecms.cmsDupContext

def cmsGetContextUserData(ContextID: 'cmsContext') -> "void *":
    return _littlecms.cmsGetContextUserData(ContextID)
cmsGetContextUserData = _littlecms.cmsGetContextUserData

def cmsPlugin(Plugin: 'void *') -> "cmsBool":
    return _littlecms.cmsPlugin(Plugin)
cmsPlugin = _littlecms.cmsPlugin

def cmsPluginTHR(ContextID: 'cmsContext', Plugin: 'void *') -> "cmsBool":
    return _littlecms.cmsPluginTHR(ContextID, Plugin)
cmsPluginTHR = _littlecms.cmsPluginTHR

def cmsUnregisterPlugins() -> "void":
    return _littlecms.cmsUnregisterPlugins()
cmsUnregisterPlugins = _littlecms.cmsUnregisterPlugins

def cmsUnregisterPluginsTHR(ContextID: 'cmsContext') -> "void":
    return _littlecms.cmsUnregisterPluginsTHR(ContextID)
cmsUnregisterPluginsTHR = _littlecms.cmsUnregisterPluginsTHR

_littlecms.cmsERROR_UNDEFINED_swigconstant(_littlecms)
cmsERROR_UNDEFINED = _littlecms.cmsERROR_UNDEFINED

_littlecms.cmsERROR_FILE_swigconstant(_littlecms)
cmsERROR_FILE = _littlecms.cmsERROR_FILE

_littlecms.cmsERROR_RANGE_swigconstant(_littlecms)
cmsERROR_RANGE = _littlecms.cmsERROR_RANGE

_littlecms.cmsERROR_INTERNAL_swigconstant(_littlecms)
cmsERROR_INTERNAL = _littlecms.cmsERROR_INTERNAL

_littlecms.cmsERROR_NULL_swigconstant(_littlecms)
cmsERROR_NULL = _littlecms.cmsERROR_NULL

_littlecms.cmsERROR_READ_swigconstant(_littlecms)
cmsERROR_READ = _littlecms.cmsERROR_READ

_littlecms.cmsERROR_SEEK_swigconstant(_littlecms)
cmsERROR_SEEK = _littlecms.cmsERROR_SEEK

_littlecms.cmsERROR_WRITE_swigconstant(_littlecms)
cmsERROR_WRITE = _littlecms.cmsERROR_WRITE

_littlecms.cmsERROR_UNKNOWN_EXTENSION_swigconstant(_littlecms)
cmsERROR_UNKNOWN_EXTENSION = _littlecms.cmsERROR_UNKNOWN_EXTENSION

_littlecms.cmsERROR_COLORSPACE_CHECK_swigconstant(_littlecms)
cmsERROR_COLORSPACE_CHECK = _littlecms.cmsERROR_COLORSPACE_CHECK

_littlecms.cmsERROR_ALREADY_DEFINED_swigconstant(_littlecms)
cmsERROR_ALREADY_DEFINED = _littlecms.cmsERROR_ALREADY_DEFINED

_littlecms.cmsERROR_BAD_SIGNATURE_swigconstant(_littlecms)
cmsERROR_BAD_SIGNATURE = _littlecms.cmsERROR_BAD_SIGNATURE

_littlecms.cmsERROR_CORRUPTION_DETECTED_swigconstant(_littlecms)
cmsERROR_CORRUPTION_DETECTED = _littlecms.cmsERROR_CORRUPTION_DETECTED

_littlecms.cmsERROR_NOT_SUITABLE_swigconstant(_littlecms)
cmsERROR_NOT_SUITABLE = _littlecms.cmsERROR_NOT_SUITABLE

def cmsD50_XYZ() -> "cmsCIEXYZ const *":
    return _littlecms.cmsD50_XYZ()
cmsD50_XYZ = _littlecms.cmsD50_XYZ

def cmsD50_xyY() -> "cmsCIExyY const *":
    return _littlecms.cmsD50_xyY()
cmsD50_xyY = _littlecms.cmsD50_xyY

def cmsXYZ2xyY(Dest: 'cmsCIExyY', Source: 'cmsCIEXYZ') -> "void":
    return _littlecms.cmsXYZ2xyY(Dest, Source)
cmsXYZ2xyY = _littlecms.cmsXYZ2xyY

def cmsxyY2XYZ(Dest: 'cmsCIEXYZ', Source: 'cmsCIExyY') -> "void":
    return _littlecms.cmsxyY2XYZ(Dest, Source)
cmsxyY2XYZ = _littlecms.cmsxyY2XYZ

def cmsXYZ2Lab(WhitePoint: 'cmsCIEXYZ', Lab: 'cmsCIELab', xyz: 'cmsCIEXYZ') -> "void":
    return _littlecms.cmsXYZ2Lab(WhitePoint, Lab, xyz)
cmsXYZ2Lab = _littlecms.cmsXYZ2Lab

def cmsLab2XYZ(WhitePoint: 'cmsCIEXYZ', xyz: 'cmsCIEXYZ', Lab: 'cmsCIELab') -> "void":
    return _littlecms.cmsLab2XYZ(WhitePoint, xyz, Lab)
cmsLab2XYZ = _littlecms.cmsLab2XYZ

def cmsLab2LCh(LCh: 'cmsCIELCh', Lab: 'cmsCIELab') -> "void":
    return _littlecms.cmsLab2LCh(LCh, Lab)
cmsLab2LCh = _littlecms.cmsLab2LCh

def cmsLCh2Lab(Lab: 'cmsCIELab', LCh: 'cmsCIELCh') -> "void":
    return _littlecms.cmsLCh2Lab(Lab, LCh)
cmsLCh2Lab = _littlecms.cmsLCh2Lab

def cmsLabEncoded2Float(Lab: 'cmsCIELab', wLab: 'cmsUInt16Number const [3]') -> "void":
    return _littlecms.cmsLabEncoded2Float(Lab, wLab)
cmsLabEncoded2Float = _littlecms.cmsLabEncoded2Float

def cmsLabEncoded2FloatV2(Lab: 'cmsCIELab', wLab: 'cmsUInt16Number const [3]') -> "void":
    return _littlecms.cmsLabEncoded2FloatV2(Lab, wLab)
cmsLabEncoded2FloatV2 = _littlecms.cmsLabEncoded2FloatV2

def cmsFloat2LabEncoded(wLab: 'cmsUInt16Number [3]', Lab: 'cmsCIELab') -> "void":
    return _littlecms.cmsFloat2LabEncoded(wLab, Lab)
cmsFloat2LabEncoded = _littlecms.cmsFloat2LabEncoded

def cmsFloat2LabEncodedV2(wLab: 'cmsUInt16Number [3]', Lab: 'cmsCIELab') -> "void":
    return _littlecms.cmsFloat2LabEncodedV2(wLab, Lab)
cmsFloat2LabEncodedV2 = _littlecms.cmsFloat2LabEncodedV2

def cmsXYZEncoded2Float(fxyz: 'cmsCIEXYZ', XYZ: 'cmsUInt16Number const [3]') -> "void":
    return _littlecms.cmsXYZEncoded2Float(fxyz, XYZ)
cmsXYZEncoded2Float = _littlecms.cmsXYZEncoded2Float

def cmsFloat2XYZEncoded(XYZ: 'cmsUInt16Number [3]', fXYZ: 'cmsCIEXYZ') -> "void":
    return _littlecms.cmsFloat2XYZEncoded(XYZ, fXYZ)
cmsFloat2XYZEncoded = _littlecms.cmsFloat2XYZEncoded

def cmsDeltaE(Lab1: 'cmsCIELab', Lab2: 'cmsCIELab') -> "cmsFloat64Number":
    return _littlecms.cmsDeltaE(Lab1, Lab2)
cmsDeltaE = _littlecms.cmsDeltaE

def cmsCIE94DeltaE(Lab1: 'cmsCIELab', Lab2: 'cmsCIELab') -> "cmsFloat64Number":
    return _littlecms.cmsCIE94DeltaE(Lab1, Lab2)
cmsCIE94DeltaE = _littlecms.cmsCIE94DeltaE

def cmsBFDdeltaE(Lab1: 'cmsCIELab', Lab2: 'cmsCIELab') -> "cmsFloat64Number":
    return _littlecms.cmsBFDdeltaE(Lab1, Lab2)
cmsBFDdeltaE = _littlecms.cmsBFDdeltaE

def cmsCMCdeltaE(Lab1: 'cmsCIELab', Lab2: 'cmsCIELab', l: 'cmsFloat64Number', c: 'cmsFloat64Number') -> "cmsFloat64Number":
    return _littlecms.cmsCMCdeltaE(Lab1, Lab2, l, c)
cmsCMCdeltaE = _littlecms.cmsCMCdeltaE

def cmsCIE2000DeltaE(Lab1: 'cmsCIELab', Lab2: 'cmsCIELab', Kl: 'cmsFloat64Number', Kc: 'cmsFloat64Number', Kh: 'cmsFloat64Number') -> "cmsFloat64Number":
    return _littlecms.cmsCIE2000DeltaE(Lab1, Lab2, Kl, Kc, Kh)
cmsCIE2000DeltaE = _littlecms.cmsCIE2000DeltaE

def cmsWhitePointFromTemp(WhitePoint: 'cmsCIExyY', TempK: 'cmsFloat64Number') -> "cmsBool":
    return _littlecms.cmsWhitePointFromTemp(WhitePoint, TempK)
cmsWhitePointFromTemp = _littlecms.cmsWhitePointFromTemp

def cmsTempFromWhitePoint(TempK: 'cmsFloat64Number *', WhitePoint: 'cmsCIExyY') -> "cmsBool":
    return _littlecms.cmsTempFromWhitePoint(TempK, WhitePoint)
cmsTempFromWhitePoint = _littlecms.cmsTempFromWhitePoint

def cmsAdaptToIlluminant(Result: 'cmsCIEXYZ', SourceWhitePt: 'cmsCIEXYZ', Illuminant: 'cmsCIEXYZ', Value: 'cmsCIEXYZ') -> "cmsBool":
    return _littlecms.cmsAdaptToIlluminant(Result, SourceWhitePt, Illuminant, Value)
cmsAdaptToIlluminant = _littlecms.cmsAdaptToIlluminant

_littlecms.AVG_SURROUND_swigconstant(_littlecms)
AVG_SURROUND = _littlecms.AVG_SURROUND

_littlecms.DIM_SURROUND_swigconstant(_littlecms)
DIM_SURROUND = _littlecms.DIM_SURROUND

_littlecms.DARK_SURROUND_swigconstant(_littlecms)
DARK_SURROUND = _littlecms.DARK_SURROUND

_littlecms.CUTSHEET_SURROUND_swigconstant(_littlecms)
CUTSHEET_SURROUND = _littlecms.CUTSHEET_SURROUND

_littlecms.D_CALCULATE_swigconstant(_littlecms)
D_CALCULATE = _littlecms.D_CALCULATE
class cmsViewingConditions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsViewingConditions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsViewingConditions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["whitePoint"] = _littlecms.cmsViewingConditions_whitePoint_set
    __swig_getmethods__["whitePoint"] = _littlecms.cmsViewingConditions_whitePoint_get
    if _newclass:
        whitePoint = _swig_property(_littlecms.cmsViewingConditions_whitePoint_get, _littlecms.cmsViewingConditions_whitePoint_set)
    __swig_setmethods__["Yb"] = _littlecms.cmsViewingConditions_Yb_set
    __swig_getmethods__["Yb"] = _littlecms.cmsViewingConditions_Yb_get
    if _newclass:
        Yb = _swig_property(_littlecms.cmsViewingConditions_Yb_get, _littlecms.cmsViewingConditions_Yb_set)
    __swig_setmethods__["La"] = _littlecms.cmsViewingConditions_La_set
    __swig_getmethods__["La"] = _littlecms.cmsViewingConditions_La_get
    if _newclass:
        La = _swig_property(_littlecms.cmsViewingConditions_La_get, _littlecms.cmsViewingConditions_La_set)
    __swig_setmethods__["surround"] = _littlecms.cmsViewingConditions_surround_set
    __swig_getmethods__["surround"] = _littlecms.cmsViewingConditions_surround_get
    if _newclass:
        surround = _swig_property(_littlecms.cmsViewingConditions_surround_get, _littlecms.cmsViewingConditions_surround_set)
    __swig_setmethods__["D_value"] = _littlecms.cmsViewingConditions_D_value_set
    __swig_getmethods__["D_value"] = _littlecms.cmsViewingConditions_D_value_get
    if _newclass:
        D_value = _swig_property(_littlecms.cmsViewingConditions_D_value_get, _littlecms.cmsViewingConditions_D_value_set)

    def __init__(self):
        this = _littlecms.new_cmsViewingConditions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsViewingConditions
    __del__ = lambda self: None
cmsViewingConditions_swigregister = _littlecms.cmsViewingConditions_swigregister
cmsViewingConditions_swigregister(cmsViewingConditions)


def cmsCIECAM02Init(ContextID: 'cmsContext', pVC: 'cmsViewingConditions') -> "cmsHANDLE":
    return _littlecms.cmsCIECAM02Init(ContextID, pVC)
cmsCIECAM02Init = _littlecms.cmsCIECAM02Init

def cmsCIECAM02Done(hModel: 'cmsHANDLE') -> "void":
    return _littlecms.cmsCIECAM02Done(hModel)
cmsCIECAM02Done = _littlecms.cmsCIECAM02Done

def cmsCIECAM02Forward(hModel: 'cmsHANDLE', pIn: 'cmsCIEXYZ', pOut: 'cmsJCh') -> "void":
    return _littlecms.cmsCIECAM02Forward(hModel, pIn, pOut)
cmsCIECAM02Forward = _littlecms.cmsCIECAM02Forward

def cmsCIECAM02Reverse(hModel: 'cmsHANDLE', pIn: 'cmsJCh', pOut: 'cmsCIEXYZ') -> "void":
    return _littlecms.cmsCIECAM02Reverse(hModel, pIn, pOut)
cmsCIECAM02Reverse = _littlecms.cmsCIECAM02Reverse
class cmsCurveSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsCurveSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsCurveSegment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x0"] = _littlecms.cmsCurveSegment_x0_set
    __swig_getmethods__["x0"] = _littlecms.cmsCurveSegment_x0_get
    if _newclass:
        x0 = _swig_property(_littlecms.cmsCurveSegment_x0_get, _littlecms.cmsCurveSegment_x0_set)
    __swig_setmethods__["x1"] = _littlecms.cmsCurveSegment_x1_set
    __swig_getmethods__["x1"] = _littlecms.cmsCurveSegment_x1_get
    if _newclass:
        x1 = _swig_property(_littlecms.cmsCurveSegment_x1_get, _littlecms.cmsCurveSegment_x1_set)
    __swig_setmethods__["Type"] = _littlecms.cmsCurveSegment_Type_set
    __swig_getmethods__["Type"] = _littlecms.cmsCurveSegment_Type_get
    if _newclass:
        Type = _swig_property(_littlecms.cmsCurveSegment_Type_get, _littlecms.cmsCurveSegment_Type_set)
    __swig_setmethods__["Params"] = _littlecms.cmsCurveSegment_Params_set
    __swig_getmethods__["Params"] = _littlecms.cmsCurveSegment_Params_get
    if _newclass:
        Params = _swig_property(_littlecms.cmsCurveSegment_Params_get, _littlecms.cmsCurveSegment_Params_set)
    __swig_setmethods__["nGridPoints"] = _littlecms.cmsCurveSegment_nGridPoints_set
    __swig_getmethods__["nGridPoints"] = _littlecms.cmsCurveSegment_nGridPoints_get
    if _newclass:
        nGridPoints = _swig_property(_littlecms.cmsCurveSegment_nGridPoints_get, _littlecms.cmsCurveSegment_nGridPoints_set)
    __swig_setmethods__["SampledPoints"] = _littlecms.cmsCurveSegment_SampledPoints_set
    __swig_getmethods__["SampledPoints"] = _littlecms.cmsCurveSegment_SampledPoints_get
    if _newclass:
        SampledPoints = _swig_property(_littlecms.cmsCurveSegment_SampledPoints_get, _littlecms.cmsCurveSegment_SampledPoints_set)

    def __init__(self):
        this = _littlecms.new_cmsCurveSegment()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsCurveSegment
    __del__ = lambda self: None
cmsCurveSegment_swigregister = _littlecms.cmsCurveSegment_swigregister
cmsCurveSegment_swigregister(cmsCurveSegment)


def cmsBuildSegmentedToneCurve(ContextID: 'cmsContext', nSegments: 'cmsInt32Number', Segments: 'cmsCurveSegment') -> "cmsToneCurve *":
    return _littlecms.cmsBuildSegmentedToneCurve(ContextID, nSegments, Segments)
cmsBuildSegmentedToneCurve = _littlecms.cmsBuildSegmentedToneCurve

def cmsBuildParametricToneCurve(ContextID: 'cmsContext', Type: 'cmsInt32Number', Params: 'cmsFloat64Number const []') -> "cmsToneCurve *":
    return _littlecms.cmsBuildParametricToneCurve(ContextID, Type, Params)
cmsBuildParametricToneCurve = _littlecms.cmsBuildParametricToneCurve

def cmsBuildGamma(ContextID: 'cmsContext', Gamma: 'cmsFloat64Number') -> "cmsToneCurve *":
    return _littlecms.cmsBuildGamma(ContextID, Gamma)
cmsBuildGamma = _littlecms.cmsBuildGamma

def cmsBuildTabulatedToneCurve16(ContextID: 'cmsContext', nEntries: 'cmsInt32Number', values: 'cmsUInt16Number const []') -> "cmsToneCurve *":
    return _littlecms.cmsBuildTabulatedToneCurve16(ContextID, nEntries, values)
cmsBuildTabulatedToneCurve16 = _littlecms.cmsBuildTabulatedToneCurve16

def cmsBuildTabulatedToneCurveFloat(ContextID: 'cmsContext', nEntries: 'cmsUInt32Number', values: 'cmsFloat32Number const []') -> "cmsToneCurve *":
    return _littlecms.cmsBuildTabulatedToneCurveFloat(ContextID, nEntries, values)
cmsBuildTabulatedToneCurveFloat = _littlecms.cmsBuildTabulatedToneCurveFloat

def cmsFreeToneCurve(Curve: 'cmsToneCurve *') -> "void":
    return _littlecms.cmsFreeToneCurve(Curve)
cmsFreeToneCurve = _littlecms.cmsFreeToneCurve

def cmsFreeToneCurveTriple(Curve: 'cmsToneCurve *[3]') -> "void":
    return _littlecms.cmsFreeToneCurveTriple(Curve)
cmsFreeToneCurveTriple = _littlecms.cmsFreeToneCurveTriple

def cmsDupToneCurve(Src: 'cmsToneCurve const *') -> "cmsToneCurve *":
    return _littlecms.cmsDupToneCurve(Src)
cmsDupToneCurve = _littlecms.cmsDupToneCurve

def cmsReverseToneCurve(InGamma: 'cmsToneCurve const *') -> "cmsToneCurve *":
    return _littlecms.cmsReverseToneCurve(InGamma)
cmsReverseToneCurve = _littlecms.cmsReverseToneCurve

def cmsReverseToneCurveEx(nResultSamples: 'cmsInt32Number', InGamma: 'cmsToneCurve const *') -> "cmsToneCurve *":
    return _littlecms.cmsReverseToneCurveEx(nResultSamples, InGamma)
cmsReverseToneCurveEx = _littlecms.cmsReverseToneCurveEx

def cmsJoinToneCurve(ContextID: 'cmsContext', X: 'cmsToneCurve const *', Y: 'cmsToneCurve const *', nPoints: 'cmsUInt32Number') -> "cmsToneCurve *":
    return _littlecms.cmsJoinToneCurve(ContextID, X, Y, nPoints)
cmsJoinToneCurve = _littlecms.cmsJoinToneCurve

def cmsSmoothToneCurve(Tab: 'cmsToneCurve *', arg2: 'cmsFloat64Number') -> "cmsBool":
    return _littlecms.cmsSmoothToneCurve(Tab, arg2)
cmsSmoothToneCurve = _littlecms.cmsSmoothToneCurve

def cmsEvalToneCurveFloat(Curve: 'cmsToneCurve const *', v: 'cmsFloat32Number') -> "cmsFloat32Number":
    return _littlecms.cmsEvalToneCurveFloat(Curve, v)
cmsEvalToneCurveFloat = _littlecms.cmsEvalToneCurveFloat

def cmsEvalToneCurve16(Curve: 'cmsToneCurve const *', v: 'cmsUInt16Number') -> "cmsUInt16Number":
    return _littlecms.cmsEvalToneCurve16(Curve, v)
cmsEvalToneCurve16 = _littlecms.cmsEvalToneCurve16

def cmsIsToneCurveMultisegment(InGamma: 'cmsToneCurve const *') -> "cmsBool":
    return _littlecms.cmsIsToneCurveMultisegment(InGamma)
cmsIsToneCurveMultisegment = _littlecms.cmsIsToneCurveMultisegment

def cmsIsToneCurveLinear(Curve: 'cmsToneCurve const *') -> "cmsBool":
    return _littlecms.cmsIsToneCurveLinear(Curve)
cmsIsToneCurveLinear = _littlecms.cmsIsToneCurveLinear

def cmsIsToneCurveMonotonic(t: 'cmsToneCurve const *') -> "cmsBool":
    return _littlecms.cmsIsToneCurveMonotonic(t)
cmsIsToneCurveMonotonic = _littlecms.cmsIsToneCurveMonotonic

def cmsIsToneCurveDescending(t: 'cmsToneCurve const *') -> "cmsBool":
    return _littlecms.cmsIsToneCurveDescending(t)
cmsIsToneCurveDescending = _littlecms.cmsIsToneCurveDescending

def cmsGetToneCurveParametricType(t: 'cmsToneCurve const *') -> "cmsInt32Number":
    return _littlecms.cmsGetToneCurveParametricType(t)
cmsGetToneCurveParametricType = _littlecms.cmsGetToneCurveParametricType

def cmsEstimateGamma(t: 'cmsToneCurve const *', Precision: 'cmsFloat64Number') -> "cmsFloat64Number":
    return _littlecms.cmsEstimateGamma(t, Precision)
cmsEstimateGamma = _littlecms.cmsEstimateGamma

def cmsGetToneCurveEstimatedTableEntries(t: 'cmsToneCurve const *') -> "cmsUInt32Number":
    return _littlecms.cmsGetToneCurveEstimatedTableEntries(t)
cmsGetToneCurveEstimatedTableEntries = _littlecms.cmsGetToneCurveEstimatedTableEntries

def cmsGetToneCurveEstimatedTable(t: 'cmsToneCurve const *') -> "cmsUInt16Number const *":
    return _littlecms.cmsGetToneCurveEstimatedTable(t)
cmsGetToneCurveEstimatedTable = _littlecms.cmsGetToneCurveEstimatedTable

def cmsPipelineAlloc(ContextID: 'cmsContext', InputChannels: 'cmsUInt32Number', OutputChannels: 'cmsUInt32Number') -> "cmsPipeline *":
    return _littlecms.cmsPipelineAlloc(ContextID, InputChannels, OutputChannels)
cmsPipelineAlloc = _littlecms.cmsPipelineAlloc

def cmsPipelineFree(lut: 'cmsPipeline *') -> "void":
    return _littlecms.cmsPipelineFree(lut)
cmsPipelineFree = _littlecms.cmsPipelineFree

def cmsPipelineDup(Orig: 'cmsPipeline const *') -> "cmsPipeline *":
    return _littlecms.cmsPipelineDup(Orig)
cmsPipelineDup = _littlecms.cmsPipelineDup

def cmsGetPipelineContextID(lut: 'cmsPipeline const *') -> "cmsContext":
    return _littlecms.cmsGetPipelineContextID(lut)
cmsGetPipelineContextID = _littlecms.cmsGetPipelineContextID

def cmsPipelineInputChannels(lut: 'cmsPipeline const *') -> "cmsUInt32Number":
    return _littlecms.cmsPipelineInputChannels(lut)
cmsPipelineInputChannels = _littlecms.cmsPipelineInputChannels

def cmsPipelineOutputChannels(lut: 'cmsPipeline const *') -> "cmsUInt32Number":
    return _littlecms.cmsPipelineOutputChannels(lut)
cmsPipelineOutputChannels = _littlecms.cmsPipelineOutputChannels

def cmsPipelineStageCount(lut: 'cmsPipeline const *') -> "cmsUInt32Number":
    return _littlecms.cmsPipelineStageCount(lut)
cmsPipelineStageCount = _littlecms.cmsPipelineStageCount

def cmsPipelineGetPtrToFirstStage(lut: 'cmsPipeline const *') -> "cmsStage *":
    return _littlecms.cmsPipelineGetPtrToFirstStage(lut)
cmsPipelineGetPtrToFirstStage = _littlecms.cmsPipelineGetPtrToFirstStage

def cmsPipelineGetPtrToLastStage(lut: 'cmsPipeline const *') -> "cmsStage *":
    return _littlecms.cmsPipelineGetPtrToLastStage(lut)
cmsPipelineGetPtrToLastStage = _littlecms.cmsPipelineGetPtrToLastStage

def cmsPipelineEval16(In: 'cmsUInt16Number const []', Out: 'cmsUInt16Number []', lut: 'cmsPipeline const *') -> "void":
    return _littlecms.cmsPipelineEval16(In, Out, lut)
cmsPipelineEval16 = _littlecms.cmsPipelineEval16

def cmsPipelineEvalFloat(In: 'cmsFloat32Number const []', Out: 'cmsFloat32Number []', lut: 'cmsPipeline const *') -> "void":
    return _littlecms.cmsPipelineEvalFloat(In, Out, lut)
cmsPipelineEvalFloat = _littlecms.cmsPipelineEvalFloat

def cmsPipelineEvalReverseFloat(Target: 'cmsFloat32Number []', Result: 'cmsFloat32Number []', Hint: 'cmsFloat32Number []', lut: 'cmsPipeline const *') -> "cmsBool":
    return _littlecms.cmsPipelineEvalReverseFloat(Target, Result, Hint, lut)
cmsPipelineEvalReverseFloat = _littlecms.cmsPipelineEvalReverseFloat

def cmsPipelineCat(l1: 'cmsPipeline *', l2: 'cmsPipeline const *') -> "cmsBool":
    return _littlecms.cmsPipelineCat(l1, l2)
cmsPipelineCat = _littlecms.cmsPipelineCat

def cmsPipelineSetSaveAs8bitsFlag(lut: 'cmsPipeline *', On: 'cmsBool') -> "cmsBool":
    return _littlecms.cmsPipelineSetSaveAs8bitsFlag(lut, On)
cmsPipelineSetSaveAs8bitsFlag = _littlecms.cmsPipelineSetSaveAs8bitsFlag

_littlecms.cmsAT_BEGIN_swigconstant(_littlecms)
cmsAT_BEGIN = _littlecms.cmsAT_BEGIN

_littlecms.cmsAT_END_swigconstant(_littlecms)
cmsAT_END = _littlecms.cmsAT_END

def cmsPipelineInsertStage(lut: 'cmsPipeline *', loc: 'cmsStageLoc', mpe: 'cmsStage *') -> "int":
    return _littlecms.cmsPipelineInsertStage(lut, loc, mpe)
cmsPipelineInsertStage = _littlecms.cmsPipelineInsertStage

def cmsPipelineUnlinkStage(lut: 'cmsPipeline *', loc: 'cmsStageLoc', mpe: 'cmsStage **') -> "void":
    return _littlecms.cmsPipelineUnlinkStage(lut, loc, mpe)
cmsPipelineUnlinkStage = _littlecms.cmsPipelineUnlinkStage

def cmsPipelineCheckAndRetreiveStages(Lut: 'cmsPipeline const *', n: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsPipelineCheckAndRetreiveStages(Lut, n)
cmsPipelineCheckAndRetreiveStages = _littlecms.cmsPipelineCheckAndRetreiveStages

def cmsStageAllocIdentity(ContextID: 'cmsContext', nChannels: 'cmsUInt32Number') -> "cmsStage *":
    return _littlecms.cmsStageAllocIdentity(ContextID, nChannels)
cmsStageAllocIdentity = _littlecms.cmsStageAllocIdentity

def cmsStageAllocToneCurves(ContextID: 'cmsContext', nChannels: 'cmsUInt32Number', Curves: 'cmsToneCurve *const []') -> "cmsStage *":
    return _littlecms.cmsStageAllocToneCurves(ContextID, nChannels, Curves)
cmsStageAllocToneCurves = _littlecms.cmsStageAllocToneCurves

def cmsStageAllocMatrix(ContextID: 'cmsContext', Rows: 'cmsUInt32Number', Cols: 'cmsUInt32Number', Matrix: 'cmsFloat64Number const *', Offset: 'cmsFloat64Number const *') -> "cmsStage *":
    return _littlecms.cmsStageAllocMatrix(ContextID, Rows, Cols, Matrix, Offset)
cmsStageAllocMatrix = _littlecms.cmsStageAllocMatrix

def cmsStageAllocCLut16bit(ContextID: 'cmsContext', nGridPoints: 'cmsUInt32Number', inputChan: 'cmsUInt32Number', outputChan: 'cmsUInt32Number', Table: 'cmsUInt16Number const *') -> "cmsStage *":
    return _littlecms.cmsStageAllocCLut16bit(ContextID, nGridPoints, inputChan, outputChan, Table)
cmsStageAllocCLut16bit = _littlecms.cmsStageAllocCLut16bit

def cmsStageAllocCLutFloat(ContextID: 'cmsContext', nGridPoints: 'cmsUInt32Number', inputChan: 'cmsUInt32Number', outputChan: 'cmsUInt32Number', Table: 'cmsFloat32Number const *') -> "cmsStage *":
    return _littlecms.cmsStageAllocCLutFloat(ContextID, nGridPoints, inputChan, outputChan, Table)
cmsStageAllocCLutFloat = _littlecms.cmsStageAllocCLutFloat

def cmsStageAllocCLut16bitGranular(ContextID: 'cmsContext', clutPoints: 'cmsUInt32Number const []', inputChan: 'cmsUInt32Number', outputChan: 'cmsUInt32Number', Table: 'cmsUInt16Number const *') -> "cmsStage *":
    return _littlecms.cmsStageAllocCLut16bitGranular(ContextID, clutPoints, inputChan, outputChan, Table)
cmsStageAllocCLut16bitGranular = _littlecms.cmsStageAllocCLut16bitGranular

def cmsStageAllocCLutFloatGranular(ContextID: 'cmsContext', clutPoints: 'cmsUInt32Number const []', inputChan: 'cmsUInt32Number', outputChan: 'cmsUInt32Number', Table: 'cmsFloat32Number const *') -> "cmsStage *":
    return _littlecms.cmsStageAllocCLutFloatGranular(ContextID, clutPoints, inputChan, outputChan, Table)
cmsStageAllocCLutFloatGranular = _littlecms.cmsStageAllocCLutFloatGranular

def cmsStageDup(mpe: 'cmsStage *') -> "cmsStage *":
    return _littlecms.cmsStageDup(mpe)
cmsStageDup = _littlecms.cmsStageDup

def cmsStageFree(mpe: 'cmsStage *') -> "void":
    return _littlecms.cmsStageFree(mpe)
cmsStageFree = _littlecms.cmsStageFree

def cmsStageNext(mpe: 'cmsStage const *') -> "cmsStage *":
    return _littlecms.cmsStageNext(mpe)
cmsStageNext = _littlecms.cmsStageNext

def cmsStageInputChannels(mpe: 'cmsStage const *') -> "cmsUInt32Number":
    return _littlecms.cmsStageInputChannels(mpe)
cmsStageInputChannels = _littlecms.cmsStageInputChannels

def cmsStageOutputChannels(mpe: 'cmsStage const *') -> "cmsUInt32Number":
    return _littlecms.cmsStageOutputChannels(mpe)
cmsStageOutputChannels = _littlecms.cmsStageOutputChannels

def cmsStageType(mpe: 'cmsStage const *') -> "cmsStageSignature":
    return _littlecms.cmsStageType(mpe)
cmsStageType = _littlecms.cmsStageType

def cmsStageData(mpe: 'cmsStage const *') -> "void *":
    return _littlecms.cmsStageData(mpe)
cmsStageData = _littlecms.cmsStageData

_littlecms.SAMPLER_INSPECT_swigconstant(_littlecms)
SAMPLER_INSPECT = _littlecms.SAMPLER_INSPECT

def cmsStageSampleCLut16bit(mpe: 'cmsStage *', Sampler: 'cmsSAMPLER16', Cargo: 'void *', dwFlags: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsStageSampleCLut16bit(mpe, Sampler, Cargo, dwFlags)
cmsStageSampleCLut16bit = _littlecms.cmsStageSampleCLut16bit

def cmsStageSampleCLutFloat(mpe: 'cmsStage *', Sampler: 'cmsSAMPLERFLOAT', Cargo: 'void *', dwFlags: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsStageSampleCLutFloat(mpe, Sampler, Cargo, dwFlags)
cmsStageSampleCLutFloat = _littlecms.cmsStageSampleCLutFloat

def cmsSliceSpace16(nInputs: 'cmsUInt32Number', clutPoints: 'cmsUInt32Number const []', Sampler: 'cmsSAMPLER16', Cargo: 'void *') -> "cmsBool":
    return _littlecms.cmsSliceSpace16(nInputs, clutPoints, Sampler, Cargo)
cmsSliceSpace16 = _littlecms.cmsSliceSpace16

def cmsSliceSpaceFloat(nInputs: 'cmsUInt32Number', clutPoints: 'cmsUInt32Number const []', Sampler: 'cmsSAMPLERFLOAT', Cargo: 'void *') -> "cmsBool":
    return _littlecms.cmsSliceSpaceFloat(nInputs, clutPoints, Sampler, Cargo)
cmsSliceSpaceFloat = _littlecms.cmsSliceSpaceFloat

_littlecms.cmsNoLanguage_swigconstant(_littlecms)
cmsNoLanguage = _littlecms.cmsNoLanguage

_littlecms.cmsNoCountry_swigconstant(_littlecms)
cmsNoCountry = _littlecms.cmsNoCountry

def cmsMLUalloc(ContextID: 'cmsContext', nItems: 'cmsUInt32Number') -> "cmsMLU *":
    return _littlecms.cmsMLUalloc(ContextID, nItems)
cmsMLUalloc = _littlecms.cmsMLUalloc

def cmsMLUfree(mlu: 'cmsMLU *') -> "void":
    return _littlecms.cmsMLUfree(mlu)
cmsMLUfree = _littlecms.cmsMLUfree

def cmsMLUdup(mlu: 'cmsMLU const *') -> "cmsMLU *":
    return _littlecms.cmsMLUdup(mlu)
cmsMLUdup = _littlecms.cmsMLUdup

def cmsMLUsetASCII(mlu: 'cmsMLU *', LanguageCode: 'char const [3]', CountryCode: 'char const [3]', ASCIIString: 'char const *') -> "cmsBool":
    return _littlecms.cmsMLUsetASCII(mlu, LanguageCode, CountryCode, ASCIIString)
cmsMLUsetASCII = _littlecms.cmsMLUsetASCII

def cmsMLUsetWide(mlu: 'cmsMLU *', LanguageCode: 'char const [3]', CountryCode: 'char const [3]', WideString: 'wchar_t const *') -> "cmsBool":
    return _littlecms.cmsMLUsetWide(mlu, LanguageCode, CountryCode, WideString)
cmsMLUsetWide = _littlecms.cmsMLUsetWide

def cmsMLUgetASCII(mlu: 'cmsMLU const *', LanguageCode: 'char const [3]', CountryCode: 'char const [3]', Buffer: 'char *', BufferSize: 'cmsUInt32Number') -> "cmsUInt32Number":
    return _littlecms.cmsMLUgetASCII(mlu, LanguageCode, CountryCode, Buffer, BufferSize)
cmsMLUgetASCII = _littlecms.cmsMLUgetASCII

def cmsMLUgetWide(mlu: 'cmsMLU const *', LanguageCode: 'char const [3]', CountryCode: 'char const [3]', Buffer: 'wchar_t *', BufferSize: 'cmsUInt32Number') -> "cmsUInt32Number":
    return _littlecms.cmsMLUgetWide(mlu, LanguageCode, CountryCode, Buffer, BufferSize)
cmsMLUgetWide = _littlecms.cmsMLUgetWide

def cmsMLUgetTranslation(mlu: 'cmsMLU const *', LanguageCode: 'char const [3]', CountryCode: 'char const [3]', ObtainedLanguage: 'char [3]', ObtainedCountry: 'char [3]') -> "cmsBool":
    return _littlecms.cmsMLUgetTranslation(mlu, LanguageCode, CountryCode, ObtainedLanguage, ObtainedCountry)
cmsMLUgetTranslation = _littlecms.cmsMLUgetTranslation

def cmsMLUtranslationsCount(mlu: 'cmsMLU const *') -> "cmsUInt32Number":
    return _littlecms.cmsMLUtranslationsCount(mlu)
cmsMLUtranslationsCount = _littlecms.cmsMLUtranslationsCount

def cmsMLUtranslationsCodes(mlu: 'cmsMLU const *', idx: 'cmsUInt32Number', LanguageCode: 'char [3]', CountryCode: 'char [3]') -> "cmsBool":
    return _littlecms.cmsMLUtranslationsCodes(mlu, idx, LanguageCode, CountryCode)
cmsMLUtranslationsCodes = _littlecms.cmsMLUtranslationsCodes
class cmsUcrBg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsUcrBg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsUcrBg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Ucr"] = _littlecms.cmsUcrBg_Ucr_set
    __swig_getmethods__["Ucr"] = _littlecms.cmsUcrBg_Ucr_get
    if _newclass:
        Ucr = _swig_property(_littlecms.cmsUcrBg_Ucr_get, _littlecms.cmsUcrBg_Ucr_set)
    __swig_setmethods__["Bg"] = _littlecms.cmsUcrBg_Bg_set
    __swig_getmethods__["Bg"] = _littlecms.cmsUcrBg_Bg_get
    if _newclass:
        Bg = _swig_property(_littlecms.cmsUcrBg_Bg_get, _littlecms.cmsUcrBg_Bg_set)
    __swig_setmethods__["Desc"] = _littlecms.cmsUcrBg_Desc_set
    __swig_getmethods__["Desc"] = _littlecms.cmsUcrBg_Desc_get
    if _newclass:
        Desc = _swig_property(_littlecms.cmsUcrBg_Desc_get, _littlecms.cmsUcrBg_Desc_set)

    def __init__(self):
        this = _littlecms.new_cmsUcrBg()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsUcrBg
    __del__ = lambda self: None
cmsUcrBg_swigregister = _littlecms.cmsUcrBg_swigregister
cmsUcrBg_swigregister(cmsUcrBg)


_littlecms.cmsPRINTER_DEFAULT_SCREENS_swigconstant(_littlecms)
cmsPRINTER_DEFAULT_SCREENS = _littlecms.cmsPRINTER_DEFAULT_SCREENS

_littlecms.cmsFREQUENCE_UNITS_LINES_CM_swigconstant(_littlecms)
cmsFREQUENCE_UNITS_LINES_CM = _littlecms.cmsFREQUENCE_UNITS_LINES_CM

_littlecms.cmsFREQUENCE_UNITS_LINES_INCH_swigconstant(_littlecms)
cmsFREQUENCE_UNITS_LINES_INCH = _littlecms.cmsFREQUENCE_UNITS_LINES_INCH

_littlecms.cmsSPOT_UNKNOWN_swigconstant(_littlecms)
cmsSPOT_UNKNOWN = _littlecms.cmsSPOT_UNKNOWN

_littlecms.cmsSPOT_PRINTER_DEFAULT_swigconstant(_littlecms)
cmsSPOT_PRINTER_DEFAULT = _littlecms.cmsSPOT_PRINTER_DEFAULT

_littlecms.cmsSPOT_ROUND_swigconstant(_littlecms)
cmsSPOT_ROUND = _littlecms.cmsSPOT_ROUND

_littlecms.cmsSPOT_DIAMOND_swigconstant(_littlecms)
cmsSPOT_DIAMOND = _littlecms.cmsSPOT_DIAMOND

_littlecms.cmsSPOT_ELLIPSE_swigconstant(_littlecms)
cmsSPOT_ELLIPSE = _littlecms.cmsSPOT_ELLIPSE

_littlecms.cmsSPOT_LINE_swigconstant(_littlecms)
cmsSPOT_LINE = _littlecms.cmsSPOT_LINE

_littlecms.cmsSPOT_SQUARE_swigconstant(_littlecms)
cmsSPOT_SQUARE = _littlecms.cmsSPOT_SQUARE

_littlecms.cmsSPOT_CROSS_swigconstant(_littlecms)
cmsSPOT_CROSS = _littlecms.cmsSPOT_CROSS
class cmsScreeningChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsScreeningChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsScreeningChannel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Frequency"] = _littlecms.cmsScreeningChannel_Frequency_set
    __swig_getmethods__["Frequency"] = _littlecms.cmsScreeningChannel_Frequency_get
    if _newclass:
        Frequency = _swig_property(_littlecms.cmsScreeningChannel_Frequency_get, _littlecms.cmsScreeningChannel_Frequency_set)
    __swig_setmethods__["ScreenAngle"] = _littlecms.cmsScreeningChannel_ScreenAngle_set
    __swig_getmethods__["ScreenAngle"] = _littlecms.cmsScreeningChannel_ScreenAngle_get
    if _newclass:
        ScreenAngle = _swig_property(_littlecms.cmsScreeningChannel_ScreenAngle_get, _littlecms.cmsScreeningChannel_ScreenAngle_set)
    __swig_setmethods__["SpotShape"] = _littlecms.cmsScreeningChannel_SpotShape_set
    __swig_getmethods__["SpotShape"] = _littlecms.cmsScreeningChannel_SpotShape_get
    if _newclass:
        SpotShape = _swig_property(_littlecms.cmsScreeningChannel_SpotShape_get, _littlecms.cmsScreeningChannel_SpotShape_set)

    def __init__(self):
        this = _littlecms.new_cmsScreeningChannel()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsScreeningChannel
    __del__ = lambda self: None
cmsScreeningChannel_swigregister = _littlecms.cmsScreeningChannel_swigregister
cmsScreeningChannel_swigregister(cmsScreeningChannel)

class cmsScreening(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsScreening, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsScreening, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Flag"] = _littlecms.cmsScreening_Flag_set
    __swig_getmethods__["Flag"] = _littlecms.cmsScreening_Flag_get
    if _newclass:
        Flag = _swig_property(_littlecms.cmsScreening_Flag_get, _littlecms.cmsScreening_Flag_set)
    __swig_setmethods__["nChannels"] = _littlecms.cmsScreening_nChannels_set
    __swig_getmethods__["nChannels"] = _littlecms.cmsScreening_nChannels_get
    if _newclass:
        nChannels = _swig_property(_littlecms.cmsScreening_nChannels_get, _littlecms.cmsScreening_nChannels_set)
    __swig_setmethods__["Channels"] = _littlecms.cmsScreening_Channels_set
    __swig_getmethods__["Channels"] = _littlecms.cmsScreening_Channels_get
    if _newclass:
        Channels = _swig_property(_littlecms.cmsScreening_Channels_get, _littlecms.cmsScreening_Channels_set)

    def __init__(self):
        this = _littlecms.new_cmsScreening()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsScreening
    __del__ = lambda self: None
cmsScreening_swigregister = _littlecms.cmsScreening_swigregister
cmsScreening_swigregister(cmsScreening)


def cmsAllocNamedColorList(ContextID: 'cmsContext', n: 'cmsUInt32Number', ColorantCount: 'cmsUInt32Number', Prefix: 'char const *', Suffix: 'char const *') -> "cmsNAMEDCOLORLIST *":
    return _littlecms.cmsAllocNamedColorList(ContextID, n, ColorantCount, Prefix, Suffix)
cmsAllocNamedColorList = _littlecms.cmsAllocNamedColorList

def cmsFreeNamedColorList(v: 'cmsNAMEDCOLORLIST *') -> "void":
    return _littlecms.cmsFreeNamedColorList(v)
cmsFreeNamedColorList = _littlecms.cmsFreeNamedColorList

def cmsDupNamedColorList(v: 'cmsNAMEDCOLORLIST const *') -> "cmsNAMEDCOLORLIST *":
    return _littlecms.cmsDupNamedColorList(v)
cmsDupNamedColorList = _littlecms.cmsDupNamedColorList

def cmsAppendNamedColor(v: 'cmsNAMEDCOLORLIST *', Name: 'char const *', PCS: 'cmsUInt16Number [3]', Colorant: 'cmsUInt16Number [16]') -> "cmsBool":
    return _littlecms.cmsAppendNamedColor(v, Name, PCS, Colorant)
cmsAppendNamedColor = _littlecms.cmsAppendNamedColor

def cmsNamedColorCount(v: 'cmsNAMEDCOLORLIST const *') -> "cmsUInt32Number":
    return _littlecms.cmsNamedColorCount(v)
cmsNamedColorCount = _littlecms.cmsNamedColorCount

def cmsNamedColorIndex(v: 'cmsNAMEDCOLORLIST const *', Name: 'char const *') -> "cmsInt32Number":
    return _littlecms.cmsNamedColorIndex(v, Name)
cmsNamedColorIndex = _littlecms.cmsNamedColorIndex

def cmsNamedColorInfo(NamedColorList: 'cmsNAMEDCOLORLIST const *', nColor: 'cmsUInt32Number', Name: 'char *', Prefix: 'char *', Suffix: 'char *', PCS: 'cmsUInt16Number *', Colorant: 'cmsUInt16Number *') -> "cmsBool":
    return _littlecms.cmsNamedColorInfo(NamedColorList, nColor, Name, Prefix, Suffix, PCS, Colorant)
cmsNamedColorInfo = _littlecms.cmsNamedColorInfo

def cmsGetNamedColorList(xform: 'cmsHTRANSFORM') -> "cmsNAMEDCOLORLIST *":
    return _littlecms.cmsGetNamedColorList(xform)
cmsGetNamedColorList = _littlecms.cmsGetNamedColorList
class cmsPSEQDESC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPSEQDESC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPSEQDESC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["deviceMfg"] = _littlecms.cmsPSEQDESC_deviceMfg_set
    __swig_getmethods__["deviceMfg"] = _littlecms.cmsPSEQDESC_deviceMfg_get
    if _newclass:
        deviceMfg = _swig_property(_littlecms.cmsPSEQDESC_deviceMfg_get, _littlecms.cmsPSEQDESC_deviceMfg_set)
    __swig_setmethods__["deviceModel"] = _littlecms.cmsPSEQDESC_deviceModel_set
    __swig_getmethods__["deviceModel"] = _littlecms.cmsPSEQDESC_deviceModel_get
    if _newclass:
        deviceModel = _swig_property(_littlecms.cmsPSEQDESC_deviceModel_get, _littlecms.cmsPSEQDESC_deviceModel_set)
    __swig_setmethods__["attributes"] = _littlecms.cmsPSEQDESC_attributes_set
    __swig_getmethods__["attributes"] = _littlecms.cmsPSEQDESC_attributes_get
    if _newclass:
        attributes = _swig_property(_littlecms.cmsPSEQDESC_attributes_get, _littlecms.cmsPSEQDESC_attributes_set)
    __swig_setmethods__["technology"] = _littlecms.cmsPSEQDESC_technology_set
    __swig_getmethods__["technology"] = _littlecms.cmsPSEQDESC_technology_get
    if _newclass:
        technology = _swig_property(_littlecms.cmsPSEQDESC_technology_get, _littlecms.cmsPSEQDESC_technology_set)
    __swig_setmethods__["ProfileID"] = _littlecms.cmsPSEQDESC_ProfileID_set
    __swig_getmethods__["ProfileID"] = _littlecms.cmsPSEQDESC_ProfileID_get
    if _newclass:
        ProfileID = _swig_property(_littlecms.cmsPSEQDESC_ProfileID_get, _littlecms.cmsPSEQDESC_ProfileID_set)
    __swig_setmethods__["Manufacturer"] = _littlecms.cmsPSEQDESC_Manufacturer_set
    __swig_getmethods__["Manufacturer"] = _littlecms.cmsPSEQDESC_Manufacturer_get
    if _newclass:
        Manufacturer = _swig_property(_littlecms.cmsPSEQDESC_Manufacturer_get, _littlecms.cmsPSEQDESC_Manufacturer_set)
    __swig_setmethods__["Model"] = _littlecms.cmsPSEQDESC_Model_set
    __swig_getmethods__["Model"] = _littlecms.cmsPSEQDESC_Model_get
    if _newclass:
        Model = _swig_property(_littlecms.cmsPSEQDESC_Model_get, _littlecms.cmsPSEQDESC_Model_set)
    __swig_setmethods__["Description"] = _littlecms.cmsPSEQDESC_Description_set
    __swig_getmethods__["Description"] = _littlecms.cmsPSEQDESC_Description_get
    if _newclass:
        Description = _swig_property(_littlecms.cmsPSEQDESC_Description_get, _littlecms.cmsPSEQDESC_Description_set)

    def __init__(self):
        this = _littlecms.new_cmsPSEQDESC()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPSEQDESC
    __del__ = lambda self: None
cmsPSEQDESC_swigregister = _littlecms.cmsPSEQDESC_swigregister
cmsPSEQDESC_swigregister(cmsPSEQDESC)

class cmsSEQ(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsSEQ, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsSEQ, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _littlecms.cmsSEQ_n_set
    __swig_getmethods__["n"] = _littlecms.cmsSEQ_n_get
    if _newclass:
        n = _swig_property(_littlecms.cmsSEQ_n_get, _littlecms.cmsSEQ_n_set)
    __swig_setmethods__["ContextID"] = _littlecms.cmsSEQ_ContextID_set
    __swig_getmethods__["ContextID"] = _littlecms.cmsSEQ_ContextID_get
    if _newclass:
        ContextID = _swig_property(_littlecms.cmsSEQ_ContextID_get, _littlecms.cmsSEQ_ContextID_set)
    __swig_setmethods__["seq"] = _littlecms.cmsSEQ_seq_set
    __swig_getmethods__["seq"] = _littlecms.cmsSEQ_seq_get
    if _newclass:
        seq = _swig_property(_littlecms.cmsSEQ_seq_get, _littlecms.cmsSEQ_seq_set)

    def __init__(self):
        this = _littlecms.new_cmsSEQ()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsSEQ
    __del__ = lambda self: None
cmsSEQ_swigregister = _littlecms.cmsSEQ_swigregister
cmsSEQ_swigregister(cmsSEQ)


def cmsAllocProfileSequenceDescription(ContextID: 'cmsContext', n: 'cmsUInt32Number') -> "cmsSEQ *":
    return _littlecms.cmsAllocProfileSequenceDescription(ContextID, n)
cmsAllocProfileSequenceDescription = _littlecms.cmsAllocProfileSequenceDescription

def cmsDupProfileSequenceDescription(pseq: 'cmsSEQ') -> "cmsSEQ *":
    return _littlecms.cmsDupProfileSequenceDescription(pseq)
cmsDupProfileSequenceDescription = _littlecms.cmsDupProfileSequenceDescription

def cmsFreeProfileSequenceDescription(pseq: 'cmsSEQ') -> "void":
    return _littlecms.cmsFreeProfileSequenceDescription(pseq)
cmsFreeProfileSequenceDescription = _littlecms.cmsFreeProfileSequenceDescription
class cmsDICTentry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsDICTentry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsDICTentry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Next"] = _littlecms.cmsDICTentry_Next_set
    __swig_getmethods__["Next"] = _littlecms.cmsDICTentry_Next_get
    if _newclass:
        Next = _swig_property(_littlecms.cmsDICTentry_Next_get, _littlecms.cmsDICTentry_Next_set)
    __swig_setmethods__["DisplayName"] = _littlecms.cmsDICTentry_DisplayName_set
    __swig_getmethods__["DisplayName"] = _littlecms.cmsDICTentry_DisplayName_get
    if _newclass:
        DisplayName = _swig_property(_littlecms.cmsDICTentry_DisplayName_get, _littlecms.cmsDICTentry_DisplayName_set)
    __swig_setmethods__["DisplayValue"] = _littlecms.cmsDICTentry_DisplayValue_set
    __swig_getmethods__["DisplayValue"] = _littlecms.cmsDICTentry_DisplayValue_get
    if _newclass:
        DisplayValue = _swig_property(_littlecms.cmsDICTentry_DisplayValue_get, _littlecms.cmsDICTentry_DisplayValue_set)
    __swig_setmethods__["Name"] = _littlecms.cmsDICTentry_Name_set
    __swig_getmethods__["Name"] = _littlecms.cmsDICTentry_Name_get
    if _newclass:
        Name = _swig_property(_littlecms.cmsDICTentry_Name_get, _littlecms.cmsDICTentry_Name_set)
    __swig_setmethods__["Value"] = _littlecms.cmsDICTentry_Value_set
    __swig_getmethods__["Value"] = _littlecms.cmsDICTentry_Value_get
    if _newclass:
        Value = _swig_property(_littlecms.cmsDICTentry_Value_get, _littlecms.cmsDICTentry_Value_set)

    def __init__(self):
        this = _littlecms.new_cmsDICTentry()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsDICTentry
    __del__ = lambda self: None
cmsDICTentry_swigregister = _littlecms.cmsDICTentry_swigregister
cmsDICTentry_swigregister(cmsDICTentry)


def cmsDictAlloc(ContextID: 'cmsContext') -> "cmsHANDLE":
    return _littlecms.cmsDictAlloc(ContextID)
cmsDictAlloc = _littlecms.cmsDictAlloc

def cmsDictFree(hDict: 'cmsHANDLE') -> "void":
    return _littlecms.cmsDictFree(hDict)
cmsDictFree = _littlecms.cmsDictFree

def cmsDictDup(hDict: 'cmsHANDLE') -> "cmsHANDLE":
    return _littlecms.cmsDictDup(hDict)
cmsDictDup = _littlecms.cmsDictDup

def cmsDictAddEntry(hDict: 'cmsHANDLE', Name: 'wchar_t const *', Value: 'wchar_t const *', DisplayName: 'cmsMLU const *', DisplayValue: 'cmsMLU const *') -> "cmsBool":
    return _littlecms.cmsDictAddEntry(hDict, Name, Value, DisplayName, DisplayValue)
cmsDictAddEntry = _littlecms.cmsDictAddEntry

def cmsDictGetEntryList(hDict: 'cmsHANDLE') -> "cmsDICTentry const *":
    return _littlecms.cmsDictGetEntryList(hDict)
cmsDictGetEntryList = _littlecms.cmsDictGetEntryList

def cmsDictNextEntry(e: 'cmsDICTentry') -> "cmsDICTentry const *":
    return _littlecms.cmsDictNextEntry(e)
cmsDictNextEntry = _littlecms.cmsDictNextEntry

def cmsCreateProfilePlaceholder(ContextID: 'cmsContext') -> "cmsHPROFILE":
    return _littlecms.cmsCreateProfilePlaceholder(ContextID)
cmsCreateProfilePlaceholder = _littlecms.cmsCreateProfilePlaceholder

def cmsGetProfileContextID(hProfile: 'cmsHPROFILE') -> "cmsContext":
    return _littlecms.cmsGetProfileContextID(hProfile)
cmsGetProfileContextID = _littlecms.cmsGetProfileContextID

def cmsGetTagCount(hProfile: 'cmsHPROFILE') -> "cmsInt32Number":
    return _littlecms.cmsGetTagCount(hProfile)
cmsGetTagCount = _littlecms.cmsGetTagCount

def cmsGetTagSignature(hProfile: 'cmsHPROFILE', n: 'cmsUInt32Number') -> "cmsTagSignature":
    return _littlecms.cmsGetTagSignature(hProfile, n)
cmsGetTagSignature = _littlecms.cmsGetTagSignature

def cmsIsTag(hProfile: 'cmsHPROFILE', sig: 'cmsTagSignature') -> "cmsBool":
    return _littlecms.cmsIsTag(hProfile, sig)
cmsIsTag = _littlecms.cmsIsTag

def cmsReadTag(hProfile: 'cmsHPROFILE', sig: 'cmsTagSignature') -> "void *":
    return _littlecms.cmsReadTag(hProfile, sig)
cmsReadTag = _littlecms.cmsReadTag

def cmsWriteTag(hProfile: 'cmsHPROFILE', sig: 'cmsTagSignature', data: 'void const *') -> "cmsBool":
    return _littlecms.cmsWriteTag(hProfile, sig, data)
cmsWriteTag = _littlecms.cmsWriteTag

def cmsLinkTag(hProfile: 'cmsHPROFILE', sig: 'cmsTagSignature', dest: 'cmsTagSignature') -> "cmsBool":
    return _littlecms.cmsLinkTag(hProfile, sig, dest)
cmsLinkTag = _littlecms.cmsLinkTag

def cmsTagLinkedTo(hProfile: 'cmsHPROFILE', sig: 'cmsTagSignature') -> "cmsTagSignature":
    return _littlecms.cmsTagLinkedTo(hProfile, sig)
cmsTagLinkedTo = _littlecms.cmsTagLinkedTo

def cmsReadRawTag(hProfile: 'cmsHPROFILE', sig: 'cmsTagSignature', Buffer: 'void *', BufferSize: 'cmsUInt32Number') -> "cmsInt32Number":
    return _littlecms.cmsReadRawTag(hProfile, sig, Buffer, BufferSize)
cmsReadRawTag = _littlecms.cmsReadRawTag

def cmsWriteRawTag(hProfile: 'cmsHPROFILE', sig: 'cmsTagSignature', data: 'void const *', Size: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsWriteRawTag(hProfile, sig, data, Size)
cmsWriteRawTag = _littlecms.cmsWriteRawTag

_littlecms.cmsEmbeddedProfileFalse_swigconstant(_littlecms)
cmsEmbeddedProfileFalse = _littlecms.cmsEmbeddedProfileFalse

_littlecms.cmsEmbeddedProfileTrue_swigconstant(_littlecms)
cmsEmbeddedProfileTrue = _littlecms.cmsEmbeddedProfileTrue

_littlecms.cmsUseAnywhere_swigconstant(_littlecms)
cmsUseAnywhere = _littlecms.cmsUseAnywhere

_littlecms.cmsUseWithEmbeddedDataOnly_swigconstant(_littlecms)
cmsUseWithEmbeddedDataOnly = _littlecms.cmsUseWithEmbeddedDataOnly

def cmsGetHeaderFlags(hProfile: 'cmsHPROFILE') -> "cmsUInt32Number":
    return _littlecms.cmsGetHeaderFlags(hProfile)
cmsGetHeaderFlags = _littlecms.cmsGetHeaderFlags

def cmsGetHeaderAttributes(hProfile: 'cmsHPROFILE', Flags: 'cmsUInt64Number *') -> "void":
    return _littlecms.cmsGetHeaderAttributes(hProfile, Flags)
cmsGetHeaderAttributes = _littlecms.cmsGetHeaderAttributes

def cmsGetHeaderProfileID(hProfile: 'cmsHPROFILE', ProfileID: 'cmsUInt8Number *') -> "void":
    return _littlecms.cmsGetHeaderProfileID(hProfile, ProfileID)
cmsGetHeaderProfileID = _littlecms.cmsGetHeaderProfileID

def cmsGetHeaderCreationDateTime(hProfile: 'cmsHPROFILE', Dest: 'struct tm *') -> "cmsBool":
    return _littlecms.cmsGetHeaderCreationDateTime(hProfile, Dest)
cmsGetHeaderCreationDateTime = _littlecms.cmsGetHeaderCreationDateTime

def cmsGetHeaderRenderingIntent(hProfile: 'cmsHPROFILE') -> "cmsUInt32Number":
    return _littlecms.cmsGetHeaderRenderingIntent(hProfile)
cmsGetHeaderRenderingIntent = _littlecms.cmsGetHeaderRenderingIntent

def cmsSetHeaderFlags(hProfile: 'cmsHPROFILE', Flags: 'cmsUInt32Number') -> "void":
    return _littlecms.cmsSetHeaderFlags(hProfile, Flags)
cmsSetHeaderFlags = _littlecms.cmsSetHeaderFlags

def cmsGetHeaderManufacturer(hProfile: 'cmsHPROFILE') -> "cmsUInt32Number":
    return _littlecms.cmsGetHeaderManufacturer(hProfile)
cmsGetHeaderManufacturer = _littlecms.cmsGetHeaderManufacturer

def cmsSetHeaderManufacturer(hProfile: 'cmsHPROFILE', manufacturer: 'cmsUInt32Number') -> "void":
    return _littlecms.cmsSetHeaderManufacturer(hProfile, manufacturer)
cmsSetHeaderManufacturer = _littlecms.cmsSetHeaderManufacturer

def cmsGetHeaderCreator(hProfile: 'cmsHPROFILE') -> "cmsUInt32Number":
    return _littlecms.cmsGetHeaderCreator(hProfile)
cmsGetHeaderCreator = _littlecms.cmsGetHeaderCreator

def cmsGetHeaderModel(hProfile: 'cmsHPROFILE') -> "cmsUInt32Number":
    return _littlecms.cmsGetHeaderModel(hProfile)
cmsGetHeaderModel = _littlecms.cmsGetHeaderModel

def cmsSetHeaderModel(hProfile: 'cmsHPROFILE', model: 'cmsUInt32Number') -> "void":
    return _littlecms.cmsSetHeaderModel(hProfile, model)
cmsSetHeaderModel = _littlecms.cmsSetHeaderModel

def cmsSetHeaderAttributes(hProfile: 'cmsHPROFILE', Flags: 'cmsUInt64Number') -> "void":
    return _littlecms.cmsSetHeaderAttributes(hProfile, Flags)
cmsSetHeaderAttributes = _littlecms.cmsSetHeaderAttributes

def cmsSetHeaderProfileID(hProfile: 'cmsHPROFILE', ProfileID: 'cmsUInt8Number *') -> "void":
    return _littlecms.cmsSetHeaderProfileID(hProfile, ProfileID)
cmsSetHeaderProfileID = _littlecms.cmsSetHeaderProfileID

def cmsSetHeaderRenderingIntent(hProfile: 'cmsHPROFILE', RenderingIntent: 'cmsUInt32Number') -> "void":
    return _littlecms.cmsSetHeaderRenderingIntent(hProfile, RenderingIntent)
cmsSetHeaderRenderingIntent = _littlecms.cmsSetHeaderRenderingIntent

def cmsGetPCS(hProfile: 'cmsHPROFILE') -> "cmsColorSpaceSignature":
    return _littlecms.cmsGetPCS(hProfile)
cmsGetPCS = _littlecms.cmsGetPCS

def cmsSetPCS(hProfile: 'cmsHPROFILE', pcs: 'cmsColorSpaceSignature') -> "void":
    return _littlecms.cmsSetPCS(hProfile, pcs)
cmsSetPCS = _littlecms.cmsSetPCS

def cmsGetColorSpace(hProfile: 'cmsHPROFILE') -> "cmsColorSpaceSignature":
    return _littlecms.cmsGetColorSpace(hProfile)
cmsGetColorSpace = _littlecms.cmsGetColorSpace

def cmsSetColorSpace(hProfile: 'cmsHPROFILE', sig: 'cmsColorSpaceSignature') -> "void":
    return _littlecms.cmsSetColorSpace(hProfile, sig)
cmsSetColorSpace = _littlecms.cmsSetColorSpace

def cmsGetDeviceClass(hProfile: 'cmsHPROFILE') -> "cmsProfileClassSignature":
    return _littlecms.cmsGetDeviceClass(hProfile)
cmsGetDeviceClass = _littlecms.cmsGetDeviceClass

def cmsSetDeviceClass(hProfile: 'cmsHPROFILE', sig: 'cmsProfileClassSignature') -> "void":
    return _littlecms.cmsSetDeviceClass(hProfile, sig)
cmsSetDeviceClass = _littlecms.cmsSetDeviceClass

def cmsSetProfileVersion(hProfile: 'cmsHPROFILE', Version: 'cmsFloat64Number') -> "void":
    return _littlecms.cmsSetProfileVersion(hProfile, Version)
cmsSetProfileVersion = _littlecms.cmsSetProfileVersion

def cmsGetProfileVersion(hProfile: 'cmsHPROFILE') -> "cmsFloat64Number":
    return _littlecms.cmsGetProfileVersion(hProfile)
cmsGetProfileVersion = _littlecms.cmsGetProfileVersion

def cmsGetEncodedICCversion(hProfile: 'cmsHPROFILE') -> "cmsUInt32Number":
    return _littlecms.cmsGetEncodedICCversion(hProfile)
cmsGetEncodedICCversion = _littlecms.cmsGetEncodedICCversion

def cmsSetEncodedICCversion(hProfile: 'cmsHPROFILE', Version: 'cmsUInt32Number') -> "void":
    return _littlecms.cmsSetEncodedICCversion(hProfile, Version)
cmsSetEncodedICCversion = _littlecms.cmsSetEncodedICCversion

_littlecms.LCMS_USED_AS_INPUT_swigconstant(_littlecms)
LCMS_USED_AS_INPUT = _littlecms.LCMS_USED_AS_INPUT

_littlecms.LCMS_USED_AS_OUTPUT_swigconstant(_littlecms)
LCMS_USED_AS_OUTPUT = _littlecms.LCMS_USED_AS_OUTPUT

_littlecms.LCMS_USED_AS_PROOF_swigconstant(_littlecms)
LCMS_USED_AS_PROOF = _littlecms.LCMS_USED_AS_PROOF

def cmsIsIntentSupported(hProfile: 'cmsHPROFILE', Intent: 'cmsUInt32Number', UsedDirection: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsIsIntentSupported(hProfile, Intent, UsedDirection)
cmsIsIntentSupported = _littlecms.cmsIsIntentSupported

def cmsIsMatrixShaper(hProfile: 'cmsHPROFILE') -> "cmsBool":
    return _littlecms.cmsIsMatrixShaper(hProfile)
cmsIsMatrixShaper = _littlecms.cmsIsMatrixShaper

def cmsIsCLUT(hProfile: 'cmsHPROFILE', Intent: 'cmsUInt32Number', UsedDirection: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsIsCLUT(hProfile, Intent, UsedDirection)
cmsIsCLUT = _littlecms.cmsIsCLUT

def _cmsICCcolorSpace(OurNotation: 'int') -> "cmsColorSpaceSignature":
    return _littlecms._cmsICCcolorSpace(OurNotation)
_cmsICCcolorSpace = _littlecms._cmsICCcolorSpace

def _cmsLCMScolorSpace(ProfileSpace: 'cmsColorSpaceSignature') -> "int":
    return _littlecms._cmsLCMScolorSpace(ProfileSpace)
_cmsLCMScolorSpace = _littlecms._cmsLCMScolorSpace

def cmsChannelsOf(ColorSpace: 'cmsColorSpaceSignature') -> "cmsUInt32Number":
    return _littlecms.cmsChannelsOf(ColorSpace)
cmsChannelsOf = _littlecms.cmsChannelsOf

def cmsFormatterForColorspaceOfProfile(hProfile: 'cmsHPROFILE', nBytes: 'cmsUInt32Number', lIsFloat: 'cmsBool') -> "cmsUInt32Number":
    return _littlecms.cmsFormatterForColorspaceOfProfile(hProfile, nBytes, lIsFloat)
cmsFormatterForColorspaceOfProfile = _littlecms.cmsFormatterForColorspaceOfProfile

def cmsFormatterForPCSOfProfile(hProfile: 'cmsHPROFILE', nBytes: 'cmsUInt32Number', lIsFloat: 'cmsBool') -> "cmsUInt32Number":
    return _littlecms.cmsFormatterForPCSOfProfile(hProfile, nBytes, lIsFloat)
cmsFormatterForPCSOfProfile = _littlecms.cmsFormatterForPCSOfProfile

_littlecms.cmsInfoDescription_swigconstant(_littlecms)
cmsInfoDescription = _littlecms.cmsInfoDescription

_littlecms.cmsInfoManufacturer_swigconstant(_littlecms)
cmsInfoManufacturer = _littlecms.cmsInfoManufacturer

_littlecms.cmsInfoModel_swigconstant(_littlecms)
cmsInfoModel = _littlecms.cmsInfoModel

_littlecms.cmsInfoCopyright_swigconstant(_littlecms)
cmsInfoCopyright = _littlecms.cmsInfoCopyright

def cmsGetProfileInfo(hProfile: 'cmsHPROFILE', Info: 'cmsInfoType', LanguageCode: 'char const [3]', CountryCode: 'char const [3]', Buffer: 'wchar_t *', BufferSize: 'cmsUInt32Number') -> "cmsUInt32Number":
    return _littlecms.cmsGetProfileInfo(hProfile, Info, LanguageCode, CountryCode, Buffer, BufferSize)
cmsGetProfileInfo = _littlecms.cmsGetProfileInfo

def cmsGetProfileInfoASCII(hProfile: 'cmsHPROFILE', Info: 'cmsInfoType', LanguageCode: 'char const [3]', CountryCode: 'char const [3]', Buffer: 'char *', BufferSize: 'cmsUInt32Number') -> "cmsUInt32Number":
    return _littlecms.cmsGetProfileInfoASCII(hProfile, Info, LanguageCode, CountryCode, Buffer, BufferSize)
cmsGetProfileInfoASCII = _littlecms.cmsGetProfileInfoASCII

def cmsOpenIOhandlerFromFile(ContextID: 'cmsContext', FileName: 'char const *', AccessMode: 'char const *') -> "cmsIOHANDLER *":
    return _littlecms.cmsOpenIOhandlerFromFile(ContextID, FileName, AccessMode)
cmsOpenIOhandlerFromFile = _littlecms.cmsOpenIOhandlerFromFile

def cmsOpenIOhandlerFromStream(ContextID: 'cmsContext', Stream: 'FILE *') -> "cmsIOHANDLER *":
    return _littlecms.cmsOpenIOhandlerFromStream(ContextID, Stream)
cmsOpenIOhandlerFromStream = _littlecms.cmsOpenIOhandlerFromStream

def cmsOpenIOhandlerFromMem(ContextID: 'cmsContext', Buffer: 'void *', size: 'cmsUInt32Number', AccessMode: 'char const *') -> "cmsIOHANDLER *":
    return _littlecms.cmsOpenIOhandlerFromMem(ContextID, Buffer, size, AccessMode)
cmsOpenIOhandlerFromMem = _littlecms.cmsOpenIOhandlerFromMem

def cmsOpenIOhandlerFromNULL(ContextID: 'cmsContext') -> "cmsIOHANDLER *":
    return _littlecms.cmsOpenIOhandlerFromNULL(ContextID)
cmsOpenIOhandlerFromNULL = _littlecms.cmsOpenIOhandlerFromNULL

def cmsGetProfileIOhandler(hProfile: 'cmsHPROFILE') -> "cmsIOHANDLER *":
    return _littlecms.cmsGetProfileIOhandler(hProfile)
cmsGetProfileIOhandler = _littlecms.cmsGetProfileIOhandler

def cmsCloseIOhandler(io: '_cms_io_handler') -> "cmsBool":
    return _littlecms.cmsCloseIOhandler(io)
cmsCloseIOhandler = _littlecms.cmsCloseIOhandler

def cmsMD5computeID(hProfile: 'cmsHPROFILE') -> "cmsBool":
    return _littlecms.cmsMD5computeID(hProfile)
cmsMD5computeID = _littlecms.cmsMD5computeID

def cmsOpenProfileFromFile(ICCProfile: 'char const *', sAccess: 'char const *') -> "cmsHPROFILE":
    return _littlecms.cmsOpenProfileFromFile(ICCProfile, sAccess)
cmsOpenProfileFromFile = _littlecms.cmsOpenProfileFromFile

def cmsOpenProfileFromFileTHR(ContextID: 'cmsContext', ICCProfile: 'char const *', sAccess: 'char const *') -> "cmsHPROFILE":
    return _littlecms.cmsOpenProfileFromFileTHR(ContextID, ICCProfile, sAccess)
cmsOpenProfileFromFileTHR = _littlecms.cmsOpenProfileFromFileTHR

def cmsOpenProfileFromStream(ICCProfile: 'FILE *', sAccess: 'char const *') -> "cmsHPROFILE":
    return _littlecms.cmsOpenProfileFromStream(ICCProfile, sAccess)
cmsOpenProfileFromStream = _littlecms.cmsOpenProfileFromStream

def cmsOpenProfileFromStreamTHR(ContextID: 'cmsContext', ICCProfile: 'FILE *', sAccess: 'char const *') -> "cmsHPROFILE":
    return _littlecms.cmsOpenProfileFromStreamTHR(ContextID, ICCProfile, sAccess)
cmsOpenProfileFromStreamTHR = _littlecms.cmsOpenProfileFromStreamTHR

def cmsOpenProfileFromMem(MemPtr: 'void const *', dwSize: 'cmsUInt32Number') -> "cmsHPROFILE":
    return _littlecms.cmsOpenProfileFromMem(MemPtr, dwSize)
cmsOpenProfileFromMem = _littlecms.cmsOpenProfileFromMem

def cmsOpenProfileFromMemTHR(ContextID: 'cmsContext', MemPtr: 'void const *', dwSize: 'cmsUInt32Number') -> "cmsHPROFILE":
    return _littlecms.cmsOpenProfileFromMemTHR(ContextID, MemPtr, dwSize)
cmsOpenProfileFromMemTHR = _littlecms.cmsOpenProfileFromMemTHR

def cmsOpenProfileFromIOhandlerTHR(ContextID: 'cmsContext', io: '_cms_io_handler') -> "cmsHPROFILE":
    return _littlecms.cmsOpenProfileFromIOhandlerTHR(ContextID, io)
cmsOpenProfileFromIOhandlerTHR = _littlecms.cmsOpenProfileFromIOhandlerTHR

def cmsOpenProfileFromIOhandler2THR(ContextID: 'cmsContext', io: '_cms_io_handler', write: 'cmsBool') -> "cmsHPROFILE":
    return _littlecms.cmsOpenProfileFromIOhandler2THR(ContextID, io, write)
cmsOpenProfileFromIOhandler2THR = _littlecms.cmsOpenProfileFromIOhandler2THR

def cmsCloseProfile(hProfile: 'cmsHPROFILE') -> "cmsBool":
    return _littlecms.cmsCloseProfile(hProfile)
cmsCloseProfile = _littlecms.cmsCloseProfile

def cmsSaveProfileToFile(hProfile: 'cmsHPROFILE', FileName: 'char const *') -> "cmsBool":
    return _littlecms.cmsSaveProfileToFile(hProfile, FileName)
cmsSaveProfileToFile = _littlecms.cmsSaveProfileToFile

def cmsSaveProfileToStream(hProfile: 'cmsHPROFILE', Stream: 'FILE *') -> "cmsBool":
    return _littlecms.cmsSaveProfileToStream(hProfile, Stream)
cmsSaveProfileToStream = _littlecms.cmsSaveProfileToStream

def cmsSaveProfileToMem(hProfile: 'cmsHPROFILE', MemPtr: 'void *', BytesNeeded: 'cmsUInt32Number *') -> "cmsBool":
    return _littlecms.cmsSaveProfileToMem(hProfile, MemPtr, BytesNeeded)
cmsSaveProfileToMem = _littlecms.cmsSaveProfileToMem

def cmsSaveProfileToIOhandler(hProfile: 'cmsHPROFILE', io: '_cms_io_handler') -> "cmsUInt32Number":
    return _littlecms.cmsSaveProfileToIOhandler(hProfile, io)
cmsSaveProfileToIOhandler = _littlecms.cmsSaveProfileToIOhandler

def cmsCreateRGBProfileTHR(ContextID: 'cmsContext', WhitePoint: 'cmsCIExyY', Primaries: 'cmsCIExyYTRIPLE', TransferFunction: 'cmsToneCurve *const [3]') -> "cmsHPROFILE":
    return _littlecms.cmsCreateRGBProfileTHR(ContextID, WhitePoint, Primaries, TransferFunction)
cmsCreateRGBProfileTHR = _littlecms.cmsCreateRGBProfileTHR

def cmsCreateRGBProfile(WhitePoint: 'cmsCIExyY', Primaries: 'cmsCIExyYTRIPLE', TransferFunction: 'cmsToneCurve *const [3]') -> "cmsHPROFILE":
    return _littlecms.cmsCreateRGBProfile(WhitePoint, Primaries, TransferFunction)
cmsCreateRGBProfile = _littlecms.cmsCreateRGBProfile

def cmsCreateGrayProfileTHR(ContextID: 'cmsContext', WhitePoint: 'cmsCIExyY', TransferFunction: 'cmsToneCurve const *') -> "cmsHPROFILE":
    return _littlecms.cmsCreateGrayProfileTHR(ContextID, WhitePoint, TransferFunction)
cmsCreateGrayProfileTHR = _littlecms.cmsCreateGrayProfileTHR

def cmsCreateGrayProfile(WhitePoint: 'cmsCIExyY', TransferFunction: 'cmsToneCurve const *') -> "cmsHPROFILE":
    return _littlecms.cmsCreateGrayProfile(WhitePoint, TransferFunction)
cmsCreateGrayProfile = _littlecms.cmsCreateGrayProfile

def cmsCreateLinearizationDeviceLinkTHR(ContextID: 'cmsContext', ColorSpace: 'cmsColorSpaceSignature', TransferFunctions: 'cmsToneCurve *const []') -> "cmsHPROFILE":
    return _littlecms.cmsCreateLinearizationDeviceLinkTHR(ContextID, ColorSpace, TransferFunctions)
cmsCreateLinearizationDeviceLinkTHR = _littlecms.cmsCreateLinearizationDeviceLinkTHR

def cmsCreateLinearizationDeviceLink(ColorSpace: 'cmsColorSpaceSignature', TransferFunctions: 'cmsToneCurve *const []') -> "cmsHPROFILE":
    return _littlecms.cmsCreateLinearizationDeviceLink(ColorSpace, TransferFunctions)
cmsCreateLinearizationDeviceLink = _littlecms.cmsCreateLinearizationDeviceLink

def cmsCreateInkLimitingDeviceLinkTHR(ContextID: 'cmsContext', ColorSpace: 'cmsColorSpaceSignature', Limit: 'cmsFloat64Number') -> "cmsHPROFILE":
    return _littlecms.cmsCreateInkLimitingDeviceLinkTHR(ContextID, ColorSpace, Limit)
cmsCreateInkLimitingDeviceLinkTHR = _littlecms.cmsCreateInkLimitingDeviceLinkTHR

def cmsCreateInkLimitingDeviceLink(ColorSpace: 'cmsColorSpaceSignature', Limit: 'cmsFloat64Number') -> "cmsHPROFILE":
    return _littlecms.cmsCreateInkLimitingDeviceLink(ColorSpace, Limit)
cmsCreateInkLimitingDeviceLink = _littlecms.cmsCreateInkLimitingDeviceLink

def cmsCreateLab2ProfileTHR(ContextID: 'cmsContext', WhitePoint: 'cmsCIExyY') -> "cmsHPROFILE":
    return _littlecms.cmsCreateLab2ProfileTHR(ContextID, WhitePoint)
cmsCreateLab2ProfileTHR = _littlecms.cmsCreateLab2ProfileTHR

def cmsCreateLab2Profile(WhitePoint: 'cmsCIExyY') -> "cmsHPROFILE":
    return _littlecms.cmsCreateLab2Profile(WhitePoint)
cmsCreateLab2Profile = _littlecms.cmsCreateLab2Profile

def cmsCreateLab4ProfileTHR(ContextID: 'cmsContext', WhitePoint: 'cmsCIExyY') -> "cmsHPROFILE":
    return _littlecms.cmsCreateLab4ProfileTHR(ContextID, WhitePoint)
cmsCreateLab4ProfileTHR = _littlecms.cmsCreateLab4ProfileTHR

def cmsCreateLab4Profile(WhitePoint: 'cmsCIExyY') -> "cmsHPROFILE":
    return _littlecms.cmsCreateLab4Profile(WhitePoint)
cmsCreateLab4Profile = _littlecms.cmsCreateLab4Profile

def cmsCreateXYZProfileTHR(ContextID: 'cmsContext') -> "cmsHPROFILE":
    return _littlecms.cmsCreateXYZProfileTHR(ContextID)
cmsCreateXYZProfileTHR = _littlecms.cmsCreateXYZProfileTHR

def cmsCreateXYZProfile() -> "cmsHPROFILE":
    return _littlecms.cmsCreateXYZProfile()
cmsCreateXYZProfile = _littlecms.cmsCreateXYZProfile

def cmsCreate_sRGBProfileTHR(ContextID: 'cmsContext') -> "cmsHPROFILE":
    return _littlecms.cmsCreate_sRGBProfileTHR(ContextID)
cmsCreate_sRGBProfileTHR = _littlecms.cmsCreate_sRGBProfileTHR

def cmsCreate_sRGBProfile() -> "cmsHPROFILE":
    return _littlecms.cmsCreate_sRGBProfile()
cmsCreate_sRGBProfile = _littlecms.cmsCreate_sRGBProfile

def cmsCreateBCHSWabstractProfileTHR(ContextID: 'cmsContext', nLUTPoints: 'int', Bright: 'cmsFloat64Number', Contrast: 'cmsFloat64Number', Hue: 'cmsFloat64Number', Saturation: 'cmsFloat64Number', TempSrc: 'int', TempDest: 'int') -> "cmsHPROFILE":
    return _littlecms.cmsCreateBCHSWabstractProfileTHR(ContextID, nLUTPoints, Bright, Contrast, Hue, Saturation, TempSrc, TempDest)
cmsCreateBCHSWabstractProfileTHR = _littlecms.cmsCreateBCHSWabstractProfileTHR

def cmsCreateBCHSWabstractProfile(nLUTPoints: 'int', Bright: 'cmsFloat64Number', Contrast: 'cmsFloat64Number', Hue: 'cmsFloat64Number', Saturation: 'cmsFloat64Number', TempSrc: 'int', TempDest: 'int') -> "cmsHPROFILE":
    return _littlecms.cmsCreateBCHSWabstractProfile(nLUTPoints, Bright, Contrast, Hue, Saturation, TempSrc, TempDest)
cmsCreateBCHSWabstractProfile = _littlecms.cmsCreateBCHSWabstractProfile

def cmsCreateNULLProfileTHR(ContextID: 'cmsContext') -> "cmsHPROFILE":
    return _littlecms.cmsCreateNULLProfileTHR(ContextID)
cmsCreateNULLProfileTHR = _littlecms.cmsCreateNULLProfileTHR

def cmsCreateNULLProfile() -> "cmsHPROFILE":
    return _littlecms.cmsCreateNULLProfile()
cmsCreateNULLProfile = _littlecms.cmsCreateNULLProfile

def cmsTransform2DeviceLink(hTransform: 'cmsHTRANSFORM', Version: 'cmsFloat64Number', dwFlags: 'cmsUInt32Number') -> "cmsHPROFILE":
    return _littlecms.cmsTransform2DeviceLink(hTransform, Version, dwFlags)
cmsTransform2DeviceLink = _littlecms.cmsTransform2DeviceLink

_littlecms.INTENT_PERCEPTUAL_swigconstant(_littlecms)
INTENT_PERCEPTUAL = _littlecms.INTENT_PERCEPTUAL

_littlecms.INTENT_RELATIVE_COLORIMETRIC_swigconstant(_littlecms)
INTENT_RELATIVE_COLORIMETRIC = _littlecms.INTENT_RELATIVE_COLORIMETRIC

_littlecms.INTENT_SATURATION_swigconstant(_littlecms)
INTENT_SATURATION = _littlecms.INTENT_SATURATION

_littlecms.INTENT_ABSOLUTE_COLORIMETRIC_swigconstant(_littlecms)
INTENT_ABSOLUTE_COLORIMETRIC = _littlecms.INTENT_ABSOLUTE_COLORIMETRIC

_littlecms.INTENT_PRESERVE_K_ONLY_PERCEPTUAL_swigconstant(_littlecms)
INTENT_PRESERVE_K_ONLY_PERCEPTUAL = _littlecms.INTENT_PRESERVE_K_ONLY_PERCEPTUAL

_littlecms.INTENT_PRESERVE_K_ONLY_RELATIVE_COLORIMETRIC_swigconstant(_littlecms)
INTENT_PRESERVE_K_ONLY_RELATIVE_COLORIMETRIC = _littlecms.INTENT_PRESERVE_K_ONLY_RELATIVE_COLORIMETRIC

_littlecms.INTENT_PRESERVE_K_ONLY_SATURATION_swigconstant(_littlecms)
INTENT_PRESERVE_K_ONLY_SATURATION = _littlecms.INTENT_PRESERVE_K_ONLY_SATURATION

_littlecms.INTENT_PRESERVE_K_PLANE_PERCEPTUAL_swigconstant(_littlecms)
INTENT_PRESERVE_K_PLANE_PERCEPTUAL = _littlecms.INTENT_PRESERVE_K_PLANE_PERCEPTUAL

_littlecms.INTENT_PRESERVE_K_PLANE_RELATIVE_COLORIMETRIC_swigconstant(_littlecms)
INTENT_PRESERVE_K_PLANE_RELATIVE_COLORIMETRIC = _littlecms.INTENT_PRESERVE_K_PLANE_RELATIVE_COLORIMETRIC

_littlecms.INTENT_PRESERVE_K_PLANE_SATURATION_swigconstant(_littlecms)
INTENT_PRESERVE_K_PLANE_SATURATION = _littlecms.INTENT_PRESERVE_K_PLANE_SATURATION

def cmsGetSupportedIntents(nMax: 'cmsUInt32Number', Codes: 'cmsUInt32Number *', Descriptions: 'char **') -> "cmsUInt32Number":
    return _littlecms.cmsGetSupportedIntents(nMax, Codes, Descriptions)
cmsGetSupportedIntents = _littlecms.cmsGetSupportedIntents

def cmsGetSupportedIntentsTHR(ContextID: 'cmsContext', nMax: 'cmsUInt32Number', Codes: 'cmsUInt32Number *', Descriptions: 'char **') -> "cmsUInt32Number":
    return _littlecms.cmsGetSupportedIntentsTHR(ContextID, nMax, Codes, Descriptions)
cmsGetSupportedIntentsTHR = _littlecms.cmsGetSupportedIntentsTHR

_littlecms.cmsFLAGS_NOCACHE_swigconstant(_littlecms)
cmsFLAGS_NOCACHE = _littlecms.cmsFLAGS_NOCACHE

_littlecms.cmsFLAGS_NOOPTIMIZE_swigconstant(_littlecms)
cmsFLAGS_NOOPTIMIZE = _littlecms.cmsFLAGS_NOOPTIMIZE

_littlecms.cmsFLAGS_NULLTRANSFORM_swigconstant(_littlecms)
cmsFLAGS_NULLTRANSFORM = _littlecms.cmsFLAGS_NULLTRANSFORM

_littlecms.cmsFLAGS_GAMUTCHECK_swigconstant(_littlecms)
cmsFLAGS_GAMUTCHECK = _littlecms.cmsFLAGS_GAMUTCHECK

_littlecms.cmsFLAGS_SOFTPROOFING_swigconstant(_littlecms)
cmsFLAGS_SOFTPROOFING = _littlecms.cmsFLAGS_SOFTPROOFING

_littlecms.cmsFLAGS_BLACKPOINTCOMPENSATION_swigconstant(_littlecms)
cmsFLAGS_BLACKPOINTCOMPENSATION = _littlecms.cmsFLAGS_BLACKPOINTCOMPENSATION

_littlecms.cmsFLAGS_NOWHITEONWHITEFIXUP_swigconstant(_littlecms)
cmsFLAGS_NOWHITEONWHITEFIXUP = _littlecms.cmsFLAGS_NOWHITEONWHITEFIXUP

_littlecms.cmsFLAGS_HIGHRESPRECALC_swigconstant(_littlecms)
cmsFLAGS_HIGHRESPRECALC = _littlecms.cmsFLAGS_HIGHRESPRECALC

_littlecms.cmsFLAGS_LOWRESPRECALC_swigconstant(_littlecms)
cmsFLAGS_LOWRESPRECALC = _littlecms.cmsFLAGS_LOWRESPRECALC

_littlecms.cmsFLAGS_8BITS_DEVICELINK_swigconstant(_littlecms)
cmsFLAGS_8BITS_DEVICELINK = _littlecms.cmsFLAGS_8BITS_DEVICELINK

_littlecms.cmsFLAGS_GUESSDEVICECLASS_swigconstant(_littlecms)
cmsFLAGS_GUESSDEVICECLASS = _littlecms.cmsFLAGS_GUESSDEVICECLASS

_littlecms.cmsFLAGS_KEEP_SEQUENCE_swigconstant(_littlecms)
cmsFLAGS_KEEP_SEQUENCE = _littlecms.cmsFLAGS_KEEP_SEQUENCE

_littlecms.cmsFLAGS_FORCE_CLUT_swigconstant(_littlecms)
cmsFLAGS_FORCE_CLUT = _littlecms.cmsFLAGS_FORCE_CLUT

_littlecms.cmsFLAGS_CLUT_POST_LINEARIZATION_swigconstant(_littlecms)
cmsFLAGS_CLUT_POST_LINEARIZATION = _littlecms.cmsFLAGS_CLUT_POST_LINEARIZATION

_littlecms.cmsFLAGS_CLUT_PRE_LINEARIZATION_swigconstant(_littlecms)
cmsFLAGS_CLUT_PRE_LINEARIZATION = _littlecms.cmsFLAGS_CLUT_PRE_LINEARIZATION

_littlecms.cmsFLAGS_NONEGATIVES_swigconstant(_littlecms)
cmsFLAGS_NONEGATIVES = _littlecms.cmsFLAGS_NONEGATIVES

_littlecms.cmsFLAGS_NODEFAULTRESOURCEDEF_swigconstant(_littlecms)
cmsFLAGS_NODEFAULTRESOURCEDEF = _littlecms.cmsFLAGS_NODEFAULTRESOURCEDEF

def cmsCreateTransformTHR(ContextID: 'cmsContext', Input: 'cmsHPROFILE', InputFormat: 'cmsUInt32Number', Output: 'cmsHPROFILE', OutputFormat: 'cmsUInt32Number', Intent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number') -> "cmsHTRANSFORM":
    return _littlecms.cmsCreateTransformTHR(ContextID, Input, InputFormat, Output, OutputFormat, Intent, dwFlags)
cmsCreateTransformTHR = _littlecms.cmsCreateTransformTHR

def cmsCreateTransform(Input: 'cmsHPROFILE', InputFormat: 'cmsUInt32Number', Output: 'cmsHPROFILE', OutputFormat: 'cmsUInt32Number', Intent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number') -> "cmsHTRANSFORM":
    return _littlecms.cmsCreateTransform(Input, InputFormat, Output, OutputFormat, Intent, dwFlags)
cmsCreateTransform = _littlecms.cmsCreateTransform

def cmsCreateProofingTransformTHR(ContextID: 'cmsContext', Input: 'cmsHPROFILE', InputFormat: 'cmsUInt32Number', Output: 'cmsHPROFILE', OutputFormat: 'cmsUInt32Number', Proofing: 'cmsHPROFILE', Intent: 'cmsUInt32Number', ProofingIntent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number') -> "cmsHTRANSFORM":
    return _littlecms.cmsCreateProofingTransformTHR(ContextID, Input, InputFormat, Output, OutputFormat, Proofing, Intent, ProofingIntent, dwFlags)
cmsCreateProofingTransformTHR = _littlecms.cmsCreateProofingTransformTHR

def cmsCreateProofingTransform(Input: 'cmsHPROFILE', InputFormat: 'cmsUInt32Number', Output: 'cmsHPROFILE', OutputFormat: 'cmsUInt32Number', Proofing: 'cmsHPROFILE', Intent: 'cmsUInt32Number', ProofingIntent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number') -> "cmsHTRANSFORM":
    return _littlecms.cmsCreateProofingTransform(Input, InputFormat, Output, OutputFormat, Proofing, Intent, ProofingIntent, dwFlags)
cmsCreateProofingTransform = _littlecms.cmsCreateProofingTransform

def cmsCreateMultiprofileTransformTHR(ContextID: 'cmsContext', hProfiles: 'cmsHPROFILE []', nProfiles: 'cmsUInt32Number', InputFormat: 'cmsUInt32Number', OutputFormat: 'cmsUInt32Number', Intent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number') -> "cmsHTRANSFORM":
    return _littlecms.cmsCreateMultiprofileTransformTHR(ContextID, hProfiles, nProfiles, InputFormat, OutputFormat, Intent, dwFlags)
cmsCreateMultiprofileTransformTHR = _littlecms.cmsCreateMultiprofileTransformTHR

def cmsCreateMultiprofileTransform(hProfiles: 'cmsHPROFILE []', nProfiles: 'cmsUInt32Number', InputFormat: 'cmsUInt32Number', OutputFormat: 'cmsUInt32Number', Intent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number') -> "cmsHTRANSFORM":
    return _littlecms.cmsCreateMultiprofileTransform(hProfiles, nProfiles, InputFormat, OutputFormat, Intent, dwFlags)
cmsCreateMultiprofileTransform = _littlecms.cmsCreateMultiprofileTransform

def cmsCreateExtendedTransform(ContextID: 'cmsContext', nProfiles: 'cmsUInt32Number', hProfiles: 'cmsHPROFILE []', BPC: 'cmsBool []', Intents: 'cmsUInt32Number []', AdaptationStates: 'cmsFloat64Number []', hGamutProfile: 'cmsHPROFILE', nGamutPCSposition: 'cmsUInt32Number', InputFormat: 'cmsUInt32Number', OutputFormat: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number') -> "cmsHTRANSFORM":
    return _littlecms.cmsCreateExtendedTransform(ContextID, nProfiles, hProfiles, BPC, Intents, AdaptationStates, hGamutProfile, nGamutPCSposition, InputFormat, OutputFormat, dwFlags)
cmsCreateExtendedTransform = _littlecms.cmsCreateExtendedTransform

def cmsDeleteTransform(hTransform: 'cmsHTRANSFORM') -> "void":
    return _littlecms.cmsDeleteTransform(hTransform)
cmsDeleteTransform = _littlecms.cmsDeleteTransform

def cmsDoTransform(Transform: 'cmsHTRANSFORM', InputBuffer: 'void const *', OutputBuffer: 'void *', Size: 'cmsUInt32Number') -> "void":
    return _littlecms.cmsDoTransform(Transform, InputBuffer, OutputBuffer, Size)
cmsDoTransform = _littlecms.cmsDoTransform

def cmsDoTransformStride(Transform: 'cmsHTRANSFORM', InputBuffer: 'void const *', OutputBuffer: 'void *', Size: 'cmsUInt32Number', Stride: 'cmsUInt32Number') -> "void":
    return _littlecms.cmsDoTransformStride(Transform, InputBuffer, OutputBuffer, Size, Stride)
cmsDoTransformStride = _littlecms.cmsDoTransformStride

def cmsSetAlarmCodes(NewAlarm: 'cmsUInt16Number const [16]') -> "void":
    return _littlecms.cmsSetAlarmCodes(NewAlarm)
cmsSetAlarmCodes = _littlecms.cmsSetAlarmCodes

def cmsGetAlarmCodes(NewAlarm: 'cmsUInt16Number [16]') -> "void":
    return _littlecms.cmsGetAlarmCodes(NewAlarm)
cmsGetAlarmCodes = _littlecms.cmsGetAlarmCodes

def cmsSetAlarmCodesTHR(ContextID: 'cmsContext', AlarmCodes: 'cmsUInt16Number const [16]') -> "void":
    return _littlecms.cmsSetAlarmCodesTHR(ContextID, AlarmCodes)
cmsSetAlarmCodesTHR = _littlecms.cmsSetAlarmCodesTHR

def cmsGetAlarmCodesTHR(ContextID: 'cmsContext', AlarmCodes: 'cmsUInt16Number [16]') -> "void":
    return _littlecms.cmsGetAlarmCodesTHR(ContextID, AlarmCodes)
cmsGetAlarmCodesTHR = _littlecms.cmsGetAlarmCodesTHR

def cmsSetAdaptationState(d: 'cmsFloat64Number') -> "cmsFloat64Number":
    return _littlecms.cmsSetAdaptationState(d)
cmsSetAdaptationState = _littlecms.cmsSetAdaptationState

def cmsSetAdaptationStateTHR(ContextID: 'cmsContext', d: 'cmsFloat64Number') -> "cmsFloat64Number":
    return _littlecms.cmsSetAdaptationStateTHR(ContextID, d)
cmsSetAdaptationStateTHR = _littlecms.cmsSetAdaptationStateTHR

def cmsGetTransformContextID(hTransform: 'cmsHTRANSFORM') -> "cmsContext":
    return _littlecms.cmsGetTransformContextID(hTransform)
cmsGetTransformContextID = _littlecms.cmsGetTransformContextID

def cmsGetTransformInputFormat(hTransform: 'cmsHTRANSFORM') -> "cmsUInt32Number":
    return _littlecms.cmsGetTransformInputFormat(hTransform)
cmsGetTransformInputFormat = _littlecms.cmsGetTransformInputFormat

def cmsGetTransformOutputFormat(hTransform: 'cmsHTRANSFORM') -> "cmsUInt32Number":
    return _littlecms.cmsGetTransformOutputFormat(hTransform)
cmsGetTransformOutputFormat = _littlecms.cmsGetTransformOutputFormat

def cmsChangeBuffersFormat(hTransform: 'cmsHTRANSFORM', InputFormat: 'cmsUInt32Number', OutputFormat: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsChangeBuffersFormat(hTransform, InputFormat, OutputFormat)
cmsChangeBuffersFormat = _littlecms.cmsChangeBuffersFormat

_littlecms.cmsPS_RESOURCE_CSA_swigconstant(_littlecms)
cmsPS_RESOURCE_CSA = _littlecms.cmsPS_RESOURCE_CSA

_littlecms.cmsPS_RESOURCE_CRD_swigconstant(_littlecms)
cmsPS_RESOURCE_CRD = _littlecms.cmsPS_RESOURCE_CRD

def cmsGetPostScriptColorResource(ContextID: 'cmsContext', Type: 'cmsPSResourceType', hProfile: 'cmsHPROFILE', Intent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number', io: '_cms_io_handler') -> "cmsUInt32Number":
    return _littlecms.cmsGetPostScriptColorResource(ContextID, Type, hProfile, Intent, dwFlags, io)
cmsGetPostScriptColorResource = _littlecms.cmsGetPostScriptColorResource

def cmsGetPostScriptCSA(ContextID: 'cmsContext', hProfile: 'cmsHPROFILE', Intent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number', Buffer: 'void *', dwBufferLen: 'cmsUInt32Number') -> "cmsUInt32Number":
    return _littlecms.cmsGetPostScriptCSA(ContextID, hProfile, Intent, dwFlags, Buffer, dwBufferLen)
cmsGetPostScriptCSA = _littlecms.cmsGetPostScriptCSA

def cmsGetPostScriptCRD(ContextID: 'cmsContext', hProfile: 'cmsHPROFILE', Intent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number', Buffer: 'void *', dwBufferLen: 'cmsUInt32Number') -> "cmsUInt32Number":
    return _littlecms.cmsGetPostScriptCRD(ContextID, hProfile, Intent, dwFlags, Buffer, dwBufferLen)
cmsGetPostScriptCRD = _littlecms.cmsGetPostScriptCRD

def cmsIT8Alloc(ContextID: 'cmsContext') -> "cmsHANDLE":
    return _littlecms.cmsIT8Alloc(ContextID)
cmsIT8Alloc = _littlecms.cmsIT8Alloc

def cmsIT8Free(hIT8: 'cmsHANDLE') -> "void":
    return _littlecms.cmsIT8Free(hIT8)
cmsIT8Free = _littlecms.cmsIT8Free

def cmsIT8TableCount(hIT8: 'cmsHANDLE') -> "cmsUInt32Number":
    return _littlecms.cmsIT8TableCount(hIT8)
cmsIT8TableCount = _littlecms.cmsIT8TableCount

def cmsIT8SetTable(hIT8: 'cmsHANDLE', nTable: 'cmsUInt32Number') -> "cmsInt32Number":
    return _littlecms.cmsIT8SetTable(hIT8, nTable)
cmsIT8SetTable = _littlecms.cmsIT8SetTable

def cmsIT8LoadFromFile(ContextID: 'cmsContext', cFileName: 'char const *') -> "cmsHANDLE":
    return _littlecms.cmsIT8LoadFromFile(ContextID, cFileName)
cmsIT8LoadFromFile = _littlecms.cmsIT8LoadFromFile

def cmsIT8LoadFromMem(ContextID: 'cmsContext', Ptr: 'void *', len: 'cmsUInt32Number') -> "cmsHANDLE":
    return _littlecms.cmsIT8LoadFromMem(ContextID, Ptr, len)
cmsIT8LoadFromMem = _littlecms.cmsIT8LoadFromMem

def cmsIT8SaveToFile(hIT8: 'cmsHANDLE', cFileName: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SaveToFile(hIT8, cFileName)
cmsIT8SaveToFile = _littlecms.cmsIT8SaveToFile

def cmsIT8SaveToMem(hIT8: 'cmsHANDLE', MemPtr: 'void *', BytesNeeded: 'cmsUInt32Number *') -> "cmsBool":
    return _littlecms.cmsIT8SaveToMem(hIT8, MemPtr, BytesNeeded)
cmsIT8SaveToMem = _littlecms.cmsIT8SaveToMem

def cmsIT8GetSheetType(hIT8: 'cmsHANDLE') -> "char const *":
    return _littlecms.cmsIT8GetSheetType(hIT8)
cmsIT8GetSheetType = _littlecms.cmsIT8GetSheetType

def cmsIT8SetSheetType(hIT8: 'cmsHANDLE', Type: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SetSheetType(hIT8, Type)
cmsIT8SetSheetType = _littlecms.cmsIT8SetSheetType

def cmsIT8SetComment(hIT8: 'cmsHANDLE', cComment: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SetComment(hIT8, cComment)
cmsIT8SetComment = _littlecms.cmsIT8SetComment

def cmsIT8SetPropertyStr(hIT8: 'cmsHANDLE', cProp: 'char const *', Str: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SetPropertyStr(hIT8, cProp, Str)
cmsIT8SetPropertyStr = _littlecms.cmsIT8SetPropertyStr

def cmsIT8SetPropertyDbl(hIT8: 'cmsHANDLE', cProp: 'char const *', Val: 'cmsFloat64Number') -> "cmsBool":
    return _littlecms.cmsIT8SetPropertyDbl(hIT8, cProp, Val)
cmsIT8SetPropertyDbl = _littlecms.cmsIT8SetPropertyDbl

def cmsIT8SetPropertyHex(hIT8: 'cmsHANDLE', cProp: 'char const *', Val: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsIT8SetPropertyHex(hIT8, cProp, Val)
cmsIT8SetPropertyHex = _littlecms.cmsIT8SetPropertyHex

def cmsIT8SetPropertyMulti(hIT8: 'cmsHANDLE', Key: 'char const *', SubKey: 'char const *', Buffer: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SetPropertyMulti(hIT8, Key, SubKey, Buffer)
cmsIT8SetPropertyMulti = _littlecms.cmsIT8SetPropertyMulti

def cmsIT8SetPropertyUncooked(hIT8: 'cmsHANDLE', Key: 'char const *', Buffer: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SetPropertyUncooked(hIT8, Key, Buffer)
cmsIT8SetPropertyUncooked = _littlecms.cmsIT8SetPropertyUncooked

def cmsIT8GetProperty(hIT8: 'cmsHANDLE', cProp: 'char const *') -> "char const *":
    return _littlecms.cmsIT8GetProperty(hIT8, cProp)
cmsIT8GetProperty = _littlecms.cmsIT8GetProperty

def cmsIT8GetPropertyDbl(hIT8: 'cmsHANDLE', cProp: 'char const *') -> "cmsFloat64Number":
    return _littlecms.cmsIT8GetPropertyDbl(hIT8, cProp)
cmsIT8GetPropertyDbl = _littlecms.cmsIT8GetPropertyDbl

def cmsIT8GetPropertyMulti(hIT8: 'cmsHANDLE', Key: 'char const *', SubKey: 'char const *') -> "char const *":
    return _littlecms.cmsIT8GetPropertyMulti(hIT8, Key, SubKey)
cmsIT8GetPropertyMulti = _littlecms.cmsIT8GetPropertyMulti

def cmsIT8EnumProperties(hIT8: 'cmsHANDLE', PropertyNames: 'char ***') -> "cmsUInt32Number":
    return _littlecms.cmsIT8EnumProperties(hIT8, PropertyNames)
cmsIT8EnumProperties = _littlecms.cmsIT8EnumProperties

def cmsIT8EnumPropertyMulti(hIT8: 'cmsHANDLE', cProp: 'char const *', SubpropertyNames: 'char const ***') -> "cmsUInt32Number":
    return _littlecms.cmsIT8EnumPropertyMulti(hIT8, cProp, SubpropertyNames)
cmsIT8EnumPropertyMulti = _littlecms.cmsIT8EnumPropertyMulti

def cmsIT8GetDataRowCol(hIT8: 'cmsHANDLE', row: 'int', col: 'int') -> "char const *":
    return _littlecms.cmsIT8GetDataRowCol(hIT8, row, col)
cmsIT8GetDataRowCol = _littlecms.cmsIT8GetDataRowCol

def cmsIT8GetDataRowColDbl(hIT8: 'cmsHANDLE', row: 'int', col: 'int') -> "cmsFloat64Number":
    return _littlecms.cmsIT8GetDataRowColDbl(hIT8, row, col)
cmsIT8GetDataRowColDbl = _littlecms.cmsIT8GetDataRowColDbl

def cmsIT8SetDataRowCol(hIT8: 'cmsHANDLE', row: 'int', col: 'int', Val: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SetDataRowCol(hIT8, row, col, Val)
cmsIT8SetDataRowCol = _littlecms.cmsIT8SetDataRowCol

def cmsIT8SetDataRowColDbl(hIT8: 'cmsHANDLE', row: 'int', col: 'int', Val: 'cmsFloat64Number') -> "cmsBool":
    return _littlecms.cmsIT8SetDataRowColDbl(hIT8, row, col, Val)
cmsIT8SetDataRowColDbl = _littlecms.cmsIT8SetDataRowColDbl

def cmsIT8GetData(hIT8: 'cmsHANDLE', cPatch: 'char const *', cSample: 'char const *') -> "char const *":
    return _littlecms.cmsIT8GetData(hIT8, cPatch, cSample)
cmsIT8GetData = _littlecms.cmsIT8GetData

def cmsIT8GetDataDbl(hIT8: 'cmsHANDLE', cPatch: 'char const *', cSample: 'char const *') -> "cmsFloat64Number":
    return _littlecms.cmsIT8GetDataDbl(hIT8, cPatch, cSample)
cmsIT8GetDataDbl = _littlecms.cmsIT8GetDataDbl

def cmsIT8SetData(hIT8: 'cmsHANDLE', cPatch: 'char const *', cSample: 'char const *', Val: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SetData(hIT8, cPatch, cSample, Val)
cmsIT8SetData = _littlecms.cmsIT8SetData

def cmsIT8SetDataDbl(hIT8: 'cmsHANDLE', cPatch: 'char const *', cSample: 'char const *', Val: 'cmsFloat64Number') -> "cmsBool":
    return _littlecms.cmsIT8SetDataDbl(hIT8, cPatch, cSample, Val)
cmsIT8SetDataDbl = _littlecms.cmsIT8SetDataDbl

def cmsIT8FindDataFormat(hIT8: 'cmsHANDLE', cSample: 'char const *') -> "int":
    return _littlecms.cmsIT8FindDataFormat(hIT8, cSample)
cmsIT8FindDataFormat = _littlecms.cmsIT8FindDataFormat

def cmsIT8SetDataFormat(hIT8: 'cmsHANDLE', n: 'int', Sample: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SetDataFormat(hIT8, n, Sample)
cmsIT8SetDataFormat = _littlecms.cmsIT8SetDataFormat

def cmsIT8EnumDataFormat(hIT8: 'cmsHANDLE', SampleNames: 'char ***') -> "int":
    return _littlecms.cmsIT8EnumDataFormat(hIT8, SampleNames)
cmsIT8EnumDataFormat = _littlecms.cmsIT8EnumDataFormat

def cmsIT8GetPatchName(hIT8: 'cmsHANDLE', nPatch: 'int', buffer: 'char *') -> "char const *":
    return _littlecms.cmsIT8GetPatchName(hIT8, nPatch, buffer)
cmsIT8GetPatchName = _littlecms.cmsIT8GetPatchName

def cmsIT8GetPatchByName(hIT8: 'cmsHANDLE', cPatch: 'char const *') -> "int":
    return _littlecms.cmsIT8GetPatchByName(hIT8, cPatch)
cmsIT8GetPatchByName = _littlecms.cmsIT8GetPatchByName

def cmsIT8SetTableByLabel(hIT8: 'cmsHANDLE', cSet: 'char const *', cField: 'char const *', ExpectedType: 'char const *') -> "int":
    return _littlecms.cmsIT8SetTableByLabel(hIT8, cSet, cField, ExpectedType)
cmsIT8SetTableByLabel = _littlecms.cmsIT8SetTableByLabel

def cmsIT8SetIndexColumn(hIT8: 'cmsHANDLE', cSample: 'char const *') -> "cmsBool":
    return _littlecms.cmsIT8SetIndexColumn(hIT8, cSample)
cmsIT8SetIndexColumn = _littlecms.cmsIT8SetIndexColumn

def cmsIT8DefineDblFormat(hIT8: 'cmsHANDLE', Formatter: 'char const *') -> "void":
    return _littlecms.cmsIT8DefineDblFormat(hIT8, Formatter)
cmsIT8DefineDblFormat = _littlecms.cmsIT8DefineDblFormat

def cmsGBDAlloc(ContextID: 'cmsContext') -> "cmsHANDLE":
    return _littlecms.cmsGBDAlloc(ContextID)
cmsGBDAlloc = _littlecms.cmsGBDAlloc

def cmsGBDFree(hGBD: 'cmsHANDLE') -> "void":
    return _littlecms.cmsGBDFree(hGBD)
cmsGBDFree = _littlecms.cmsGBDFree

def cmsGDBAddPoint(hGBD: 'cmsHANDLE', Lab: 'cmsCIELab') -> "cmsBool":
    return _littlecms.cmsGDBAddPoint(hGBD, Lab)
cmsGDBAddPoint = _littlecms.cmsGDBAddPoint

def cmsGDBCompute(hGDB: 'cmsHANDLE', dwFlags: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsGDBCompute(hGDB, dwFlags)
cmsGDBCompute = _littlecms.cmsGDBCompute

def cmsGDBCheckPoint(hGBD: 'cmsHANDLE', Lab: 'cmsCIELab') -> "cmsBool":
    return _littlecms.cmsGDBCheckPoint(hGBD, Lab)
cmsGDBCheckPoint = _littlecms.cmsGDBCheckPoint

def cmsDetectBlackPoint(BlackPoint: 'cmsCIEXYZ', hProfile: 'cmsHPROFILE', Intent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsDetectBlackPoint(BlackPoint, hProfile, Intent, dwFlags)
cmsDetectBlackPoint = _littlecms.cmsDetectBlackPoint

def cmsDetectDestinationBlackPoint(BlackPoint: 'cmsCIEXYZ', hProfile: 'cmsHPROFILE', Intent: 'cmsUInt32Number', dwFlags: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms.cmsDetectDestinationBlackPoint(BlackPoint, hProfile, Intent, dwFlags)
cmsDetectDestinationBlackPoint = _littlecms.cmsDetectDestinationBlackPoint

def cmsDetectTAC(hProfile: 'cmsHPROFILE') -> "cmsFloat64Number":
    return _littlecms.cmsDetectTAC(hProfile)
cmsDetectTAC = _littlecms.cmsDetectTAC

def cmsDesaturateLab(Lab: 'cmsCIELab', amax: 'double', amin: 'double', bmax: 'double', bmin: 'double') -> "cmsBool":
    return _littlecms.cmsDesaturateLab(Lab, amax, amin, bmax, bmin)
cmsDesaturateLab = _littlecms.cmsDesaturateLab

_littlecms.VX_swigconstant(_littlecms)
VX = _littlecms.VX

_littlecms.VY_swigconstant(_littlecms)
VY = _littlecms.VY

_littlecms.VZ_swigconstant(_littlecms)
VZ = _littlecms.VZ
class cmsVEC3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsVEC3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsVEC3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _littlecms.cmsVEC3_n_set
    __swig_getmethods__["n"] = _littlecms.cmsVEC3_n_get
    if _newclass:
        n = _swig_property(_littlecms.cmsVEC3_n_get, _littlecms.cmsVEC3_n_set)

    def __init__(self):
        this = _littlecms.new_cmsVEC3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsVEC3
    __del__ = lambda self: None
cmsVEC3_swigregister = _littlecms.cmsVEC3_swigregister
cmsVEC3_swigregister(cmsVEC3)

class cmsMAT3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsMAT3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsMAT3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["v"] = _littlecms.cmsMAT3_v_set
    __swig_getmethods__["v"] = _littlecms.cmsMAT3_v_get
    if _newclass:
        v = _swig_property(_littlecms.cmsMAT3_v_get, _littlecms.cmsMAT3_v_set)

    def __init__(self):
        this = _littlecms.new_cmsMAT3()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsMAT3
    __del__ = lambda self: None
cmsMAT3_swigregister = _littlecms.cmsMAT3_swigregister
cmsMAT3_swigregister(cmsMAT3)


def _cmsVEC3init(r: 'cmsVEC3', x: 'cmsFloat64Number', y: 'cmsFloat64Number', z: 'cmsFloat64Number') -> "void":
    return _littlecms._cmsVEC3init(r, x, y, z)
_cmsVEC3init = _littlecms._cmsVEC3init

def _cmsVEC3minus(r: 'cmsVEC3', a: 'cmsVEC3', b: 'cmsVEC3') -> "void":
    return _littlecms._cmsVEC3minus(r, a, b)
_cmsVEC3minus = _littlecms._cmsVEC3minus

def _cmsVEC3cross(r: 'cmsVEC3', u: 'cmsVEC3', v: 'cmsVEC3') -> "void":
    return _littlecms._cmsVEC3cross(r, u, v)
_cmsVEC3cross = _littlecms._cmsVEC3cross

def _cmsVEC3dot(u: 'cmsVEC3', v: 'cmsVEC3') -> "cmsFloat64Number":
    return _littlecms._cmsVEC3dot(u, v)
_cmsVEC3dot = _littlecms._cmsVEC3dot

def _cmsVEC3length(a: 'cmsVEC3') -> "cmsFloat64Number":
    return _littlecms._cmsVEC3length(a)
_cmsVEC3length = _littlecms._cmsVEC3length

def _cmsVEC3distance(a: 'cmsVEC3', b: 'cmsVEC3') -> "cmsFloat64Number":
    return _littlecms._cmsVEC3distance(a, b)
_cmsVEC3distance = _littlecms._cmsVEC3distance

def _cmsMAT3identity(a: 'cmsMAT3') -> "void":
    return _littlecms._cmsMAT3identity(a)
_cmsMAT3identity = _littlecms._cmsMAT3identity

def _cmsMAT3isIdentity(a: 'cmsMAT3') -> "cmsBool":
    return _littlecms._cmsMAT3isIdentity(a)
_cmsMAT3isIdentity = _littlecms._cmsMAT3isIdentity

def _cmsMAT3per(r: 'cmsMAT3', a: 'cmsMAT3', b: 'cmsMAT3') -> "void":
    return _littlecms._cmsMAT3per(r, a, b)
_cmsMAT3per = _littlecms._cmsMAT3per

def _cmsMAT3inverse(a: 'cmsMAT3', b: 'cmsMAT3') -> "cmsBool":
    return _littlecms._cmsMAT3inverse(a, b)
_cmsMAT3inverse = _littlecms._cmsMAT3inverse

def _cmsMAT3solve(x: 'cmsVEC3', a: 'cmsMAT3', b: 'cmsVEC3') -> "cmsBool":
    return _littlecms._cmsMAT3solve(x, a, b)
_cmsMAT3solve = _littlecms._cmsMAT3solve

def _cmsMAT3eval(r: 'cmsVEC3', a: 'cmsMAT3', v: 'cmsVEC3') -> "void":
    return _littlecms._cmsMAT3eval(r, a, v)
_cmsMAT3eval = _littlecms._cmsMAT3eval

def cmsSignalError(ContextID: 'cmsContext', ErrorCode: 'cmsUInt32Number', ErrorText: 'char const *') -> "void":
    return _littlecms.cmsSignalError(ContextID, ErrorCode, ErrorText)
cmsSignalError = _littlecms.cmsSignalError

def _cmsMalloc(ContextID: 'cmsContext', size: 'cmsUInt32Number') -> "void *":
    return _littlecms._cmsMalloc(ContextID, size)
_cmsMalloc = _littlecms._cmsMalloc

def _cmsMallocZero(ContextID: 'cmsContext', size: 'cmsUInt32Number') -> "void *":
    return _littlecms._cmsMallocZero(ContextID, size)
_cmsMallocZero = _littlecms._cmsMallocZero

def _cmsCalloc(ContextID: 'cmsContext', num: 'cmsUInt32Number', size: 'cmsUInt32Number') -> "void *":
    return _littlecms._cmsCalloc(ContextID, num, size)
_cmsCalloc = _littlecms._cmsCalloc

def _cmsRealloc(ContextID: 'cmsContext', Ptr: 'void *', NewSize: 'cmsUInt32Number') -> "void *":
    return _littlecms._cmsRealloc(ContextID, Ptr, NewSize)
_cmsRealloc = _littlecms._cmsRealloc

def _cmsFree(ContextID: 'cmsContext', Ptr: 'void *') -> "void":
    return _littlecms._cmsFree(ContextID, Ptr)
_cmsFree = _littlecms._cmsFree

def _cmsDupMem(ContextID: 'cmsContext', Org: 'void const *', size: 'cmsUInt32Number') -> "void *":
    return _littlecms._cmsDupMem(ContextID, Org, size)
_cmsDupMem = _littlecms._cmsDupMem
class _cms_io_handler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cms_io_handler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cms_io_handler, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stream"] = _littlecms._cms_io_handler_stream_set
    __swig_getmethods__["stream"] = _littlecms._cms_io_handler_stream_get
    if _newclass:
        stream = _swig_property(_littlecms._cms_io_handler_stream_get, _littlecms._cms_io_handler_stream_set)
    __swig_setmethods__["ContextID"] = _littlecms._cms_io_handler_ContextID_set
    __swig_getmethods__["ContextID"] = _littlecms._cms_io_handler_ContextID_get
    if _newclass:
        ContextID = _swig_property(_littlecms._cms_io_handler_ContextID_get, _littlecms._cms_io_handler_ContextID_set)
    __swig_setmethods__["UsedSpace"] = _littlecms._cms_io_handler_UsedSpace_set
    __swig_getmethods__["UsedSpace"] = _littlecms._cms_io_handler_UsedSpace_get
    if _newclass:
        UsedSpace = _swig_property(_littlecms._cms_io_handler_UsedSpace_get, _littlecms._cms_io_handler_UsedSpace_set)
    __swig_setmethods__["ReportedSize"] = _littlecms._cms_io_handler_ReportedSize_set
    __swig_getmethods__["ReportedSize"] = _littlecms._cms_io_handler_ReportedSize_get
    if _newclass:
        ReportedSize = _swig_property(_littlecms._cms_io_handler_ReportedSize_get, _littlecms._cms_io_handler_ReportedSize_set)
    __swig_setmethods__["PhysicalFile"] = _littlecms._cms_io_handler_PhysicalFile_set
    __swig_getmethods__["PhysicalFile"] = _littlecms._cms_io_handler_PhysicalFile_get
    if _newclass:
        PhysicalFile = _swig_property(_littlecms._cms_io_handler_PhysicalFile_get, _littlecms._cms_io_handler_PhysicalFile_set)
    __swig_setmethods__["Read"] = _littlecms._cms_io_handler_Read_set
    __swig_getmethods__["Read"] = _littlecms._cms_io_handler_Read_get
    if _newclass:
        Read = _swig_property(_littlecms._cms_io_handler_Read_get, _littlecms._cms_io_handler_Read_set)
    __swig_setmethods__["Seek"] = _littlecms._cms_io_handler_Seek_set
    __swig_getmethods__["Seek"] = _littlecms._cms_io_handler_Seek_get
    if _newclass:
        Seek = _swig_property(_littlecms._cms_io_handler_Seek_get, _littlecms._cms_io_handler_Seek_set)
    __swig_setmethods__["Close"] = _littlecms._cms_io_handler_Close_set
    __swig_getmethods__["Close"] = _littlecms._cms_io_handler_Close_get
    if _newclass:
        Close = _swig_property(_littlecms._cms_io_handler_Close_get, _littlecms._cms_io_handler_Close_set)
    __swig_setmethods__["Tell"] = _littlecms._cms_io_handler_Tell_set
    __swig_getmethods__["Tell"] = _littlecms._cms_io_handler_Tell_get
    if _newclass:
        Tell = _swig_property(_littlecms._cms_io_handler_Tell_get, _littlecms._cms_io_handler_Tell_set)
    __swig_setmethods__["Write"] = _littlecms._cms_io_handler_Write_set
    __swig_getmethods__["Write"] = _littlecms._cms_io_handler_Write_get
    if _newclass:
        Write = _swig_property(_littlecms._cms_io_handler_Write_get, _littlecms._cms_io_handler_Write_set)

    def __init__(self):
        this = _littlecms.new__cms_io_handler()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete__cms_io_handler
    __del__ = lambda self: None
_cms_io_handler_swigregister = _littlecms._cms_io_handler_swigregister
_cms_io_handler_swigregister(_cms_io_handler)


def _cmsAdjustEndianess16(Word: 'cmsUInt16Number') -> "cmsUInt16Number":
    return _littlecms._cmsAdjustEndianess16(Word)
_cmsAdjustEndianess16 = _littlecms._cmsAdjustEndianess16

def _cmsAdjustEndianess32(Value: 'cmsUInt32Number') -> "cmsUInt32Number":
    return _littlecms._cmsAdjustEndianess32(Value)
_cmsAdjustEndianess32 = _littlecms._cmsAdjustEndianess32

def _cmsAdjustEndianess64(Result: 'cmsUInt64Number *', QWord: 'cmsUInt64Number *') -> "void":
    return _littlecms._cmsAdjustEndianess64(Result, QWord)
_cmsAdjustEndianess64 = _littlecms._cmsAdjustEndianess64

def _cmsReadUInt8Number(io: '_cms_io_handler', n: 'cmsUInt8Number *') -> "cmsBool":
    return _littlecms._cmsReadUInt8Number(io, n)
_cmsReadUInt8Number = _littlecms._cmsReadUInt8Number

def _cmsReadUInt16Number(io: '_cms_io_handler', n: 'cmsUInt16Number *') -> "cmsBool":
    return _littlecms._cmsReadUInt16Number(io, n)
_cmsReadUInt16Number = _littlecms._cmsReadUInt16Number

def _cmsReadUInt32Number(io: '_cms_io_handler', n: 'cmsUInt32Number *') -> "cmsBool":
    return _littlecms._cmsReadUInt32Number(io, n)
_cmsReadUInt32Number = _littlecms._cmsReadUInt32Number

def _cmsReadFloat32Number(io: '_cms_io_handler', n: 'cmsFloat32Number *') -> "cmsBool":
    return _littlecms._cmsReadFloat32Number(io, n)
_cmsReadFloat32Number = _littlecms._cmsReadFloat32Number

def _cmsReadUInt64Number(io: '_cms_io_handler', n: 'cmsUInt64Number *') -> "cmsBool":
    return _littlecms._cmsReadUInt64Number(io, n)
_cmsReadUInt64Number = _littlecms._cmsReadUInt64Number

def _cmsRead15Fixed16Number(io: '_cms_io_handler', n: 'cmsFloat64Number *') -> "cmsBool":
    return _littlecms._cmsRead15Fixed16Number(io, n)
_cmsRead15Fixed16Number = _littlecms._cmsRead15Fixed16Number

def _cmsReadXYZNumber(io: '_cms_io_handler', XYZ: 'cmsCIEXYZ') -> "cmsBool":
    return _littlecms._cmsReadXYZNumber(io, XYZ)
_cmsReadXYZNumber = _littlecms._cmsReadXYZNumber

def _cmsReadUInt16Array(io: '_cms_io_handler', n: 'cmsUInt32Number', Array: 'cmsUInt16Number *') -> "cmsBool":
    return _littlecms._cmsReadUInt16Array(io, n, Array)
_cmsReadUInt16Array = _littlecms._cmsReadUInt16Array

def _cmsWriteUInt8Number(io: '_cms_io_handler', n: 'cmsUInt8Number') -> "cmsBool":
    return _littlecms._cmsWriteUInt8Number(io, n)
_cmsWriteUInt8Number = _littlecms._cmsWriteUInt8Number

def _cmsWriteUInt16Number(io: '_cms_io_handler', n: 'cmsUInt16Number') -> "cmsBool":
    return _littlecms._cmsWriteUInt16Number(io, n)
_cmsWriteUInt16Number = _littlecms._cmsWriteUInt16Number

def _cmsWriteUInt32Number(io: '_cms_io_handler', n: 'cmsUInt32Number') -> "cmsBool":
    return _littlecms._cmsWriteUInt32Number(io, n)
_cmsWriteUInt32Number = _littlecms._cmsWriteUInt32Number

def _cmsWriteFloat32Number(io: '_cms_io_handler', n: 'cmsFloat32Number') -> "cmsBool":
    return _littlecms._cmsWriteFloat32Number(io, n)
_cmsWriteFloat32Number = _littlecms._cmsWriteFloat32Number

def _cmsWriteUInt64Number(io: '_cms_io_handler', n: 'cmsUInt64Number *') -> "cmsBool":
    return _littlecms._cmsWriteUInt64Number(io, n)
_cmsWriteUInt64Number = _littlecms._cmsWriteUInt64Number

def _cmsWrite15Fixed16Number(io: '_cms_io_handler', n: 'cmsFloat64Number') -> "cmsBool":
    return _littlecms._cmsWrite15Fixed16Number(io, n)
_cmsWrite15Fixed16Number = _littlecms._cmsWrite15Fixed16Number

def _cmsWriteXYZNumber(io: '_cms_io_handler', XYZ: 'cmsCIEXYZ') -> "cmsBool":
    return _littlecms._cmsWriteXYZNumber(io, XYZ)
_cmsWriteXYZNumber = _littlecms._cmsWriteXYZNumber

def _cmsWriteUInt16Array(io: '_cms_io_handler', n: 'cmsUInt32Number', Array: 'cmsUInt16Number const *') -> "cmsBool":
    return _littlecms._cmsWriteUInt16Array(io, n, Array)
_cmsWriteUInt16Array = _littlecms._cmsWriteUInt16Array
class _cmsTagBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmsTagBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmsTagBase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sig"] = _littlecms._cmsTagBase_sig_set
    __swig_getmethods__["sig"] = _littlecms._cmsTagBase_sig_get
    if _newclass:
        sig = _swig_property(_littlecms._cmsTagBase_sig_get, _littlecms._cmsTagBase_sig_set)
    __swig_setmethods__["reserved"] = _littlecms._cmsTagBase_reserved_set
    __swig_getmethods__["reserved"] = _littlecms._cmsTagBase_reserved_get
    if _newclass:
        reserved = _swig_property(_littlecms._cmsTagBase_reserved_get, _littlecms._cmsTagBase_reserved_set)

    def __init__(self):
        this = _littlecms.new__cmsTagBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete__cmsTagBase
    __del__ = lambda self: None
_cmsTagBase_swigregister = _littlecms._cmsTagBase_swigregister
_cmsTagBase_swigregister(_cmsTagBase)


def _cmsReadTypeBase(io: '_cms_io_handler') -> "cmsTagTypeSignature":
    return _littlecms._cmsReadTypeBase(io)
_cmsReadTypeBase = _littlecms._cmsReadTypeBase

def _cmsWriteTypeBase(io: '_cms_io_handler', sig: 'cmsTagTypeSignature') -> "cmsBool":
    return _littlecms._cmsWriteTypeBase(io, sig)
_cmsWriteTypeBase = _littlecms._cmsWriteTypeBase

def _cmsReadAlignment(io: '_cms_io_handler') -> "cmsBool":
    return _littlecms._cmsReadAlignment(io)
_cmsReadAlignment = _littlecms._cmsReadAlignment

def _cmsWriteAlignment(io: '_cms_io_handler') -> "cmsBool":
    return _littlecms._cmsWriteAlignment(io)
_cmsWriteAlignment = _littlecms._cmsWriteAlignment

def _cmsIOPrintf(io: '_cms_io_handler', frm: 'char const *') -> "cmsBool":
    return _littlecms._cmsIOPrintf(io, frm)
_cmsIOPrintf = _littlecms._cmsIOPrintf

def _cms8Fixed8toDouble(fixed8: 'cmsUInt16Number') -> "cmsFloat64Number":
    return _littlecms._cms8Fixed8toDouble(fixed8)
_cms8Fixed8toDouble = _littlecms._cms8Fixed8toDouble

def _cmsDoubleTo8Fixed8(val: 'cmsFloat64Number') -> "cmsUInt16Number":
    return _littlecms._cmsDoubleTo8Fixed8(val)
_cmsDoubleTo8Fixed8 = _littlecms._cmsDoubleTo8Fixed8

def _cms15Fixed16toDouble(fix32: 'cmsS15Fixed16Number') -> "cmsFloat64Number":
    return _littlecms._cms15Fixed16toDouble(fix32)
_cms15Fixed16toDouble = _littlecms._cms15Fixed16toDouble

def _cmsDoubleTo15Fixed16(v: 'cmsFloat64Number') -> "cmsS15Fixed16Number":
    return _littlecms._cmsDoubleTo15Fixed16(v)
_cmsDoubleTo15Fixed16 = _littlecms._cmsDoubleTo15Fixed16

def _cmsEncodeDateTimeNumber(Dest: 'cmsDateTimeNumber', Source: 'struct tm const *') -> "void":
    return _littlecms._cmsEncodeDateTimeNumber(Dest, Source)
_cmsEncodeDateTimeNumber = _littlecms._cmsEncodeDateTimeNumber

def _cmsDecodeDateTimeNumber(Source: 'cmsDateTimeNumber', Dest: 'struct tm *') -> "void":
    return _littlecms._cmsDecodeDateTimeNumber(Source, Dest)
_cmsDecodeDateTimeNumber = _littlecms._cmsDecodeDateTimeNumber

_littlecms.cmsPluginMagicNumber_swigconstant(_littlecms)
cmsPluginMagicNumber = _littlecms.cmsPluginMagicNumber

_littlecms.cmsPluginMemHandlerSig_swigconstant(_littlecms)
cmsPluginMemHandlerSig = _littlecms.cmsPluginMemHandlerSig

_littlecms.cmsPluginInterpolationSig_swigconstant(_littlecms)
cmsPluginInterpolationSig = _littlecms.cmsPluginInterpolationSig

_littlecms.cmsPluginParametricCurveSig_swigconstant(_littlecms)
cmsPluginParametricCurveSig = _littlecms.cmsPluginParametricCurveSig

_littlecms.cmsPluginFormattersSig_swigconstant(_littlecms)
cmsPluginFormattersSig = _littlecms.cmsPluginFormattersSig

_littlecms.cmsPluginTagTypeSig_swigconstant(_littlecms)
cmsPluginTagTypeSig = _littlecms.cmsPluginTagTypeSig

_littlecms.cmsPluginTagSig_swigconstant(_littlecms)
cmsPluginTagSig = _littlecms.cmsPluginTagSig

_littlecms.cmsPluginRenderingIntentSig_swigconstant(_littlecms)
cmsPluginRenderingIntentSig = _littlecms.cmsPluginRenderingIntentSig

_littlecms.cmsPluginMultiProcessElementSig_swigconstant(_littlecms)
cmsPluginMultiProcessElementSig = _littlecms.cmsPluginMultiProcessElementSig

_littlecms.cmsPluginOptimizationSig_swigconstant(_littlecms)
cmsPluginOptimizationSig = _littlecms.cmsPluginOptimizationSig

_littlecms.cmsPluginTransformSig_swigconstant(_littlecms)
cmsPluginTransformSig = _littlecms.cmsPluginTransformSig

_littlecms.cmsPluginMutexSig_swigconstant(_littlecms)
cmsPluginMutexSig = _littlecms.cmsPluginMutexSig
class cmsPluginBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginBase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Magic"] = _littlecms.cmsPluginBase_Magic_set
    __swig_getmethods__["Magic"] = _littlecms.cmsPluginBase_Magic_get
    if _newclass:
        Magic = _swig_property(_littlecms.cmsPluginBase_Magic_get, _littlecms.cmsPluginBase_Magic_set)
    __swig_setmethods__["ExpectedVersion"] = _littlecms.cmsPluginBase_ExpectedVersion_set
    __swig_getmethods__["ExpectedVersion"] = _littlecms.cmsPluginBase_ExpectedVersion_get
    if _newclass:
        ExpectedVersion = _swig_property(_littlecms.cmsPluginBase_ExpectedVersion_get, _littlecms.cmsPluginBase_ExpectedVersion_set)
    __swig_setmethods__["Type"] = _littlecms.cmsPluginBase_Type_set
    __swig_getmethods__["Type"] = _littlecms.cmsPluginBase_Type_get
    if _newclass:
        Type = _swig_property(_littlecms.cmsPluginBase_Type_get, _littlecms.cmsPluginBase_Type_set)
    __swig_setmethods__["Next"] = _littlecms.cmsPluginBase_Next_set
    __swig_getmethods__["Next"] = _littlecms.cmsPluginBase_Next_get
    if _newclass:
        Next = _swig_property(_littlecms.cmsPluginBase_Next_get, _littlecms.cmsPluginBase_Next_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginBase()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginBase
    __del__ = lambda self: None
cmsPluginBase_swigregister = _littlecms.cmsPluginBase_swigregister
cmsPluginBase_swigregister(cmsPluginBase)


_littlecms.MAX_TYPES_IN_LCMS_PLUGIN_swigconstant(_littlecms)
MAX_TYPES_IN_LCMS_PLUGIN = _littlecms.MAX_TYPES_IN_LCMS_PLUGIN
class cmsPluginMemHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginMemHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginMemHandler, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginMemHandler_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginMemHandler_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginMemHandler_base_get, _littlecms.cmsPluginMemHandler_base_set)
    __swig_setmethods__["MallocPtr"] = _littlecms.cmsPluginMemHandler_MallocPtr_set
    __swig_getmethods__["MallocPtr"] = _littlecms.cmsPluginMemHandler_MallocPtr_get
    if _newclass:
        MallocPtr = _swig_property(_littlecms.cmsPluginMemHandler_MallocPtr_get, _littlecms.cmsPluginMemHandler_MallocPtr_set)
    __swig_setmethods__["FreePtr"] = _littlecms.cmsPluginMemHandler_FreePtr_set
    __swig_getmethods__["FreePtr"] = _littlecms.cmsPluginMemHandler_FreePtr_get
    if _newclass:
        FreePtr = _swig_property(_littlecms.cmsPluginMemHandler_FreePtr_get, _littlecms.cmsPluginMemHandler_FreePtr_set)
    __swig_setmethods__["ReallocPtr"] = _littlecms.cmsPluginMemHandler_ReallocPtr_set
    __swig_getmethods__["ReallocPtr"] = _littlecms.cmsPluginMemHandler_ReallocPtr_get
    if _newclass:
        ReallocPtr = _swig_property(_littlecms.cmsPluginMemHandler_ReallocPtr_get, _littlecms.cmsPluginMemHandler_ReallocPtr_set)
    __swig_setmethods__["MallocZeroPtr"] = _littlecms.cmsPluginMemHandler_MallocZeroPtr_set
    __swig_getmethods__["MallocZeroPtr"] = _littlecms.cmsPluginMemHandler_MallocZeroPtr_get
    if _newclass:
        MallocZeroPtr = _swig_property(_littlecms.cmsPluginMemHandler_MallocZeroPtr_get, _littlecms.cmsPluginMemHandler_MallocZeroPtr_set)
    __swig_setmethods__["CallocPtr"] = _littlecms.cmsPluginMemHandler_CallocPtr_set
    __swig_getmethods__["CallocPtr"] = _littlecms.cmsPluginMemHandler_CallocPtr_get
    if _newclass:
        CallocPtr = _swig_property(_littlecms.cmsPluginMemHandler_CallocPtr_get, _littlecms.cmsPluginMemHandler_CallocPtr_set)
    __swig_setmethods__["DupPtr"] = _littlecms.cmsPluginMemHandler_DupPtr_set
    __swig_getmethods__["DupPtr"] = _littlecms.cmsPluginMemHandler_DupPtr_get
    if _newclass:
        DupPtr = _swig_property(_littlecms.cmsPluginMemHandler_DupPtr_get, _littlecms.cmsPluginMemHandler_DupPtr_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginMemHandler()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginMemHandler
    __del__ = lambda self: None
cmsPluginMemHandler_swigregister = _littlecms.cmsPluginMemHandler_swigregister
cmsPluginMemHandler_swigregister(cmsPluginMemHandler)

class cmsInterpFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsInterpFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsInterpFunction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Lerp16"] = _littlecms.cmsInterpFunction_Lerp16_set
    __swig_getmethods__["Lerp16"] = _littlecms.cmsInterpFunction_Lerp16_get
    if _newclass:
        Lerp16 = _swig_property(_littlecms.cmsInterpFunction_Lerp16_get, _littlecms.cmsInterpFunction_Lerp16_set)
    __swig_setmethods__["LerpFloat"] = _littlecms.cmsInterpFunction_LerpFloat_set
    __swig_getmethods__["LerpFloat"] = _littlecms.cmsInterpFunction_LerpFloat_get
    if _newclass:
        LerpFloat = _swig_property(_littlecms.cmsInterpFunction_LerpFloat_get, _littlecms.cmsInterpFunction_LerpFloat_set)

    def __init__(self):
        this = _littlecms.new_cmsInterpFunction()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsInterpFunction
    __del__ = lambda self: None
cmsInterpFunction_swigregister = _littlecms.cmsInterpFunction_swigregister
cmsInterpFunction_swigregister(cmsInterpFunction)


_littlecms.CMS_LERP_FLAGS_16BITS_swigconstant(_littlecms)
CMS_LERP_FLAGS_16BITS = _littlecms.CMS_LERP_FLAGS_16BITS

_littlecms.CMS_LERP_FLAGS_FLOAT_swigconstant(_littlecms)
CMS_LERP_FLAGS_FLOAT = _littlecms.CMS_LERP_FLAGS_FLOAT

_littlecms.CMS_LERP_FLAGS_TRILINEAR_swigconstant(_littlecms)
CMS_LERP_FLAGS_TRILINEAR = _littlecms.CMS_LERP_FLAGS_TRILINEAR

_littlecms.MAX_INPUT_DIMENSIONS_swigconstant(_littlecms)
MAX_INPUT_DIMENSIONS = _littlecms.MAX_INPUT_DIMENSIONS
class cmsInterpParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsInterpParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsInterpParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ContextID"] = _littlecms.cmsInterpParams_ContextID_set
    __swig_getmethods__["ContextID"] = _littlecms.cmsInterpParams_ContextID_get
    if _newclass:
        ContextID = _swig_property(_littlecms.cmsInterpParams_ContextID_get, _littlecms.cmsInterpParams_ContextID_set)
    __swig_setmethods__["dwFlags"] = _littlecms.cmsInterpParams_dwFlags_set
    __swig_getmethods__["dwFlags"] = _littlecms.cmsInterpParams_dwFlags_get
    if _newclass:
        dwFlags = _swig_property(_littlecms.cmsInterpParams_dwFlags_get, _littlecms.cmsInterpParams_dwFlags_set)
    __swig_setmethods__["nInputs"] = _littlecms.cmsInterpParams_nInputs_set
    __swig_getmethods__["nInputs"] = _littlecms.cmsInterpParams_nInputs_get
    if _newclass:
        nInputs = _swig_property(_littlecms.cmsInterpParams_nInputs_get, _littlecms.cmsInterpParams_nInputs_set)
    __swig_setmethods__["nOutputs"] = _littlecms.cmsInterpParams_nOutputs_set
    __swig_getmethods__["nOutputs"] = _littlecms.cmsInterpParams_nOutputs_get
    if _newclass:
        nOutputs = _swig_property(_littlecms.cmsInterpParams_nOutputs_get, _littlecms.cmsInterpParams_nOutputs_set)
    __swig_setmethods__["nSamples"] = _littlecms.cmsInterpParams_nSamples_set
    __swig_getmethods__["nSamples"] = _littlecms.cmsInterpParams_nSamples_get
    if _newclass:
        nSamples = _swig_property(_littlecms.cmsInterpParams_nSamples_get, _littlecms.cmsInterpParams_nSamples_set)
    __swig_setmethods__["Domain"] = _littlecms.cmsInterpParams_Domain_set
    __swig_getmethods__["Domain"] = _littlecms.cmsInterpParams_Domain_get
    if _newclass:
        Domain = _swig_property(_littlecms.cmsInterpParams_Domain_get, _littlecms.cmsInterpParams_Domain_set)
    __swig_setmethods__["opta"] = _littlecms.cmsInterpParams_opta_set
    __swig_getmethods__["opta"] = _littlecms.cmsInterpParams_opta_get
    if _newclass:
        opta = _swig_property(_littlecms.cmsInterpParams_opta_get, _littlecms.cmsInterpParams_opta_set)
    __swig_setmethods__["Table"] = _littlecms.cmsInterpParams_Table_set
    __swig_getmethods__["Table"] = _littlecms.cmsInterpParams_Table_get
    if _newclass:
        Table = _swig_property(_littlecms.cmsInterpParams_Table_get, _littlecms.cmsInterpParams_Table_set)
    __swig_setmethods__["Interpolation"] = _littlecms.cmsInterpParams_Interpolation_set
    __swig_getmethods__["Interpolation"] = _littlecms.cmsInterpParams_Interpolation_get
    if _newclass:
        Interpolation = _swig_property(_littlecms.cmsInterpParams_Interpolation_get, _littlecms.cmsInterpParams_Interpolation_set)

    def __init__(self):
        this = _littlecms.new_cmsInterpParams()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsInterpParams
    __del__ = lambda self: None
cmsInterpParams_swigregister = _littlecms.cmsInterpParams_swigregister
cmsInterpParams_swigregister(cmsInterpParams)

class cmsPluginInterpolation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginInterpolation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginInterpolation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginInterpolation_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginInterpolation_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginInterpolation_base_get, _littlecms.cmsPluginInterpolation_base_set)
    __swig_setmethods__["InterpolatorsFactory"] = _littlecms.cmsPluginInterpolation_InterpolatorsFactory_set
    __swig_getmethods__["InterpolatorsFactory"] = _littlecms.cmsPluginInterpolation_InterpolatorsFactory_get
    if _newclass:
        InterpolatorsFactory = _swig_property(_littlecms.cmsPluginInterpolation_InterpolatorsFactory_get, _littlecms.cmsPluginInterpolation_InterpolatorsFactory_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginInterpolation()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginInterpolation
    __del__ = lambda self: None
cmsPluginInterpolation_swigregister = _littlecms.cmsPluginInterpolation_swigregister
cmsPluginInterpolation_swigregister(cmsPluginInterpolation)

class cmsPluginParametricCurves(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginParametricCurves, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginParametricCurves, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginParametricCurves_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginParametricCurves_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginParametricCurves_base_get, _littlecms.cmsPluginParametricCurves_base_set)
    __swig_setmethods__["nFunctions"] = _littlecms.cmsPluginParametricCurves_nFunctions_set
    __swig_getmethods__["nFunctions"] = _littlecms.cmsPluginParametricCurves_nFunctions_get
    if _newclass:
        nFunctions = _swig_property(_littlecms.cmsPluginParametricCurves_nFunctions_get, _littlecms.cmsPluginParametricCurves_nFunctions_set)
    __swig_setmethods__["FunctionTypes"] = _littlecms.cmsPluginParametricCurves_FunctionTypes_set
    __swig_getmethods__["FunctionTypes"] = _littlecms.cmsPluginParametricCurves_FunctionTypes_get
    if _newclass:
        FunctionTypes = _swig_property(_littlecms.cmsPluginParametricCurves_FunctionTypes_get, _littlecms.cmsPluginParametricCurves_FunctionTypes_set)
    __swig_setmethods__["ParameterCount"] = _littlecms.cmsPluginParametricCurves_ParameterCount_set
    __swig_getmethods__["ParameterCount"] = _littlecms.cmsPluginParametricCurves_ParameterCount_get
    if _newclass:
        ParameterCount = _swig_property(_littlecms.cmsPluginParametricCurves_ParameterCount_get, _littlecms.cmsPluginParametricCurves_ParameterCount_set)
    __swig_setmethods__["Evaluator"] = _littlecms.cmsPluginParametricCurves_Evaluator_set
    __swig_getmethods__["Evaluator"] = _littlecms.cmsPluginParametricCurves_Evaluator_get
    if _newclass:
        Evaluator = _swig_property(_littlecms.cmsPluginParametricCurves_Evaluator_get, _littlecms.cmsPluginParametricCurves_Evaluator_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginParametricCurves()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginParametricCurves
    __del__ = lambda self: None
cmsPluginParametricCurves_swigregister = _littlecms.cmsPluginParametricCurves_swigregister
cmsPluginParametricCurves_swigregister(cmsPluginParametricCurves)

class cmsFormatter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsFormatter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsFormatter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Fmt16"] = _littlecms.cmsFormatter_Fmt16_set
    __swig_getmethods__["Fmt16"] = _littlecms.cmsFormatter_Fmt16_get
    if _newclass:
        Fmt16 = _swig_property(_littlecms.cmsFormatter_Fmt16_get, _littlecms.cmsFormatter_Fmt16_set)
    __swig_setmethods__["FmtFloat"] = _littlecms.cmsFormatter_FmtFloat_set
    __swig_getmethods__["FmtFloat"] = _littlecms.cmsFormatter_FmtFloat_get
    if _newclass:
        FmtFloat = _swig_property(_littlecms.cmsFormatter_FmtFloat_get, _littlecms.cmsFormatter_FmtFloat_set)

    def __init__(self):
        this = _littlecms.new_cmsFormatter()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsFormatter
    __del__ = lambda self: None
cmsFormatter_swigregister = _littlecms.cmsFormatter_swigregister
cmsFormatter_swigregister(cmsFormatter)


_littlecms.CMS_PACK_FLAGS_16BITS_swigconstant(_littlecms)
CMS_PACK_FLAGS_16BITS = _littlecms.CMS_PACK_FLAGS_16BITS

_littlecms.CMS_PACK_FLAGS_FLOAT_swigconstant(_littlecms)
CMS_PACK_FLAGS_FLOAT = _littlecms.CMS_PACK_FLAGS_FLOAT

_littlecms.cmsFormatterInput_swigconstant(_littlecms)
cmsFormatterInput = _littlecms.cmsFormatterInput

_littlecms.cmsFormatterOutput_swigconstant(_littlecms)
cmsFormatterOutput = _littlecms.cmsFormatterOutput
class cmsPluginFormatters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginFormatters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginFormatters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginFormatters_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginFormatters_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginFormatters_base_get, _littlecms.cmsPluginFormatters_base_set)
    __swig_setmethods__["FormattersFactory"] = _littlecms.cmsPluginFormatters_FormattersFactory_set
    __swig_getmethods__["FormattersFactory"] = _littlecms.cmsPluginFormatters_FormattersFactory_get
    if _newclass:
        FormattersFactory = _swig_property(_littlecms.cmsPluginFormatters_FormattersFactory_get, _littlecms.cmsPluginFormatters_FormattersFactory_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginFormatters()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginFormatters
    __del__ = lambda self: None
cmsPluginFormatters_swigregister = _littlecms.cmsPluginFormatters_swigregister
cmsPluginFormatters_swigregister(cmsPluginFormatters)

class cmsTagTypeHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsTagTypeHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsTagTypeHandler, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Signature"] = _littlecms.cmsTagTypeHandler_Signature_set
    __swig_getmethods__["Signature"] = _littlecms.cmsTagTypeHandler_Signature_get
    if _newclass:
        Signature = _swig_property(_littlecms.cmsTagTypeHandler_Signature_get, _littlecms.cmsTagTypeHandler_Signature_set)
    __swig_setmethods__["ReadPtr"] = _littlecms.cmsTagTypeHandler_ReadPtr_set
    __swig_getmethods__["ReadPtr"] = _littlecms.cmsTagTypeHandler_ReadPtr_get
    if _newclass:
        ReadPtr = _swig_property(_littlecms.cmsTagTypeHandler_ReadPtr_get, _littlecms.cmsTagTypeHandler_ReadPtr_set)
    __swig_setmethods__["WritePtr"] = _littlecms.cmsTagTypeHandler_WritePtr_set
    __swig_getmethods__["WritePtr"] = _littlecms.cmsTagTypeHandler_WritePtr_get
    if _newclass:
        WritePtr = _swig_property(_littlecms.cmsTagTypeHandler_WritePtr_get, _littlecms.cmsTagTypeHandler_WritePtr_set)
    __swig_setmethods__["DupPtr"] = _littlecms.cmsTagTypeHandler_DupPtr_set
    __swig_getmethods__["DupPtr"] = _littlecms.cmsTagTypeHandler_DupPtr_get
    if _newclass:
        DupPtr = _swig_property(_littlecms.cmsTagTypeHandler_DupPtr_get, _littlecms.cmsTagTypeHandler_DupPtr_set)
    __swig_setmethods__["FreePtr"] = _littlecms.cmsTagTypeHandler_FreePtr_set
    __swig_getmethods__["FreePtr"] = _littlecms.cmsTagTypeHandler_FreePtr_get
    if _newclass:
        FreePtr = _swig_property(_littlecms.cmsTagTypeHandler_FreePtr_get, _littlecms.cmsTagTypeHandler_FreePtr_set)
    __swig_setmethods__["ContextID"] = _littlecms.cmsTagTypeHandler_ContextID_set
    __swig_getmethods__["ContextID"] = _littlecms.cmsTagTypeHandler_ContextID_get
    if _newclass:
        ContextID = _swig_property(_littlecms.cmsTagTypeHandler_ContextID_get, _littlecms.cmsTagTypeHandler_ContextID_set)
    __swig_setmethods__["ICCVersion"] = _littlecms.cmsTagTypeHandler_ICCVersion_set
    __swig_getmethods__["ICCVersion"] = _littlecms.cmsTagTypeHandler_ICCVersion_get
    if _newclass:
        ICCVersion = _swig_property(_littlecms.cmsTagTypeHandler_ICCVersion_get, _littlecms.cmsTagTypeHandler_ICCVersion_set)

    def __init__(self):
        this = _littlecms.new_cmsTagTypeHandler()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsTagTypeHandler
    __del__ = lambda self: None
cmsTagTypeHandler_swigregister = _littlecms.cmsTagTypeHandler_swigregister
cmsTagTypeHandler_swigregister(cmsTagTypeHandler)

class cmsPluginTagType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginTagType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginTagType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginTagType_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginTagType_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginTagType_base_get, _littlecms.cmsPluginTagType_base_set)
    __swig_setmethods__["Handler"] = _littlecms.cmsPluginTagType_Handler_set
    __swig_getmethods__["Handler"] = _littlecms.cmsPluginTagType_Handler_get
    if _newclass:
        Handler = _swig_property(_littlecms.cmsPluginTagType_Handler_get, _littlecms.cmsPluginTagType_Handler_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginTagType()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginTagType
    __del__ = lambda self: None
cmsPluginTagType_swigregister = _littlecms.cmsPluginTagType_swigregister
cmsPluginTagType_swigregister(cmsPluginTagType)

class cmsTagDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsTagDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsTagDescriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ElemCount"] = _littlecms.cmsTagDescriptor_ElemCount_set
    __swig_getmethods__["ElemCount"] = _littlecms.cmsTagDescriptor_ElemCount_get
    if _newclass:
        ElemCount = _swig_property(_littlecms.cmsTagDescriptor_ElemCount_get, _littlecms.cmsTagDescriptor_ElemCount_set)
    __swig_setmethods__["nSupportedTypes"] = _littlecms.cmsTagDescriptor_nSupportedTypes_set
    __swig_getmethods__["nSupportedTypes"] = _littlecms.cmsTagDescriptor_nSupportedTypes_get
    if _newclass:
        nSupportedTypes = _swig_property(_littlecms.cmsTagDescriptor_nSupportedTypes_get, _littlecms.cmsTagDescriptor_nSupportedTypes_set)
    __swig_setmethods__["SupportedTypes"] = _littlecms.cmsTagDescriptor_SupportedTypes_set
    __swig_getmethods__["SupportedTypes"] = _littlecms.cmsTagDescriptor_SupportedTypes_get
    if _newclass:
        SupportedTypes = _swig_property(_littlecms.cmsTagDescriptor_SupportedTypes_get, _littlecms.cmsTagDescriptor_SupportedTypes_set)
    __swig_setmethods__["DecideType"] = _littlecms.cmsTagDescriptor_DecideType_set
    __swig_getmethods__["DecideType"] = _littlecms.cmsTagDescriptor_DecideType_get
    if _newclass:
        DecideType = _swig_property(_littlecms.cmsTagDescriptor_DecideType_get, _littlecms.cmsTagDescriptor_DecideType_set)

    def __init__(self):
        this = _littlecms.new_cmsTagDescriptor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsTagDescriptor
    __del__ = lambda self: None
cmsTagDescriptor_swigregister = _littlecms.cmsTagDescriptor_swigregister
cmsTagDescriptor_swigregister(cmsTagDescriptor)

class cmsPluginTag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginTag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginTag_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginTag_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginTag_base_get, _littlecms.cmsPluginTag_base_set)
    __swig_setmethods__["Signature"] = _littlecms.cmsPluginTag_Signature_set
    __swig_getmethods__["Signature"] = _littlecms.cmsPluginTag_Signature_get
    if _newclass:
        Signature = _swig_property(_littlecms.cmsPluginTag_Signature_get, _littlecms.cmsPluginTag_Signature_set)
    __swig_setmethods__["Descriptor"] = _littlecms.cmsPluginTag_Descriptor_set
    __swig_getmethods__["Descriptor"] = _littlecms.cmsPluginTag_Descriptor_get
    if _newclass:
        Descriptor = _swig_property(_littlecms.cmsPluginTag_Descriptor_get, _littlecms.cmsPluginTag_Descriptor_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginTag()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginTag
    __del__ = lambda self: None
cmsPluginTag_swigregister = _littlecms.cmsPluginTag_swigregister
cmsPluginTag_swigregister(cmsPluginTag)

class cmsPluginRenderingIntent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginRenderingIntent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginRenderingIntent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginRenderingIntent_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginRenderingIntent_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginRenderingIntent_base_get, _littlecms.cmsPluginRenderingIntent_base_set)
    __swig_setmethods__["Intent"] = _littlecms.cmsPluginRenderingIntent_Intent_set
    __swig_getmethods__["Intent"] = _littlecms.cmsPluginRenderingIntent_Intent_get
    if _newclass:
        Intent = _swig_property(_littlecms.cmsPluginRenderingIntent_Intent_get, _littlecms.cmsPluginRenderingIntent_Intent_set)
    __swig_setmethods__["Link"] = _littlecms.cmsPluginRenderingIntent_Link_set
    __swig_getmethods__["Link"] = _littlecms.cmsPluginRenderingIntent_Link_get
    if _newclass:
        Link = _swig_property(_littlecms.cmsPluginRenderingIntent_Link_get, _littlecms.cmsPluginRenderingIntent_Link_set)
    __swig_setmethods__["Description"] = _littlecms.cmsPluginRenderingIntent_Description_set
    __swig_getmethods__["Description"] = _littlecms.cmsPluginRenderingIntent_Description_get
    if _newclass:
        Description = _swig_property(_littlecms.cmsPluginRenderingIntent_Description_get, _littlecms.cmsPluginRenderingIntent_Description_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginRenderingIntent()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginRenderingIntent
    __del__ = lambda self: None
cmsPluginRenderingIntent_swigregister = _littlecms.cmsPluginRenderingIntent_swigregister
cmsPluginRenderingIntent_swigregister(cmsPluginRenderingIntent)


def _cmsDefaultICCintents(ContextID: 'cmsContext', nProfiles: 'cmsUInt32Number', Intents: 'cmsUInt32Number []', hProfiles: 'cmsHPROFILE []', BPC: 'cmsBool []', AdaptationStates: 'cmsFloat64Number []', dwFlags: 'cmsUInt32Number') -> "cmsPipeline *":
    return _littlecms._cmsDefaultICCintents(ContextID, nProfiles, Intents, hProfiles, BPC, AdaptationStates, dwFlags)
_cmsDefaultICCintents = _littlecms._cmsDefaultICCintents

def _cmsStageAllocPlaceholder(ContextID: 'cmsContext', Type: 'cmsStageSignature', InputChannels: 'cmsUInt32Number', OutputChannels: 'cmsUInt32Number', EvalPtr: '_cmsStageEvalFn', DupElemPtr: '_cmsStageDupElemFn', FreePtr: '_cmsStageFreeElemFn', Data: 'void *') -> "cmsStage *":
    return _littlecms._cmsStageAllocPlaceholder(ContextID, Type, InputChannels, OutputChannels, EvalPtr, DupElemPtr, FreePtr, Data)
_cmsStageAllocPlaceholder = _littlecms._cmsStageAllocPlaceholder
class cmsPluginMultiProcessElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginMultiProcessElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginMultiProcessElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginMultiProcessElement_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginMultiProcessElement_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginMultiProcessElement_base_get, _littlecms.cmsPluginMultiProcessElement_base_set)
    __swig_setmethods__["Handler"] = _littlecms.cmsPluginMultiProcessElement_Handler_set
    __swig_getmethods__["Handler"] = _littlecms.cmsPluginMultiProcessElement_Handler_get
    if _newclass:
        Handler = _swig_property(_littlecms.cmsPluginMultiProcessElement_Handler_get, _littlecms.cmsPluginMultiProcessElement_Handler_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginMultiProcessElement()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginMultiProcessElement
    __del__ = lambda self: None
cmsPluginMultiProcessElement_swigregister = _littlecms.cmsPluginMultiProcessElement_swigregister
cmsPluginMultiProcessElement_swigregister(cmsPluginMultiProcessElement)

class _cmsStageToneCurvesData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmsStageToneCurvesData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmsStageToneCurvesData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nCurves"] = _littlecms._cmsStageToneCurvesData_nCurves_set
    __swig_getmethods__["nCurves"] = _littlecms._cmsStageToneCurvesData_nCurves_get
    if _newclass:
        nCurves = _swig_property(_littlecms._cmsStageToneCurvesData_nCurves_get, _littlecms._cmsStageToneCurvesData_nCurves_set)
    __swig_setmethods__["TheCurves"] = _littlecms._cmsStageToneCurvesData_TheCurves_set
    __swig_getmethods__["TheCurves"] = _littlecms._cmsStageToneCurvesData_TheCurves_get
    if _newclass:
        TheCurves = _swig_property(_littlecms._cmsStageToneCurvesData_TheCurves_get, _littlecms._cmsStageToneCurvesData_TheCurves_set)

    def __init__(self):
        this = _littlecms.new__cmsStageToneCurvesData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete__cmsStageToneCurvesData
    __del__ = lambda self: None
_cmsStageToneCurvesData_swigregister = _littlecms._cmsStageToneCurvesData_swigregister
_cmsStageToneCurvesData_swigregister(_cmsStageToneCurvesData)

class _cmsStageMatrixData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmsStageMatrixData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmsStageMatrixData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Double"] = _littlecms._cmsStageMatrixData_Double_set
    __swig_getmethods__["Double"] = _littlecms._cmsStageMatrixData_Double_get
    if _newclass:
        Double = _swig_property(_littlecms._cmsStageMatrixData_Double_get, _littlecms._cmsStageMatrixData_Double_set)
    __swig_setmethods__["Offset"] = _littlecms._cmsStageMatrixData_Offset_set
    __swig_getmethods__["Offset"] = _littlecms._cmsStageMatrixData_Offset_get
    if _newclass:
        Offset = _swig_property(_littlecms._cmsStageMatrixData_Offset_get, _littlecms._cmsStageMatrixData_Offset_set)

    def __init__(self):
        this = _littlecms.new__cmsStageMatrixData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete__cmsStageMatrixData
    __del__ = lambda self: None
_cmsStageMatrixData_swigregister = _littlecms._cmsStageMatrixData_swigregister
_cmsStageMatrixData_swigregister(_cmsStageMatrixData)

class _cmsStageCLutData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmsStageCLutData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmsStageCLutData, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Tab"] = _littlecms._cmsStageCLutData_Tab_get
    if _newclass:
        Tab = _swig_property(_littlecms._cmsStageCLutData_Tab_get)
    __swig_setmethods__["Params"] = _littlecms._cmsStageCLutData_Params_set
    __swig_getmethods__["Params"] = _littlecms._cmsStageCLutData_Params_get
    if _newclass:
        Params = _swig_property(_littlecms._cmsStageCLutData_Params_get, _littlecms._cmsStageCLutData_Params_set)
    __swig_setmethods__["nEntries"] = _littlecms._cmsStageCLutData_nEntries_set
    __swig_getmethods__["nEntries"] = _littlecms._cmsStageCLutData_nEntries_get
    if _newclass:
        nEntries = _swig_property(_littlecms._cmsStageCLutData_nEntries_get, _littlecms._cmsStageCLutData_nEntries_set)
    __swig_setmethods__["HasFloatValues"] = _littlecms._cmsStageCLutData_HasFloatValues_set
    __swig_getmethods__["HasFloatValues"] = _littlecms._cmsStageCLutData_HasFloatValues_get
    if _newclass:
        HasFloatValues = _swig_property(_littlecms._cmsStageCLutData_HasFloatValues_get, _littlecms._cmsStageCLutData_HasFloatValues_set)

    def __init__(self):
        this = _littlecms.new__cmsStageCLutData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete__cmsStageCLutData
    __del__ = lambda self: None
_cmsStageCLutData_swigregister = _littlecms._cmsStageCLutData_swigregister
_cmsStageCLutData_swigregister(_cmsStageCLutData)

class _cmsStageCLutData_Tab(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cmsStageCLutData_Tab, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cmsStageCLutData_Tab, name)
    __repr__ = _swig_repr
    __swig_setmethods__["T"] = _littlecms._cmsStageCLutData_Tab_T_set
    __swig_getmethods__["T"] = _littlecms._cmsStageCLutData_Tab_T_get
    if _newclass:
        T = _swig_property(_littlecms._cmsStageCLutData_Tab_T_get, _littlecms._cmsStageCLutData_Tab_T_set)
    __swig_setmethods__["TFloat"] = _littlecms._cmsStageCLutData_Tab_TFloat_set
    __swig_getmethods__["TFloat"] = _littlecms._cmsStageCLutData_Tab_TFloat_get
    if _newclass:
        TFloat = _swig_property(_littlecms._cmsStageCLutData_Tab_TFloat_get, _littlecms._cmsStageCLutData_Tab_TFloat_set)

    def __init__(self):
        this = _littlecms.new__cmsStageCLutData_Tab()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete__cmsStageCLutData_Tab
    __del__ = lambda self: None
_cmsStageCLutData_Tab_swigregister = _littlecms._cmsStageCLutData_Tab_swigregister
_cmsStageCLutData_Tab_swigregister(_cmsStageCLutData_Tab)


def _cmsPipelineSetOptimizationParameters(Lut: 'cmsPipeline *', Eval16: '_cmsOPTeval16Fn', PrivateData: 'void *', FreePrivateDataFn: '_cmsFreeUserDataFn', DupPrivateDataFn: '_cmsDupUserDataFn') -> "void":
    return _littlecms._cmsPipelineSetOptimizationParameters(Lut, Eval16, PrivateData, FreePrivateDataFn, DupPrivateDataFn)
_cmsPipelineSetOptimizationParameters = _littlecms._cmsPipelineSetOptimizationParameters
class cmsPluginOptimization(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginOptimization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginOptimization, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginOptimization_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginOptimization_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginOptimization_base_get, _littlecms.cmsPluginOptimization_base_set)
    __swig_setmethods__["OptimizePtr"] = _littlecms.cmsPluginOptimization_OptimizePtr_set
    __swig_getmethods__["OptimizePtr"] = _littlecms.cmsPluginOptimization_OptimizePtr_get
    if _newclass:
        OptimizePtr = _swig_property(_littlecms.cmsPluginOptimization_OptimizePtr_get, _littlecms.cmsPluginOptimization_OptimizePtr_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginOptimization()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginOptimization
    __del__ = lambda self: None
cmsPluginOptimization_swigregister = _littlecms.cmsPluginOptimization_swigregister
cmsPluginOptimization_swigregister(cmsPluginOptimization)


def _cmsSetTransformUserData(CMMcargo: 'struct _cmstransform_struct *', ptr: 'void *', FreePrivateDataFn: '_cmsFreeUserDataFn') -> "void":
    return _littlecms._cmsSetTransformUserData(CMMcargo, ptr, FreePrivateDataFn)
_cmsSetTransformUserData = _littlecms._cmsSetTransformUserData

def _cmsGetTransformUserData(CMMcargo: 'struct _cmstransform_struct *') -> "void *":
    return _littlecms._cmsGetTransformUserData(CMMcargo)
_cmsGetTransformUserData = _littlecms._cmsGetTransformUserData

def _cmsGetTransformFormatters16(CMMcargo: 'struct _cmstransform_struct *', FromInput: 'cmsFormatter16 *', ToOutput: 'cmsFormatter16 *') -> "void":
    return _littlecms._cmsGetTransformFormatters16(CMMcargo, FromInput, ToOutput)
_cmsGetTransformFormatters16 = _littlecms._cmsGetTransformFormatters16

def _cmsGetTransformFormattersFloat(CMMcargo: 'struct _cmstransform_struct *', FromInput: 'cmsFormatterFloat *', ToOutput: 'cmsFormatterFloat *') -> "void":
    return _littlecms._cmsGetTransformFormattersFloat(CMMcargo, FromInput, ToOutput)
_cmsGetTransformFormattersFloat = _littlecms._cmsGetTransformFormattersFloat
class cmsPluginTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginTransform, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginTransform_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginTransform_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginTransform_base_get, _littlecms.cmsPluginTransform_base_set)
    __swig_setmethods__["Factory"] = _littlecms.cmsPluginTransform_Factory_set
    __swig_getmethods__["Factory"] = _littlecms.cmsPluginTransform_Factory_get
    if _newclass:
        Factory = _swig_property(_littlecms.cmsPluginTransform_Factory_get, _littlecms.cmsPluginTransform_Factory_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginTransform()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginTransform
    __del__ = lambda self: None
cmsPluginTransform_swigregister = _littlecms.cmsPluginTransform_swigregister
cmsPluginTransform_swigregister(cmsPluginTransform)

class cmsPluginMutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmsPluginMutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmsPluginMutex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _littlecms.cmsPluginMutex_base_set
    __swig_getmethods__["base"] = _littlecms.cmsPluginMutex_base_get
    if _newclass:
        base = _swig_property(_littlecms.cmsPluginMutex_base_get, _littlecms.cmsPluginMutex_base_set)
    __swig_setmethods__["CreateMutexPtr"] = _littlecms.cmsPluginMutex_CreateMutexPtr_set
    __swig_getmethods__["CreateMutexPtr"] = _littlecms.cmsPluginMutex_CreateMutexPtr_get
    if _newclass:
        CreateMutexPtr = _swig_property(_littlecms.cmsPluginMutex_CreateMutexPtr_get, _littlecms.cmsPluginMutex_CreateMutexPtr_set)
    __swig_setmethods__["DestroyMutexPtr"] = _littlecms.cmsPluginMutex_DestroyMutexPtr_set
    __swig_getmethods__["DestroyMutexPtr"] = _littlecms.cmsPluginMutex_DestroyMutexPtr_get
    if _newclass:
        DestroyMutexPtr = _swig_property(_littlecms.cmsPluginMutex_DestroyMutexPtr_get, _littlecms.cmsPluginMutex_DestroyMutexPtr_set)
    __swig_setmethods__["LockMutexPtr"] = _littlecms.cmsPluginMutex_LockMutexPtr_set
    __swig_getmethods__["LockMutexPtr"] = _littlecms.cmsPluginMutex_LockMutexPtr_get
    if _newclass:
        LockMutexPtr = _swig_property(_littlecms.cmsPluginMutex_LockMutexPtr_get, _littlecms.cmsPluginMutex_LockMutexPtr_set)
    __swig_setmethods__["UnlockMutexPtr"] = _littlecms.cmsPluginMutex_UnlockMutexPtr_set
    __swig_getmethods__["UnlockMutexPtr"] = _littlecms.cmsPluginMutex_UnlockMutexPtr_get
    if _newclass:
        UnlockMutexPtr = _swig_property(_littlecms.cmsPluginMutex_UnlockMutexPtr_get, _littlecms.cmsPluginMutex_UnlockMutexPtr_set)

    def __init__(self):
        this = _littlecms.new_cmsPluginMutex()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _littlecms.delete_cmsPluginMutex
    __del__ = lambda self: None
cmsPluginMutex_swigregister = _littlecms.cmsPluginMutex_swigregister
cmsPluginMutex_swigregister(cmsPluginMutex)


def _cmsCreateMutex(ContextID: 'cmsContext') -> "void *":
    return _littlecms._cmsCreateMutex(ContextID)
_cmsCreateMutex = _littlecms._cmsCreateMutex

def _cmsDestroyMutex(ContextID: 'cmsContext', mtx: 'void *') -> "void":
    return _littlecms._cmsDestroyMutex(ContextID, mtx)
_cmsDestroyMutex = _littlecms._cmsDestroyMutex

def _cmsLockMutex(ContextID: 'cmsContext', mtx: 'void *') -> "cmsBool":
    return _littlecms._cmsLockMutex(ContextID, mtx)
_cmsLockMutex = _littlecms._cmsLockMutex

def _cmsUnlockMutex(ContextID: 'cmsContext', mtx: 'void *') -> "void":
    return _littlecms._cmsUnlockMutex(ContextID, mtx)
_cmsUnlockMutex = _littlecms._cmsUnlockMutex

# Marshal the sampler callback to use the Python function.
def cmsStageSampleCLut16bit(mpe, sampler, py_cargo, dwflags):
  cargo = sampler_cargo()
  cargo.in_dims = cmsStageInputChannels(mpe)
  cargo.out_dims = cmsStageOutputChannels(mpe)

  cargo.py_in = uint16Array(cargo.in_dims)
  cargo.py_out = uint16Array(cargo.out_dims)
  cargo.py_cargo = py_cargo
  result = _littlecms.cmsStageSampleCLut16bit(mpe, sampler, cargo, dwflags)
  return result


# Setup the littlecms error callback in all new contexts.
def cmsCreateContext(Plugin, UserData):
  new_context = _littlecms.cmsCreateContext(Plugin, UserData)
  littlecms_set_error_function(new_context)
  return new_context
def cmsDupContext(ContextID, NewUserData):
  new_context = _littlecms.cmsDupContext(ContextID, NewUserData)
  littlecms_set_error_function(new_context)
  return new_context


# Some API functions return data in array params allocated by the client.
# An output typemap could normally be used to convert these params to a python
# return value, but sometimes that isn't possible.
# cmsGetHeaderProfileID() shares a signature with cmsSetHeaderProfileID for which
# the ProfileID is an input, therefore a typemap cannot be used.
def cmsGetHeaderProfileID(hProfile):
  id = uint8Array(16)
  _littlecms.cmsGetHeaderProfileID(hProfile, id)
  return tuple(id[i] for i in range(16))        # SWIG arrays don't know their length

# This file is compatible with both classic and new-style classes.


