#!/usr/bin/env python
import psychic_disco
import argparse
import os
import re
import sys
import subprocess
import shutil
import boto3

class Command(object):
    Name = ""
    Help = ""

    @staticmethod
    def command(args):
        return NotImplemented
    
    @staticmethod
    def configure_parser(parser):
        return NotImplemented

class ListEntrypoints(Command):
    Name = "list_entrypoints"
    Help = "list all entrypoints for a given module"
    @staticmethod
    def configure_parser(parser):
        parser.add_argument('module_name')

    @staticmethod
    def command(args):
        psychic_disco.attempt_import(args.module_name)
        print psychic_disco.entry_points()

class DiscoverEntrypoints(Command):
    Name = "discover_entrypoints"
    Help = "search repo for possible entrypoints"
    @staticmethod
    def configure_parser(parser):
        pass

    @staticmethod
    def command(args):
        psychic_disco.discover_entrypoints(args.repo)
        print psychic_disco.entry_points()

class DeployLambdas(Command):
    Name = "deploy_lambdas"
    Help = "Deploy the defined lambda functions"
    @staticmethod
    def configure_parser(parser):
        pass

    @staticmethod
    def command(args):
        psychic_disco.discover_entrypoints(args.repo)
        print "Found %d lambda functions" % len(psychic_disco.entry_points())
        for ep in psychic_disco.entry_points():
            ep.deploy()

class BundleApplication(Command):
    Name = "bundle"
    Help = "Bundle application into a Lambda-friendly deployment package"
    @staticmethod
    def configure_parser(parser):
        pass

    @staticmethod
    def command(args):
        package = psychic_disco.deployment_package.default()
        package.deploy()

def build_parser():
    parser = argparse.ArgumentParser(prog='psychic_disco')
    parser.add_argument('--repo', help='microservices repo', default=".")
    parser.add_argument('--config', help='config file', default="psychic_disco_config.py")
    subparsers = parser.add_subparsers(help='sub-command help')
    for subcommand in Command.__subclasses__():
        subparser = subparsers.add_parser(subcommand.Name, help=subcommand.Help)
        subcommand.configure_parser(subparser)
        subparser.set_defaults(func=subcommand.command)
    return parser

if __name__ == "__main__":
    parser = build_parser()
    args = parser.parse_args()
    sys.path[0] = args.repo
    if os.path.exists(args.config):
        config_module = psychic_disco.convert_path_to_module(args.config)
        psychic_disco.attempt_import(config_module)
    args.func(args)
