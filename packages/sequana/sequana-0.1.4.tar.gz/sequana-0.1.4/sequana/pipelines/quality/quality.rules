import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig, FileFactory

# This must be defined before the include 
configfile: "config.yaml"


cfg = SequanaConfig(config)

expected_output = []

include: sm.modules['phix_removal']
config["adapter_removal_input"] = "bwa_bam_to_fastq"
config["identify_adapters_input"] = "bwa_bam_to_fastq"

# Include the cutadapt module
include: sm.modules['cutadapt']
expected_output += __cutadapt__output

# Include the identify_adapters module
include: sm.modules['identify_adapters']
expected_output += __identify_adapters__output

# import fastqc_ dynamic function
include: fastqc_dynamic("cutadapt", __cutadapt__output)
include: fastq_stats_dynamic("cutadapt", __cutadapt__output)



rule pipeline_quality:
    input:
        cfg.PROJECT +"/report_phix_removal.html",
        expected_output,
        fastqc_cutadapt="%s/fastqc_cutadapt/fastqc.done" % PROJECT,
        fastq_stats_cutadapt="%s/fastq_stats_cutadapt/fastq_stats.done" % PROJECT
    output:
        # Used by other workflow that uses this workflow
        touch("%s/logs/pipeline_quality.done" % PROJECT)
    run:
        from sequana import report_cutadapt
        from sequana import report_fastqc
        from sequana import report_fastq_stats
        s = report_cutadapt.CutAdaptReport(directory=cfg.PROJECT)
        s.read_data(cfg.PROJECT + "/logs/cutadapt.txt")
        s.create_report()

        # Now, the missing FastQC
        s = report_fastqc.FastQCReport(
                  PROJECT+ "/fastqc_cutadapt", 
                  output_filename="fastqc__cutadapt.html",
                  directory=cfg.PROJECT )
        s.jinja['main_link'] = 'report_phix_removal.html'
        s.create_report()

        # And the missing FastQ
        s = report_fastq_stats.FastQStatsReport(
            PROJECT+ "/fastq_stats_cutadapt", 
            output_filename="fastq_stats__cutadapt.html",
            directory=cfg.PROJECT)
        s.jinja['main_link'] = 'report_phix_removal.html'
        s.create_report()

        shell('ln -sf report_phix_removal.html %s/pipeline_quality.html' % (cfg.PROJECT))


onsuccess:
    print("Workflow finished. Creating stats image")
    from sequana.snaketools import SnakeMakeStats
    SnakeMakeStats("stats.txt",cfg).plot_and_save()





