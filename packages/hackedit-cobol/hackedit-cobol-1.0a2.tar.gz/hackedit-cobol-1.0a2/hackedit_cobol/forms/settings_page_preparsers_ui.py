# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/colin/dev/HackEdit/hackedit-cobol/data/forms/settings_page_preparsers.ui'
#
# Created by: PyQt5 UI code generator 5.5.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(671, 341)
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.combo_configs = QtWidgets.QComboBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.combo_configs.sizePolicy().hasHeightForWidth())
        self.combo_configs.setSizePolicy(sizePolicy)
        self.combo_configs.setObjectName("combo_configs")
        self.horizontalLayout_4.addWidget(self.combo_configs)
        self.bt_add_cfg = QtWidgets.QToolButton(self.groupBox)
        icon = QtGui.QIcon.fromTheme("list-add")
        self.bt_add_cfg.setIcon(icon)
        self.bt_add_cfg.setObjectName("bt_add_cfg")
        self.horizontalLayout_4.addWidget(self.bt_add_cfg)
        self.bt_rm_cfg = QtWidgets.QToolButton(self.groupBox)
        icon = QtGui.QIcon.fromTheme("list-remove")
        self.bt_rm_cfg.setIcon(icon)
        self.bt_rm_cfg.setObjectName("bt_rm_cfg")
        self.horizontalLayout_4.addWidget(self.bt_rm_cfg)
        self.line = QtWidgets.QFrame(self.groupBox)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout_4.addWidget(self.line)
        self.verticalLayout.addWidget(self.groupBox)
        self.group_config = QtWidgets.QGroupBox(Form)
        self.group_config.setObjectName("group_config")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.group_config)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setContentsMargins(-1, 0, -1, -1)
        self.formLayout.setObjectName("formLayout")
        self.label_2 = QtWidgets.QLabel(self.group_config)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.edit_extensions = QtWidgets.QLineEdit(self.group_config)
        self.edit_extensions.setObjectName("edit_extensions")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.edit_extensions)
        self.label_3 = QtWidgets.QLabel(self.group_config)
        self.label_3.setObjectName("label_3")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(0, -1, -1, -1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.edit_parser_path = PathLineEdit(self.group_config)
        self.edit_parser_path.setObjectName("edit_parser_path")
        self.horizontalLayout_2.addWidget(self.edit_parser_path)
        self.bt_parser_path = QtWidgets.QToolButton(self.group_config)
        self.bt_parser_path.setObjectName("bt_parser_path")
        self.horizontalLayout_2.addWidget(self.bt_parser_path)
        self.formLayout.setLayout(1, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout_2)
        self.label_4 = QtWidgets.QLabel(self.group_config)
        self.label_4.setObjectName("label_4")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_4)
        self.edit_parser_flags = QtWidgets.QLineEdit(self.group_config)
        self.edit_parser_flags.setObjectName("edit_parser_flags")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.edit_parser_flags)
        self.label_output_rule = QtWidgets.QLabel(self.group_config)
        self.label_output_rule.setObjectName("label_output_rule")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_output_rule)
        self.edit_output_rule = QtWidgets.QLineEdit(self.group_config)
        self.edit_output_rule.setObjectName("edit_output_rule")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.edit_output_rule)
        self.cb_only_preparser = QtWidgets.QCheckBox(self.group_config)
        self.cb_only_preparser.setObjectName("cb_only_preparser")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.cb_only_preparser)
        self.label_cobol = QtWidgets.QLabel(self.group_config)
        self.label_cobol.setObjectName("label_cobol")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.label_cobol)
        self.edit_cobol_compiler_flags = QtWidgets.QLineEdit(self.group_config)
        self.edit_cobol_compiler_flags.setObjectName("edit_cobol_compiler_flags")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.edit_cobol_compiler_flags)
        self.verticalLayout_2.addLayout(self.formLayout)
        self.verticalLayout.addWidget(self.group_config)
        self.verticalLayout.setStretch(1, 1)

        self.retranslateUi(Form)
        self.cb_only_preparser.toggled['bool'].connect(self.label_cobol.setHidden)
        self.cb_only_preparser.toggled['bool'].connect(self.edit_cobol_compiler_flags.setHidden)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        from hackedit.api.gettext import get_translation
        _ = get_translation(package="hackedit-cobol")
        Form.setWindowTitle(_("Form"))
        self.groupBox.setTitle(_("Preparsers"))
        self.combo_configs.setToolTip(_("The list of COBOL preparsers configurations"))
        self.bt_add_cfg.setToolTip(_("Add new preparser configuration."))
        self.bt_add_cfg.setText(_("..."))
        self.bt_rm_cfg.setToolTip(_("Remove preparser configuration."))
        self.bt_rm_cfg.setText(_("..."))
        self.group_config.setTitle(_("Configuration"))
        self.label_2.setText(_("Associated extensions:"))
        self.edit_extensions.setToolTip(_("<html><head/><body><p>The list of extension associated with the preparser.</p></body></html>"))
        self.label_3.setText(_("Parser path:"))
        self.edit_parser_path.setToolTip(_("Path to the parser executable."))
        self.bt_parser_path.setToolTip(_("Select parser path."))
        self.bt_parser_path.setText(_("..."))
        self.label_4.setText(_("Parser flags:"))
        self.edit_parser_flags.setToolTip(_("Set the parser flags"))
        self.label_output_rule.setText(_("Parser output rule:"))
        self.edit_output_rule.setToolTip(_("<html><head/><body><p>This rule determines the output file path of the preparser (relative to the source file or absolute). </p><p>If &quot;Only preparser&quot; is checked, the output rule specify the path to the final executable that can be run by the IDE (e.g. build/$file.exe). </p><p>If it is not checked, the output rule specify the path to the generated COBOL source file that will be compiled using the project compiler configuration (and the aditional COBOL compiler flags).</p><p>You can use &quot;$file&quot; to refer to the source file name (without extension).</p></body></html>"))
        self.edit_output_rule.setText(_("$file.cob"))
        self.cb_only_preparser.setToolTip(_("Check in case your preparser already produces an executable."))
        self.cb_only_preparser.setText(_("Only preparser"))
        self.label_cobol.setText(_("Extra COBOL Compiler flags:"))
        self.edit_cobol_compiler_flags.setToolTip(_("The list of extra compiler flags to set for compiling the cobol output file."))

from hackedit.api.widgets import PathLineEdit
