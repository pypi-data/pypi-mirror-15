-- # Satellites tutorial
-- ```
-- Run with `.read satellites.bql -v`
-- Exit the shell with ^D (CTRL + D)
-- ```

-- In this example we will explore the core functionality of BayesDB by using
-- BayesDB to explore and analyze some real data. The data we will use is the
-- Union of Concerned Scientists' Satellites data.
-- The data is a catalogue of satellites. Each row of the data represents a
-- satellite and each column is a feature of that satellite such as dry mass,
-- orbit type, launch date, perigee, etc.

-- ## Creating a table
-- The first thing to do is to load our data. The data are in csv format with
-- a header of the column names. To load data in the shell, we use the `.csv`
-- command followed by what we want the table to be named --- we will call it
-- satellites --- followed by the path to the csv.

.csv satellites satellites.csv

-- Now that we have a table, we can use the `.describe` command to view the
-- columns in the table.

.describe table satellites

-- We can select data just as we would in SQL in BQL:

SELECT name, dry_mass_kg, period_minutes, class_of_orbit FROM satellites LIMIT 10;

-- We can also use visualization tools such as `.histogram` to plot emperical
-- frequencies. In the next example, the first argument `dry_mass_kg` is a
-- `NUMERICAL` variable is plotted in different colors based on the `class_of_orbit`.

.histogram SELECT dry_mass_kg, class_of_orbit FROM satellites; -b 35 --normed

-- Finally, we need to tell BayesDB which values to treat as missing, `NULL`.
-- Different datasets use different markers for missing data, this dataset uses
-- `NaN`. To convert all instances of `NaN` to SQL `NULL`, we use the
-- `.nullify` command, followed by the table, followed by the value to convert.

.nullify satellites NaN
SELECT name, dry_mass_kg FROM satellites LIMIT 10;

-- Notice that `NaN` entires have been replaced with `None`, which is the
-- way Python represents SQL `NULL`.

-- ## Generating models of the data
-- Before we can ask BayesDB any questions we need to create a generator. A
-- generator specifies the model that we want to impose on the data. Here, we
-- will use the default generator, crosscat.

-- To create a generator we use the keywords `CREATE GENERATOR <name> FROM
-- <table> USING <metamodel> ( [arguments] )`.

CREATE GENERATOR satellites_cc FOR satellites
    USING crosscat(
        GUESS(*),
        name IGNORE
    );

-- We created a generator named `satellites_cc` for our `satellites` table using
-- the crosscat metamodel. Inside the parenthesis, we provide crosscat with
-- a little information about how we would like the columns in our table to be
-- modeled. `GUESS(*)` means that we would like crosscat to guess the
-- statistical data type of each column, e.g., `NUMERICAL`, `CATEGORICAL`
-- `CYCLIC`; `Name IGNORE` means that we would like crosscat to ignore the
-- `Name` column during analyses and not to assign it a statistical data type.

-- We can see how well the system guessed the types of our columns by using the
-- `.describe command.

.describe columns satellites_cc

-- The next step is to tell BayesDB how many instances of crosscat we would
-- like to use. These instances are referred to as models, and answers from
-- BayesDB are the result of averaging across models. We will arbitratily
-- choose 16 models.

INITIALIZE 16 MODELS FOR satellites_cc;

-- Now we ask BayesDB to use `ANALYZE` our data using the instances of
-- crosscat we have just initialized. We will `ANALYZE` for four minutes
-- (though in practice, you will most certainly want to analyze for longer).
-- We will also ask BayesDB to stop every two `ANALYZE` steps to take some
-- diagnostic information that will help us later to decide whether we have
-- done enough analysis on enough models (but do not worry about this quite
-- yet).

ANALYZE satellites_cc FOR 4 MINUTES CHECKPOINT 2 ITERATION WAIT;

-- ## Inferring values
-- Inferring is like imputing. `INFER` produces a summary value for a missing
-- (`NULL`) entry. If we use the `EXPLICIT` keyword, we can re-infer present
-- values.

-- First we will impute missing values of `type_of_orbit`. Let us see how many
-- values are missing.

SELECT COUNT(*) FROM satellites WHERE type_of_orbit IS NULL;

-- We will use the `INFER EXPLICIT` query to impute all missing
-- values, and let BayesDB tell us the belief of its reported value. First we
-- will pull out `anticipated_lifetime`, `perigee_km`, `period_minutes`, and
-- `class_of_orbit` exactly as they appear in the table. Next we will use the
-- special BQL expression `PREDICT <col_name> CONFIDENCE <conf_name>`, which
-- will retrun two values: first, a prediction for `<col_name>` and second a
-- confidence level for the predicted value.

CREATE TEMP TABLE inferred_orbit AS
    INFER EXPLICIT
        anticipated_lifetime, perigee_km, period_minutes, class_of_orbit,
        PREDICT type_of_orbit AS inferred_orbit_type
            CONFIDENCE inferred_orbit_type_conf
    FROM satellites_cc
    WHERE type_of_orbit IS NULL;

-- We can visualize the result both in tabular and graphical form.

SELECT * FROM inferred_orbit LIMIT 10;

.show 'SELECT inferred_orbit_type, inferred_orbit_type_conf, class_of_orbit
    FROM inferred_orbit;' --colorby class_of_orbit

-- Now we shall impute missing values of `dry_mass_kg`. First, let us
-- see how many values are missing.

SELECT COUNT(*) FROM satellites WHERE dry_mass_kg IS NULL;

-- Nearly half the values of dry mass are missing! We can visualize missing
-- values in pairs of continuous columns using the `.show` command with the
-- `-m` or `--show-missing` option.

.show 'SELECT dry_mass_kg, launch_mass_kg FROM satellites WHERE class_of_orbit = GEO;' -m

-- Missing values are represented as lines along their missing dimension. This
-- way, we can see which values of the missing dimensions are more likely by
-- observing where the lines intersect with the existing data points.

-- We will use the `INFER` command to impute missing values for geosynchronous
-- satellites.

.show 'INFER dry_mass_kg AS "Inferred Dry Mass (confidence 0)",
        launch_mass_kg AS "Inferred Launch Mass (confidence 0)"
        WITH CONFIDENCE 0
    FROM satellites_cc
    WHERE class_of_orbit = GEO;' -m

-- No more missing values. Notice the `WITH CONFIDENCE` clause. This tells
-- BayesDB to impute entries only if it is confident to a certain degree.
-- `WITH CONFIDENCE 0` will then impute all values regardless; if we asked for
-- confidence of 0.6 fewer entries (or perhaps none at all) would be filled in.

.show 'INFER dry_mass_kg AS "Inferred Dry Mass (confidence 0.6)",
        launch_mass_kg AS "Inferred Launch Mass (confidence 0.6)"
        WITH CONFIDENCE 0.6
    FROM satellites_cc
    WHERE class_of_orbit = GEO;' -m

-- Notice that the number of red lines is exactly the same as
-- before. This is because BayesDB does not have enough confidence
-- (0.6) to fill in any missing values for `dry_mass_kg`.

-- BayesDB's notion of `CONFIDENCE` is unlike confidence in standard
-- statistics. Whereas in standard statistics 'confidence' is typically paired
-- with the word 'interval' to describe some region of probability mass,
-- `CONFIDENCE` in BayesDB is a measure of inter-model agreement; that is,
-- `CONFIDENCE` is the probability that among the models, there is a unimodal
-- summary of the value we wish to impute given all other entries in that
-- entry's row.

-- ## Characterizing dependence between variables

-- Now that the analyses are finished, we can begin to ask BayesDB
-- questions about the implications of the data. Often the first
-- question we want to ask, especially if we are relatively clueless
-- about the data, is which columns are most likely dependent on each
-- other.

-- One of the most common statistical techniques for detecting dependence
-- between variables is using correlation coefficients.
-- BayesDB has the ability to compute observed correlation coefficients
-- and their associated pvalues between all the pairs of columns, using the
-- `ESTIMATE FROM PAIRWISE` command; and because we do not want to look at
-- at a very long table, we will visualize it in a heatmap using the `.heatmap`
-- command. We can visualize using the `.heatmap`.

.heatmap 'ESTIMATE CORRELATION FROM PAIRWISE COLUMNS OF satellites_cc;'

-- BayesDB has a more powerful notion of dependence called `DEPENDENCE
-- PROBABILITY`, which is the degree of belief that two columns have
-- some dependence. First let us see the probability that each column
-- depdnds on `perigee_km`, and `longitude_radians_of_geo`.

ESTIMATE DEPENDENCE PROBABILITY WITH perigee_km AS
        "Probability of Dependence with Perigee"
    FROM COLUMNS OF satellites_cc
    ORDER BY "Probability of Dependence with Perigee" DESC LIMIT 10;

ESTIMATE DEPENDENCE PROBABILITY WITH longitude_radians_of_geo AS
        "Probability of Dependence with Longitude Radians"
    FROM COLUMNS OF satellites_cc
    ORDER BY "Probability of Dependence with Longitude Radians" DESC LIMIT 10;

-- Let us now view all pairwise dependencies probabilities using the
-- `.heatmap` command.  The entries along the diagnoal are 1, since
-- each variable is dependent with itself.  Notice that `DEPENDENCE
-- PROBABILITY` determines a richer network of relationships than
-- standard measures of correlation.

.heatmap 'ESTIMATE DEPENDENCE PROBABILITY FROM PAIRWISE COLUMNS OF satellites_cc;'

-- Each cell in the heatmap represents the dependence probability
-- between a pair of columns. Darker cells represent higher dependence
-- probability. The dendrogram is primarily for visualization, but
-- clusters columns roughly into dependent groups. Note which groups
-- of columns have the highest dependence probability. Do you notice
-- any patterns? Many of the variables in this table are nearly
-- deterministic, given the laws of physics. For example, we can
-- determine a satellite's orbital period (the amount of time an orbit
-- takes) form its `perigee` (lowest altitude of the orbit) and
-- `apogee` (highest altitude of the orbit).

-- Which variables predict `anticipated_lifetime` --- which are the
-- main predictors?

ESTIMATE DEPENDENCE PROBABILITY WITH anticipated_lifetime AS
        "Probability of Dependence with Lifetime"
    FROM COLUMNS OF satellites_cc
    ORDER BY "Probability of Dependence with Lifetime" DESC LIMIT 10;

.show 'SELECT anticipated_lifetime, period_minutes, launch_mass_kg,
    dry_mass_kg, inclination_radians FROM satellites;'

-- Let us look at the dependencies for other variables such as `purpose`.

ESTIMATE DEPENDENCE PROBABILITY WITH purpose AS
        "Probability of Dependence with Purpose"
    FROM COLUMNS OF satellites_cc
    ORDER BY "Probability of Dependence with Purpose" DESC LIMIT 10;

-- ## Identify satellites with unlikely lifetimes

-- We can use BayesDB to identify anomalous values in our table. An anomaly
-- is different from an outlier. An anomalous value is an observed value that
-- has a low probability under the inferred model; and outlier is defined
-- simply as having an extreme value. We can visualize this idea by creating
-- a scatter plot of data and their predictive probability functions
-- (`PREDICTIVE PROBABILITY`). We use the `ESTIMATE` keyword rather than
-- `SELECT` because we are asking questions of the generator. We also
-- specify that we only want the probabilities of non-null values using a
-- `WHERE` clause (the predictive probability of `NULL` is `NULL`).

.show 'ESTIMATE anticipated_lifetime,
        PREDICTIVE PROBABILITY OF anticipated_lifetime AS "Relative Probability of Lifetime",
        class_of_orbit
    FROM satellites_cc
    WHERE anticipated_lifetime IS NOT NULL;' --colorby class_of_orbit

-- Note that there are plenty of non-extreme values that have low
-- probabilities.  Let us get a list of the 10 most anomalous
-- satellites by sorting by `relative probability of lifetime` in
-- ascending (`ASC`) order.

CREATE TEMP TABLE unlikely_lifetimes AS ESTIMATE name, anticipated_lifetime,
        PREDICTIVE PROBABILITY OF anticipated_lifetime
            AS "Relative Probability of Lifetime"
    FROM satellites_cc;

SELECT * FROM unlikely_lifetimes
    WHERE Anticipated_Lifetime IS NOT NULL
    ORDER BY "Relative Probability of Lifetime" ASC LIMIT 10;

-- There are other values in the table with unlikely anticipated
-- lifetimes, although it is not entirely clear why BayesDB has
-- identified them as such. To determine why `Sicral 1A`, for
-- instance, has a low probability lifetime, let us query the
-- satellites which BayesDB believes are similar to `Sicral 1A` using
-- the `SIMILARITY TO` query.

CREATE TEMP TABLE similiarity_to_sicral1a AS
    ESTIMATE name, anticipated_lifetime,
        SIMILARITY TO (name = 'Sicral 1A') AS sim_to_sicral
    FROM satellites_cc;

SELECT * FROM similiarity_to_sicral1a
    ORDER BY sim_to_sicral DESC LIMIT 10;

-- All the satellites that BayesDB believes are similar to `Sicral 1A`
-- have lifetimes between 5 to 12 years, except for its sister
-- satellite `Sicral 1B` which is also an anomaly. Furthe research on
-- these two satellites indicates that their actual anticipated
-- lifetime is 10 years; the database entry is an error.


-- Recall earlier that we mentioned that some of the relations are governed by
-- the laws of physics and are thus nearly deterministic? We can use this
-- determinism coupled with our notion of anomalousness to search the table for
-- data-entry errors. A geosynchronous orbit should take 24 hours
-- (1440 minutes). Let us display the anomalous values for satellites in
-- geosynchronous orbit.

CREATE TEMP TABLE unlikely_periods AS ESTIMATE name, class_of_orbit, period_minutes,
        PREDICTIVE PROBABILITY OF period_minutes AS "Relative Probability of Period"
    FROM satellites_cc;

SELECT * FROM unlikely_periods
    WHERE class_of_orbit IS GEO AND period_minutes IS NOT NULL
    ORDER BY "Relative Probability of Period" ASC LIMIT 10;

-- We see a couple of oddities. There are satellites with 24-minute periods. It
-- appears that these entries are in hours rather than minutes. There are other
-- entries that have too-short periods, which appear to be decimal errors.

-- **NOTE:** We have reported these errors to the database maintainers.


-- ## Simulating entries

-- Suppose that we saw a satellite in geosynchrous orbit with a mass
-- of 500kg; who launched it, and what is its purpose? We can ask
-- BayesDB to simulate this scenario for us. We will do this in two
-- queries. In the first query, we will create a temporary table
-- (`TEMP TABLE`) consisting of simulated data using the `SIMULATE`
-- keyword (see Notes for more info about temporary tables); in the
-- second query, we will concatenate and organize the data for easy
-- reading.

-- We `SIMULATE` the `Country` and `Purpose` variables, `GIVEN` that we have
-- observed the `Class_of_Orbit` and `Dry_Mass` (1000 simulations).
-- We specify the number of points to simulate using `LIMIT`.

CREATE TEMP TABLE satellite_purpose AS
    SIMULATE country_of_operator, purpose FROM satellites_cc
        GIVEN Class_of_orbit = GEO, Dry_mass_kg = 500
        LIMIT 1000;

-- Note that everything after the `AS` is a perfectly valid
-- query. `CREATE TEMP TABLE satellite_purpose AS` saves the result of
-- the query that follows it into a table called `satellite_purpose`
-- which we can refer to later. Temporary tables are destroyed when
-- the session is closed.

-- To determine which country-purpose combination is most probable
-- we will concatenate the values of the first two columns into a single
-- country-purpose column using the `||` operator, and then use SQLite's
-- `COUNT` function to calculate the frequencies. Let us look at the top 10
-- most frequent user-purpose combinations.

SELECT country_of_operator || "--" || purpose AS "Country-Purpose",
        COUNT("Country-Purpose") AS frequency
    FROM satellite_purpose
    Group BY "Country-Purpose"
    ORDER BY frequency DESC
    LIMIT 10;

-- We can visualize this data using the `.bar` command

.bar 'SELECT country_of_operator || "--" || purpose AS "Country-Purpose",
        COUNT("Country-Purpose") AS frequency
    FROM satellite_purpose
    GROUP BY "Country-Purpose"
    ORDER BY frequency DESC
    LIMIT 20;'
