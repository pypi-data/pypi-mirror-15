from tree.py import brancher, _coefficients
from randam import shuffle
from grouptheory import a_group_gen
from phonons import _find_concentrations, how_many_arrows


cases = [{"dim":6,
          "col":[[-1,1],[-1,2]],
          "trans":[[0,1],[1,0]],
          "rots":[[[0,1],[0,1,2,3,4,5]],[[1,0],[2,3,0,1,5,4]],[[1,0],[2,1,0,3,5,4]],[[0,1],[0,3,2,1,5,4]]],
          "num":1},
         {"dim":6,
          "col":[[-1,1],[-1,2],[-1,3],[-1,4]],
          "trans":[[j-1 for j in i] for i in [[1, 2, 3, 4], [2, 1, 4, 3], [3, 4, 1, 2], [4, 3, 2, 1]]],
          "rots":[[[j-1 for j in i] for i in t] for t in [[[1, 2, 3, 4], [1, 2, 3, 4, 5, 6]], [[1, 4, 3, 2], [1, 3, 2, 4, 6, 5]], [[1, 2, 3, 4], [4, 2, 3, 1, 5, 6]], [[1, 4, 3, 2], [4, 3, 2, 1, 6, 5]], [[1, 2, 3, 4], [1, 5, 3, 4, 2, 6]], [[1, 4, 3, 2], [1, 3, 5, 4, 6, 2]], [[1, 2, 3, 4], [4, 5, 3, 1, 2, 6]], [[1, 4, 3, 2], [4, 3, 5, 1, 6, 2]], [[1, 2, 3, 4], [1, 2, 6, 4, 5, 3]], [[1, 4, 3, 2], [1, 6, 2, 4, 3, 5]], [[1, 2, 3, 4], [4, 2, 6, 1, 5, 3]], [[1, 4, 3, 2], [4, 6, 2, 1, 3, 5]], [[1, 2, 3, 4], [1, 5, 6, 4, 2, 3]], [[1, 4, 3, 2], [1, 6, 5, 4, 3, 2]], [[1, 2, 3, 4], [4, 5, 6, 1, 2, 3]], [[1, 4, 3, 2], [4, 6, 5, 1, 3, 2]]]],
          "num":4},
         {"dim":6,
          "col":[[-1, 1], [-1, 2], [-1, 2], [-1, 3], [-1, 3], [-1, 3]],
          "trans":[[j-1 for j in i] for i in [[1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 1], [3, 4, 5, 6, 1, 2], [4, 5, 6, 1, 2, 3], [5, 6, 1, 2, 3, 4], [6, 1, 2, 3, 4, 5]]],
          "rots":[[[j-1 for j in i] for i in t] for t in [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6], [4, 2, 3, 1, 5, 6]], [[1, 2, 3, 4, 5, 6], [1, 5, 3, 4, 2, 6]], [[1, 2, 3, 4, 5, 6], [4, 5, 3, 1, 2, 6]], [[1, 6, 5, 4, 3, 2], [1, 2, 6, 4, 5, 3]], [[1, 6, 5, 4, 3, 2], [4, 2, 6, 1, 5, 3]], [[1, 6, 5, 4, 3, 2], [1, 5, 6, 4, 2, 3]], [[1, 6, 5, 4, 3, 2], [4, 5, 6, 1, 2, 3]]]],
          "num":2},
         {"dim":6,
          "col":[[-1, 1], [-1, 1], [-1, 1], [-1, 2], [-1, 2], [-1, 3], [-1, 4], [-1, 4]],
          "trans":[[j-1 for j in i] for i in [[1, 2, 3, 4, 5, 6, 7, 8], [2, 1, 4, 3, 6, 5, 8, 7], [3, 4, 5, 6, 7, 8, 1, 2], [4, 3, 6, 5, 8, 7, 2, 1], [5, 6, 7, 8, 1, 2, 3, 4], [6, 5, 8, 7, 2, 1, 4, 3], [7, 8, 1, 2, 3, 4, 5, 6], [8, 7, 2, 1, 4, 3, 6, 5]]],
          "rots":[[[j-1 for j in i] for i in t] for t in [[[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8], [4, 2, 3, 1, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8], [1, 5, 3, 4, 2, 6]], [[1, 2, 3, 4, 5, 6, 7, 8], [4, 5, 3, 1, 2, 6]], [[1, 2, 7, 8, 5, 6, 3, 4], [1, 2, 6, 4, 5, 3]], [[1, 2, 7, 8, 5, 6, 3, 4], [4, 2, 6, 1, 5, 3]], [[1, 2, 7, 8, 5, 6, 3, 4], [1, 5, 6, 4, 2, 3]], [[1, 2, 7, 8, 5, 6, 3, 4], [4, 5, 6, 1, 2, 3]]]],
          "num":3},
         {"dim":6,
          "col":[[-1,1],[-1,1],[-1,1],[-1,2],[-1,2],[-1,2],[-1,2],[-1,1],[-1,1]],
          "trans":[[j - 1 for j in i] for i in [[1,2,3,4,5,6,7,8,9], [3,1,2,6,4,5,9,7,8], [2,3,1,5,6,4,8,9,7],[7,8,9,1,2,3,4,5,6], [9,7,8,3,1,2,6,4,5], [8,9,7,2,3,1,5,6,4], [4,5,6,7,8,9,1,2,3], [6,4,5,9,7,8,3,1,2], [5,6,4,8,9,7,2,3,1]]],
          "rots":[[[j - 1 for j in i] for i in t] for t in [[[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6]], [[3,6,9,2,5,8,1,4,7],[3,4,2,1,5,6]], [[9,8,7,6,5,4,3,2,1],[2,1,4,3,5,6]], [[7,4,1,8,5,2,9,6,3],[4,3,1,2,5,6]], [[1,4,7,2,5,8,3,6,9],[3,4,1,2,6,5]], [[9,6,3,8,5,2,7,4,1],[4,3,2,1,6,5]], [[7,8,9,4,5,6,1,2,3],[1,2,4,3,6,5]], [[3,2,1,6,5,4,9,8,7],[2,1,3,4,6,5]]]],
          "num":2},
         {"dim":6,
          "col":[[-1,1],[-1,1],[-1,2],[-1,2],[-1,4],[-1,4],[-1,5],[-1,5]],
          "trans":[[j - 1 for j in i] for i in[[1,2,3,4,5,6,7,8], [2,1,4,3,6,5,8,7], [3,4,5,6,7,8,1,2], [4,3,6,5,8,7,2,1], [5,6,7,8,1,2,3,4], [6,5,8,7,2,1,4,3], [7,8,1,2,3,4,5,6], [8,7,2,1,4,3,6,5]]],
          "rots":[[[0,1,2,3,4,5,6,7],[0,1,2,3]],[[0,1,2,3,4,5,6,7],[2,1,0,3]],[[0,1,6,7,4,5,2,3],[0,3,2,1]],[[0,1,6,7,4,5,2,3],[2,3,0,1]]],
          "num":1},
         {"dim":6,
          "col":[[-3,1],[-3,1],[-3,1],[-3,1],[-3,1],[-3,1],[-3,1],[-3,1],[-3,1],[-3,1],[-3,2],[-3,2],[-3,2],[-3,2],[-3,2],[-3,2],[-3,2],[-3,2]],
          "trans":[[j - 1 for j in i] for i in[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1], [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1,2], [4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1,2,3], [5,6,7,8,9,10,11,12,13,14,15,16,17,18,1,2,3,4], [6,7,8,9,10,11,12,13,14,15,16,17,18,1,2,3,4,5], [7,8,9,10,11,12,13,14,15,16,17,18,1,2,3,4,5,6], [8,9,10,11,12,13,14,15,16,17,18,1,2,3,4,5,6,7], [9,10,11,12,13,14,15,16,17,18,1,2,3,4,5,6,7,8], [10,11,12,13,14,15,16,17,18,1,2,3,4,5,6,7,8,9], [11,12,13,14,15,16,17,18,1,2,3,4,5,6,7,8,9,10], [12,13,14,15,16,17,18,1,2,3,4,5,6,7,8,9,10,11], [13,14,15,16,17,18,1,2,3,4,5,6,7,8,9,10,11,12], [14,15,16,17,18,1,2,3,4,5,6,7,8,9,10,11,12,13], [15,16,17,18,1,2,3,4,5,6,7,8,9,10,11,12,13,14], [16,17,18,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [17,18,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [18,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]]],
          "rots":[[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],[0,1,2,3]],[[0,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],[2,3,0,2]]],
          "num":2},
         {"dim":6,
          "col":[[-1,3],[-1,2],[-1,3],[-1,1]],
          "trans":[[0,1,2,3],[1,2,3,0],[2,3,0,1],[3,0,1,2]],
          "rots":[[[0,1,2,3],[0,1,2,3]],[[0,1,2,3],[2,1,0,3]],[[0,3,2,1],[0,3,2,1]],[[0,3,2,1],[2,3,0,1]]],
          "num":3},
         {"dim":6,
          "col":[[-3,1],[-3,1],[-3,1],[-3,2],[-3,3],[-3,3],[-3,3],[-3,4]],
          "trans":[[0,1,2,3,4,5,6,7],[1,0,3,2,5,4,7,6],[2,3,4,5,6,7,0,1],[3,2,5,4,7,6,1,0],[4,5,6,7,0,1,2,3],[5,4,7,6,1,0,3,2],[6,7,0,1,2,3,4,5],[7,6,1,0,3,2,5,4]],
          "rots":[[[0,1,2,3,4,5,6,7],[0,1,2,3]],[[0,1,2,3,4,5,6,7],[2,1,0,3]],[[0,1,6,7,4,5,2,3],[0,3,2,1]],[[0,1,6,7,4,5,2,3],[2,3,0,1]]],
          "num":4},
         {"dim":6,
          "col":[[-1,1],[-1,2],[-1,3],[-1,4]],
          "trans":[[0,1,2,3],[1,0,3,2],[2,3,0,1],[3,2,1,0]],
          "rots":[[[0,1,2,3],[0,1,2,3]],[[0,1,2,3],[2,1,0,3]],[[0,1,2,3],[0,3,2,1]],[[0,1,2,3],[2,3,0,1]],[[0,3,2,1],[1,0,3,2]],[[0,3,2,1],[3,0,1,2]],[[0,3,2,1],[1,2,3,0]],[[0,3,2,1],[3,2,1,0]]],
          "num":1}]

c = 1
for case in cases:
    trans = case["trans"]
    rots = case["rots"]
    col = case["col"]
    numw = case["num"]

    Concs = _find_concentrations(col)
    (n_arrows,arrow_types,concs_w_arrows) = how_many_arrows(decorations)
    
    group = a_group_gen(trans,rots)
    coef = _coefficients(concs_w_arrows,sum(concs_w_arrows))
    tot = 1
    for co in coef:
        tot = tot*coe
        

    wanted = shuffle(range(1,tot+1))[:numw]

    configs = brancher(Concs,group,col,6,c,wanted)
    c += 1

# for i in range(1,11):
#     with open("get_loc.in.{}".format(str(i)), "r") as inf:
#         raw = inf.readline()
#     loc = [int(j) for j in raw.split()]

#     d = loc.index(-1)
#     print "i",i
    
#     with open("depth.out.{}".format(str(i)),"w+") as of:
#         of.write(str(d))
#     print d

# from tree import _invhash, _coefficients
# from random import randrange

# for i in range(1,21):
#     s = randrange(8,20)


#     concs = []
#     while s > 4:
#         val = randrange(1,s/2)
#         concs.append(val)
#         s -= val


#     branches = _coefficients(concs,sum(concs))

#     branch = []
#     for j in branches:
#         branch.append(randrange(0,j))
        
#     label = _invhash(branch,concs,sum(concs))

#     if len(concs) > 2:
#         d = randrange(1,len(concs)-1)
#     else:
#         d = 1
        
#     for j in range(len(label)):
#         if label[j] > d:
#             label[j] = 0

#     for j in range(len(branch)):
#         if j > d-1:
#             branch[j] = -1

#     with open("coloring_n.in.{}".format(str(i)),"w+") as cnf:
#         cnf.write(str(sum(concs)))
#     with open("coloring_loc.in.{}".format(str(i)),"w+") as clf:
#         for t in branch:
#             clf.write(str(t)+" ")
#     with open("coloring_colors.in.{}".format(str(i)),"w+") as ccf:
#         for t in concs:
#             ccf.write(str(t)+" ")
#     with open("coloring_labeling.out.{}".format(str(i)),"w+") as cof:
#         for t in label:
#             cof.write(str(t)+" ")
#     print "i", i
#     print "d", d
#     print "k",len(concs)
#     print "loc", branch
#     print "l",label
    
# from tree import _hash

# cases = [{"label":[1,2,3,4,5],"depth":1},{"label":[1,2,3,4,5],"depth":2},
#          {"label":[1,2,3,4,5],"depth":3},{"label":[1,2,3,4,5],"depth":4},
#          {"label":[1,2,3,4,5],"depth":5},{"label":[1,2,1,2,1,2],"depth":1},
#          {"label":[1,0,0,1,0,0],"depth":1},{"label":[0,0,2,2,1,0,1],"depth":2},
#          {"label":[0,0,0,1,1],"depth":1},{"label":[0,2,3,1,0,3],"depth":3},
#          {"label":[1,1,1,2,2,0,0,3],"depth":1},{"label":[1,1,1,2,2,0,0,3],"depth":3},
#          {"label":[1,3,2,5,2,3,1,4,2],"depth":5},{"label":[1,3,2,5,2,3,1,4,2],"depth":2},
#          {"label":[2,2,1,1,3,4,1],"depth":4},{"label":[2,2,1,1,3,4],"depth":2},
#          {"label":[0,0,0,1,0],"depth":1},{"label":[1,0,0,0,0],"depth":1},
#          {"label":[3,3,0,3,2,2,2,0,1,0,1],"depth":1},{"label":[3,3,0,3,2,2,2,0,1,0,1],"depth":2}]

# jj = 1
# for i in cases:
#     print jj
#     depth = i["depth"]
#     label = i["label"]
#     loc = []
#     for t in range(depth):
#         loc.append(1)
#     loc.append(-1)
#     with open("get_loc.in.{}".format(str(jj)),"w+") as locf:
#         for t in loc:
#             locf.write(str(t) + " ")
#     with open("get_loc_labeling.in.{}".format(str(jj)),"w+") as labf:
#         for t in label:
#             labf.write(str(t) + " ")
    
#     for j in range(len(label)):
#         if label[j] != depth:
#             label[j] = 0
#         elif label[j] == depth:
#             label[j] = 1
    
#     loc = _hash(label,depth)
#     with open("get_loc.out.{}".format(str(jj)), "w+") as outf:
#         outf.write(str(loc))
#     jj += 1
