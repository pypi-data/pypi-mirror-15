# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Node(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Node - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'obm_settings': 'list[ERRORUNKNOWN]',
            'type': 'str',
            'workflows': 'list[Graphobject]',
            'catalogs': 'list[Catalog]',
            'sku': 'str',
            'snmp_settings': 'object',
            'boot_settings': 'object',
            'ssh_settings': 'object',
            'auto_discover': 'bool',
            'relations': 'list[ERRORUNKNOWN]',
            'tags': 'list[ERRORUNKNOWN]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'obm_settings': 'obmSettings',
            'type': 'type',
            'workflows': 'workflows',
            'catalogs': 'catalogs',
            'sku': 'sku',
            'snmp_settings': 'snmpSettings',
            'boot_settings': 'bootSettings',
            'ssh_settings': 'sshSettings',
            'auto_discover': 'autoDiscover',
            'relations': 'relations',
            'tags': 'tags'
        }

        self._id = None
        self._name = None
        self._obm_settings = None
        self._type = None
        self._workflows = None
        self._catalogs = None
        self._sku = None
        self._snmp_settings = None
        self._boot_settings = None
        self._ssh_settings = None
        self._auto_discover = None
        self._relations = None
        self._tags = None

    @property
    def id(self):
        """
        Gets the id of this Node.


        :return: The id of this Node.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Node.


        :param id: The id of this Node.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Node.


        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Node.


        :param name: The name of this Node.
        :type: str
        """
        self._name = name

    @property
    def obm_settings(self):
        """
        Gets the obm_settings of this Node.


        :return: The obm_settings of this Node.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._obm_settings

    @obm_settings.setter
    def obm_settings(self, obm_settings):
        """
        Sets the obm_settings of this Node.


        :param obm_settings: The obm_settings of this Node.
        :type: list[ERRORUNKNOWN]
        """
        self._obm_settings = obm_settings

    @property
    def type(self):
        """
        Gets the type of this Node.


        :return: The type of this Node.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Node.


        :param type: The type of this Node.
        :type: str
        """
        self._type = type

    @property
    def workflows(self):
        """
        Gets the workflows of this Node.


        :return: The workflows of this Node.
        :rtype: list[Graphobject]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """
        Sets the workflows of this Node.


        :param workflows: The workflows of this Node.
        :type: list[Graphobject]
        """
        self._workflows = workflows

    @property
    def catalogs(self):
        """
        Gets the catalogs of this Node.


        :return: The catalogs of this Node.
        :rtype: list[Catalog]
        """
        return self._catalogs

    @catalogs.setter
    def catalogs(self, catalogs):
        """
        Sets the catalogs of this Node.


        :param catalogs: The catalogs of this Node.
        :type: list[Catalog]
        """
        self._catalogs = catalogs

    @property
    def sku(self):
        """
        Gets the sku of this Node.


        :return: The sku of this Node.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this Node.


        :param sku: The sku of this Node.
        :type: str
        """
        self._sku = sku

    @property
    def snmp_settings(self):
        """
        Gets the snmp_settings of this Node.


        :return: The snmp_settings of this Node.
        :rtype: object
        """
        return self._snmp_settings

    @snmp_settings.setter
    def snmp_settings(self, snmp_settings):
        """
        Sets the snmp_settings of this Node.


        :param snmp_settings: The snmp_settings of this Node.
        :type: object
        """
        self._snmp_settings = snmp_settings

    @property
    def boot_settings(self):
        """
        Gets the boot_settings of this Node.


        :return: The boot_settings of this Node.
        :rtype: object
        """
        return self._boot_settings

    @boot_settings.setter
    def boot_settings(self, boot_settings):
        """
        Sets the boot_settings of this Node.


        :param boot_settings: The boot_settings of this Node.
        :type: object
        """
        self._boot_settings = boot_settings

    @property
    def ssh_settings(self):
        """
        Gets the ssh_settings of this Node.


        :return: The ssh_settings of this Node.
        :rtype: object
        """
        return self._ssh_settings

    @ssh_settings.setter
    def ssh_settings(self, ssh_settings):
        """
        Sets the ssh_settings of this Node.


        :param ssh_settings: The ssh_settings of this Node.
        :type: object
        """
        self._ssh_settings = ssh_settings

    @property
    def auto_discover(self):
        """
        Gets the auto_discover of this Node.


        :return: The auto_discover of this Node.
        :rtype: bool
        """
        return self._auto_discover

    @auto_discover.setter
    def auto_discover(self, auto_discover):
        """
        Sets the auto_discover of this Node.


        :param auto_discover: The auto_discover of this Node.
        :type: bool
        """
        self._auto_discover = auto_discover

    @property
    def relations(self):
        """
        Gets the relations of this Node.


        :return: The relations of this Node.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """
        Sets the relations of this Node.


        :param relations: The relations of this Node.
        :type: list[ERRORUNKNOWN]
        """
        self._relations = relations

    @property
    def tags(self):
        """
        Gets the tags of this Node.


        :return: The tags of this Node.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Node.


        :param tags: The tags of this Node.
        :type: list[ERRORUNKNOWN]
        """
        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

