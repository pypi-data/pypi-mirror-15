Metadata-Version: 1.1
Name: autoargs
Version: 0.0.2
Summary: Automatic Arg parsing
Home-page: https://github.com/metaperture/autoargs
Author: Michael Tartre
Author-email: metaperture@gmail.com
License: BSD 3-Clause
Description: ## autoargs is argparse made easy
        
        Have you ever felt like using argparse pulled you out of your Pythonic comfort zone? Argparse lets you skip the boilerplate when making apis to the command line:
        
            >>> from autoargs import autocall, cmdable
            >>> def str_repeat(s: str, n: int):
            ...     print((s * n).strip())
            >>> autocall(str_repeat, ["args are easy!\n", "3"])
            args are easy!
            args are easy!
            args are easy!
            
            >>> @cmdable
            >>> def product(*args: float):
            ...     return functools.reduce(operator.mul, args, 1.0)
            >>> product.cmd(["5", "10", "0.5"])
            25.0
            
            >>> @cmdable
            >>> def aggregate(*args: float, op: {'sum', 'mul'}):
            ...     if op == "sum":
            ...         return sum(args)
            ...     elif op == "mul":
            ...         return product(*args)
            >>> aggregate.cmd(["--help"])
            usage: aggregate [-h] --op {sum,mul} [args [args ...]]
            
            positional arguments:
              args            float
            
            optional arguments:
              -h, --help      show this help message and exit
              --op {sum,mul}
            
            >>> aggregate.cmd("--op mul 1 2 3 4")
            24.0
        
        Want to expose all of your modules functions to the command line, with nice parsers? That should be easy, right?
        
            if __name__ == "__main__":
                main = autoargs.namespace_dispatcher(locals(), sys.argv[0], __all__, __doc__)
                autoargs.recursive_autocall(main, sys.argv[1:])
        
        And now, suddenly your module is exposed to the command line, and each of the functions in your `__all__` is exposed as a subparser.
        
        Some things to note:
         - All args coming in from the command line are by default strings. If you want something else, annotate the arg with a function taking a string and returning the type you want.
         - var kwargs are currently not supported (if you have any ideas on what the expected behavior of those should be, please comment on the github)
        
        ### TODO:
         - finish documentation
           - especially on recursive autocall and dispatchers (it's really cool, but a bit arcane)
         - add more examples
         - better readme...
         - custom class for annotating args that lets you do more than one thing at once
         - if you have any ideals, send me a note or open an issue on the github at https://github.com/metaperture/autoargs
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Utilities
Classifier: Development Status :: 3 - Alpha
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Software Development :: User Interfaces
Classifier: Topic :: System :: Shells
