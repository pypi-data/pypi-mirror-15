# -*- mode: python -*-
# Copyright (C) 2016-2016  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
''' Utility functions to read options from the environment. '''

__all__ = ['get_option']

from craftr import *


def get_option(name, inherit_global = True):
  ''' Reads the option *name* prefixed with the current module's
  identifier from the environment and returns its value. If the option
  is not set and *inherit_global* is True, it will also try to find
  *name* without the module's prefix. Returns None if the option does
  not exist at all.

  This function has an alias :meth:`get`. '''

  full_name = module.project_name + '.' + name
  try:
    value = environ[full_name]
  except KeyError:
    if inherit_global:
      value = environ.get(name, None)
    else:
      value = None
  return value


get = get_option
