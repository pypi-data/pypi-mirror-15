# -*- mode: python -*-
# Copyright (C) 2016  Niklas Rosenstein
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

__all__ = ['run', 'PythonTool', 'render_template']

from os import environ
from craftr import *
from craftr.ext import platform
from craftr.ext.compiler import gen_output

import abc
import craftr
import sys


def run(commands, args=(), inputs=(), outputs=None, cwd=None,
    pool=None, description=None, target_name=None):
  ''' This function creates a :class:`Target` that runs a custom command.
  The function is three different modes based on the first parameter.

  1. If *commands* is a :class:`Target`, that target must list exactly
     one file in its outputs and that file is assumed to be a binary and
     will be executed by the target created by this function. The *args*
     parameter may be a list of additional arguments for the program.
  2. If *commands* is a list, it is handled as a list of commands,
     never as a single command. Thus a string in the list represents a
     complete command, as does a list of strings (representing the command
     as its individual arguments).
  3. If *commands* is a string, it will be treated as a single command.

  If multiple commands need to be invoked,
  :class:`TargetBuilder.write_multicommand_file` is used to create a
  script to invoke multiple commands.

  __Examples__

  .. code-block:: python

    main = ld.link(
      output = 'main',
      inputs = objects,
    )
    run = rules.run(main, args = [path.local('testfile.dat')])

  .. code-block:: python

    run = rules.run([
      'command1 args11 args12 args13',
      ['command2', 'args21', 'args22', 'args23'],
    ], cwd = path.local('test'))

  :param commands: A :class:`Target`, string or list of strings/command lists.
  :param args: Additional program arguments when a :class:`Target` is
    specified for *commands*.
  :param inputs: A list of input files for the command. These can be
    referenced using the Ninja variable ``%in`` in the command(s).
  :param outputs: A list of outputs generated by the command. These
    can be referenced using the Ninja variable ``%out`` in the command(s).
  :param cwd: An optional working directory to switch to when executing
    the command(s). If None is passed, the build directory is used.
  :param pool: Override the default pool that the command is executed in.
    If a :class:`Target` is passed for *commands*, this will default to
    ``console``.
  :param description: Optional target description displayed when building
    with Ninja.
  :param target_name: An optional override for the return target's name.
  :return: A :class:`Target`.
  '''

  builder = TargetBuilder(inputs, [], {}, name = target_name)

  program = None
  if isinstance(commands, Target):
    assert len(commands.outputs) == 1, "Target for rules.run() must specify exactly one output file"
    program = path.abspath(commands.outputs[0])
    commands = [[program] + list(args)]
    pool = pool or 'console'
    builder.target_attrs['explicit'] = True
  elif isinstance(commands, str):
    commands = [commands]

  if len(commands) == 1:
    # We don't need a multi command file for a single command.
    command = commands[0]
    if cwd:
      if platform.name == platform.WIN32:
        command = ['cmd', '/c', 'cd', cwd, shell.safe('&&')] + command
      else:
        command = [shell.safe('('), 'cd', cwd, shell.safe('&&')] + command + [shell.safe(')')]
  else:
    command, program = builder.write_multicommand_file(commands, cwd=cwd)

  inputs = builder.inputs or program
  return builder.create_target(command, inputs, outputs, pool=pool, description=description)


class PythonTool(object):
  ''' Base class for Python tools. Python tools are class objects that
  can be invoked from Ninja through the Craftr RTS (Runtime Server)
  using socket communication and the ``craftr-rts-invoke`` command.

  .. note:: This class overrides ``__new__()`` and returns a
    :class:`Target` rather than an instance of :class:`PythonTool`.

  .. automethod:: __call__
  '''

  def __new__(cls, *args, **kwargs):
    instance = super().__new__(cls)
    instance.__init__(*args, **kwargs)
    builder = instance._builder
    del instance._builder
    session.rts_funcs[builder.fullname] = instance
    target = builder.create_target(
      ['craftr-rts-invoke', builder.fullname], outputs=instance._outputs)
    return target

  def __init__(self, inputs, outputs, frameworks=(), **kwargs):
    super().__init__()
    self._builder = TargetBuilder(inputs, frameworks, kwargs)
    self._outputs = outputs
    self.name = self._builder.fullname

  @abc.abstractmethod
  def __call__(self, args):
    ''' Called when the tool is invoked. *args* is a list of command-line
    arguments were passed additionally to ``craftr-rts-invoke``. This is
    just an empty list in most cases as the :class:`PythonTool` instance
    can save all data it needs in its attributes.

    .. important:: This method could be called in a threaded context.
      Don't import new modules and be thread-safe.
    '''


class render_template(PythonTool):
  ''' This is a simple Python tool that can render a template file
  to a new file given a set of key/value pairs. Variables in the template
  are references by `${KEY}$`. There is currently not escape mechanism
  implemented. '''

  def __init__(self, template, output, **context):
    super().__init__([template], [output])
    self.template = template
    self.output = output
    self.context = context

  def __call__(self, args):
    with open(self.template) as src:
      content = src.read()
    for key, value in self.context.items():
      key = '${' + key + '}$'
      content = content.replace(key, value)
    with open(self.output, 'w') as dst:
      dst.write(content)
