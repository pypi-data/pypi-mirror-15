.. currentmodule:: larch

==========================
1: MTC MNL Mode Choice
==========================

.. testsetup:: *

   import larch



This example is a mode choice model built using the MTC example dataset.
First we create the DB and Model objects:

.. testcode::

	d = larch.DB.Example('MTC')
	m = larch.Model(d)

ModelObject.utility.co(<idCO data column>,<alternative code>,[<parameter name>])
Add a linear component to the utility of the indicated alternative.
The data column is a string and can be any idCO data column or a pre-calculated 
value derived from one or more idCO data columns, or no data columns at all.
Note: there is no need to declare a parameter name seperately from this 
command. Default values will be assumed for parameters that are not previously
declared.

.. testcode::

	m.utility.co("1",2,"ASC_SR2")
	m.utility.co("1",3,"ASC_SR3P") 
	m.utility.co("1",4,"ASC_TRAN") 
	m.utility.co("1",5,"ASC_BIKE") 
	m.utility.co("1",6,"ASC_WALK") 
	m.utility.co("hhinc",2)
	m.utility.co("hhinc",3)
	m.utility.co("hhinc",4)
	m.utility.co("hhinc",5)
	m.utility.co("hhinc",6)

ModelObject.utility.ca(<idCA data column>,[<parameter name>])
Adds a linear component to the utility of the indicated alternative.
The data column is a string and can be any idCA data column or a pre-calculated 
value derived from one or more idCA data columns, or no data columns at all.
Note: there is no need to declare a parameter name seperately from this 
command. Default values will be assumed for parameters that are not previously
declared.

.. testcode::

	m.utility.ca("tottime")
	m.utility.ca("totcost")

ModelObject.option
A structure that defines certain options to be applied when estimating
models.

.. testcode::

	m.option.calc_std_errors = True


Having created this model, we can then estimate it:

.. doctest::
	:options: +ELLIPSIS, +NORMALIZE_WHITESPACE

	>>> m.estimate()
	<larch.core.runstats, success ...
	>>> m.loglike()
	-3626.18...

	>>> print(m)
	============================================================================================
	Model Parameter Estimates
	--------------------------------------------------------------------------------------------
	Parameter	InitValue   	FinalValue  	StdError    	t-Stat      	NullValue   
	ASC_SR2  	 0          	-2.17804    	 0.104638   	-20.815     	 0          
	ASC_SR3P 	 0          	-3.72513    	 0.177692   	-20.964     	 0          
	ASC_TRAN 	 0          	-0.670973   	 0.132591   	-5.06047    	 0          
	ASC_BIKE 	 0          	-2.37634    	 0.304502   	-7.80403    	 0          
	ASC_WALK 	 0          	-0.206814   	 0.1941     	-1.0655     	 0          
	hhinc#2  	 0          	-0.00217    	 0.00155329 	-1.39704    	 0          
	hhinc#3  	 0          	 0.000357656	 0.00253773 	 0.140935   	 0          
	hhinc#4  	 0          	-0.00528648 	 0.00182882 	-2.89064    	 0          
	hhinc#5  	 0          	-0.0128081  	 0.00532408 	-2.40568    	 0          
	hhinc#6  	 0          	-0.00968626 	 0.00303305 	-3.19358    	 0          
	tottime  	 0          	-0.0513404  	 0.00309941 	-16.5646    	 0          
	totcost  	 0          	-0.00492036 	 0.000238894	-20.5964    	 0          
	============================================================================================
	Model Estimation Statistics
	--------------------------------------------------------------------------------------------
	Log Likelihood at Convergence     	-3626.19
	Log Likelihood at Null Parameters 	-7309.60
	--------------------------------------------------------------------------------------------
	Rho Squared w.r.t. Null Parameters	0.504
	============================================================================================
	...


You can then access individual parameters from the model either by name or number
(using zero-based indexing).

.. doctest::
	:options: +ELLIPSIS, +NORMALIZE_WHITESPACE

	>>> m[0]
	ModelParameter('ASC_SR2', value=-2.17...)

	>>> m['totcost']
	ModelParameter('totcost', value=-0.00492...)


The :func:`len` function retrieves the number of parameters.

.. doctest::
	:options: +ELLIPSIS, +NORMALIZE_WHITESPACE

	>>> len(m)
	12


You can get a list of the parameter names in order.

.. doctest::
	:options: +ELLIPSIS, +NORMALIZE_WHITESPACE

	>>> m.parameter_names()
	['ASC_SR2', 'ASC_SR3P', 'ASC_TRAN', 'ASC_BIKE', 'ASC_WALK', 'hhinc#2',
	'hhinc#3', 'hhinc#4', 'hhinc#5', 'hhinc#6', 'tottime', 'totcost']

