# Copyright: 2014-2016 Tim Harder <radhermit@gmail.com>
# license GPL2/BSD 3

source "${PKGCORE_EBD_PATH}"/eapi/5.lib

PKGCORE_BANNED_FUNCS+=( einstall )
PKGCORE_EAPPLY_USER=false

get_libdir() { __get_libdir lib; }

in_iuse() {
	[[ $1 =~ ${PKGCORE_IUSE_EFFECTIVE} ]]
}

einstalldocs() {
	local docs PKGCORE_DOCDESTTREE=
	if ! docs=$(declare -p DOCS 2> /dev/null); then
		for docs in README* ChangeLog AUTHORS NEWS TODO CHANGES \
				THANKS BUGS FAQ CREDITS CHANGELOG; do
			if [[ -s ${docs} ]]; then
				dodoc "${docs}" || return $?
			fi
		done
	elif [[ ${docs} == "declare -a "* ]]; then
		if [[ ${#DOCS[@]} -gt 0 ]]; then
			dodoc -r "${DOCS[@]}" || return $?
		fi
	elif [[ -n ${DOCS} ]]; then
		dodoc -r ${DOCS} || return $?
	fi

	PKGCORE_DOCDESTTREE=html
	if ! docs=$(declare -p HTML_DOCS 2> /dev/null); then
		:
	elif [[ ${docs} == "declare -a "* ]]; then
		if [[ ${#HTML_DOCS[@]} -gt 0 ]]; then
			dodoc -r "${HTML_DOCS[@]}" || return $?
		fi
	elif [[ -n ${HTML_DOCS} ]]; then
		dodoc -r ${HTML_DOCS} || return $?
	fi

	return 0
}

eapply() {
	local -a options files
	local token end_options bad_options

	for token in "${@}"; do
		if [[ -n ${end_options} ]]; then
			files+=( "${token}" )
		elif [[ ${token} == -- ]]; then
			[[ ${#files[@]} -eq 0 ]] || bad_options=1
			end_options=1
		elif [[ ${token} == -* ]]; then
			[[ ${#files[@]} -eq 0 ]] || bad_options=1
			options+=( "${token}" )
		else
			files+=( "${token}" )
		fi
	done

	[[ -n ${bad_options} ]] && die "${FUNCNAME}: options must be specified before file arguments"
	[[ ${#files[@]} -eq 0 ]] && die "${FUNCNAME}: no patches or directories specified"

	__shopt_push -s nullglob
	__var_push LC_COLLATE=POSIX

	local -a paths patches
	local path f
	for path in "${files[@]}"; do
		if [[ -d ${path} ]]; then
			for f in "${path}"/*; do
				[[ -f ${f} ]] && [[ ${f} == *.diff || ${f} == *.patch ]] && paths+=( "${f}" )
			done
			[[ ${#paths[@]} -eq 0 ]] && die "${FUNCNAME}: no patches in directory: ${path}"
			patches+=( "${paths[@]}" )
		else
			patches+=( "${path}" )
		fi
	done

	__var_pop
	__shopt_pop

	local ret
	for f in "${patches[@]}"; do
		if [[ ${PKGCORE_DEBUG} -ge 1 ]]; then
			echo patch -p1 -f -s -g0 --no-backup-if-mismatch "${options[@]}" \< "${x}" 1>&2
		else
			ebegin "Applying ${f##*/}"
		fi
		patch -p1 -f -s -g0 --no-backup-if-mismatch "${options[@]}" < "${f}"
		ret=$?
		if ! eend "${ret}"; then
			${PKGCORE_NONFATAL} && return "${ret}"
			die "${FUNCNAME}: applying patch failed: ${f}"
		fi
	done

	return 0
}

eapply_user() {
	# Apply valid user patches, filenames must match *.diff or
	# *.patch to be included.
	#
	# valid patch directories:
	#   - ${CATEGORY}/${PF}(:${SLOT})
	#   - ${CATEGORY}/${P}(:${SLOT})
	#   - ${CATEGORY}/${PN}(:${SLOT})

	[[ ${EBUILD_PHASE} == "prepare" ]] || die "${FUNCNAME}: called during invalid phase: ${EBUILD_PHASE}"
	# return if eapply_user has already been called
	${PKGCORE_EAPPLY_USER} && return
	PKGCORE_EAPPLY_USER=true

	local patchroot=${ROOT:-/}etc/portage/patches
	local -a patchdirs

	__shopt_push -s nullglob
	__var_push LC_COLLATE=POSIX
	local dir f
	for dir in "${patchroot}"/${CATEGORY}/{${PF},${P},${PN}}{,:${SLOT%/*}}; do
		for f in "${dir}"/*; do
			if [[ -f ${f} ]] && [[ ${f} == *.diff || ${f} == *.patch ]]; then
				patchdirs+=( "${dir}" )
				break
			fi
		done
	done
	__var_pop
	__shopt_pop

	for dir in "${patchdirs[@]}"; do
		ewarn "Applying user patches: ${dir}"
		eapply "${dir}"
	done
}

__phase_post_src_prepare() {
	${PKGCORE_EAPPLY_USER} || die "eapply_user (or default) must be called in src_prepare()"
}

__phase_src_prepare() {
	local patches
	if patches=$(declare -p PATCHES 2> /dev/null); then
		if [[ ${patches} == "declare -a "* ]]; then
			[[ ${#PATCHES[@]} -gt 0 ]] && eapply "${PATCHES[@]}"
		else
			[[ -n ${PATCHES} ]] && eapply ${PATCHES}
		fi
	fi

	eapply_user
}

__phase_src_install() {
	if [[ -f Makefile || -f GNUmakefile || -f makefile ]]; then
		emake DESTDIR="${D}" install
	fi

	einstalldocs
}

:
