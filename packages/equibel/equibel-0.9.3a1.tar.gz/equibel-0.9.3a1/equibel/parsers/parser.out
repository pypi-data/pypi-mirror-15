Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> FORMULA
Rule 1     FORMULA -> ATOM
Rule 2     FORMULA -> BOOLEAN
Rule 3     FORMULA -> COMPOUND
Rule 4     FORMULA -> LPAREN FORMULA RPAREN
Rule 5     ATOM -> IDENTIFIER
Rule 6     ATOM -> INTEGER
Rule 7     BOOLEAN -> TRUE
Rule 8     BOOLEAN -> FALSE
Rule 9     COMPOUND -> NEGATION
Rule 10    COMPOUND -> CONJUNCTION
Rule 11    COMPOUND -> DISJUNCTION
Rule 12    COMPOUND -> IMPLICATION
Rule 13    COMPOUND -> EQUIVALENCE
Rule 14    NEGATION -> NEG FORMULA
Rule 15    CONJUNCTION -> FORMULA AND FORMULA
Rule 16    DISJUNCTION -> FORMULA OR FORMULA
Rule 17    IMPLICATION -> FORMULA IMPLIES FORMULA
Rule 18    EQUIVALENCE -> FORMULA EQUIV FORMULA

Terminals, with rules where they appear

AND                  : 15
EQUIV                : 18
FALSE                : 8
IDENTIFIER           : 5
IMPLIES              : 17
INTEGER              : 6
LPAREN               : 4
NEG                  : 14
OR                   : 16
RPAREN               : 4
TRUE                 : 7
error                : 

Nonterminals, with rules where they appear

ATOM                 : 1
BOOLEAN              : 2
COMPOUND             : 3
CONJUNCTION          : 10
DISJUNCTION          : 11
EQUIVALENCE          : 13
FORMULA              : 4 14 15 15 16 16 17 17 18 18 0
IMPLICATION          : 12
NEGATION             : 9

Parsing method: LALR

state 0

    (0) S' -> . FORMULA
    (1) FORMULA -> . ATOM
    (2) FORMULA -> . BOOLEAN
    (3) FORMULA -> . COMPOUND
    (4) FORMULA -> . LPAREN FORMULA RPAREN
    (5) ATOM -> . IDENTIFIER
    (6) ATOM -> . INTEGER
    (7) BOOLEAN -> . TRUE
    (8) BOOLEAN -> . FALSE
    (9) COMPOUND -> . NEGATION
    (10) COMPOUND -> . CONJUNCTION
    (11) COMPOUND -> . DISJUNCTION
    (12) COMPOUND -> . IMPLICATION
    (13) COMPOUND -> . EQUIVALENCE
    (14) NEGATION -> . NEG FORMULA
    (15) CONJUNCTION -> . FORMULA AND FORMULA
    (16) DISJUNCTION -> . FORMULA OR FORMULA
    (17) IMPLICATION -> . FORMULA IMPLIES FORMULA
    (18) EQUIVALENCE -> . FORMULA EQUIV FORMULA

    LPAREN          shift and go to state 9
    IDENTIFIER      shift and go to state 13
    INTEGER         shift and go to state 3
    TRUE            shift and go to state 14
    FALSE           shift and go to state 7
    NEG             shift and go to state 5

    EQUIVALENCE                    shift and go to state 1
    DISJUNCTION                    shift and go to state 15
    ATOM                           shift and go to state 4
    NEGATION                       shift and go to state 6
    BOOLEAN                        shift and go to state 8
    COMPOUND                       shift and go to state 10
    FORMULA                        shift and go to state 11
    IMPLICATION                    shift and go to state 12
    CONJUNCTION                    shift and go to state 2

state 1

    (13) COMPOUND -> EQUIVALENCE .

    AND             reduce using rule 13 (COMPOUND -> EQUIVALENCE .)
    OR              reduce using rule 13 (COMPOUND -> EQUIVALENCE .)
    IMPLIES         reduce using rule 13 (COMPOUND -> EQUIVALENCE .)
    EQUIV           reduce using rule 13 (COMPOUND -> EQUIVALENCE .)
    $end            reduce using rule 13 (COMPOUND -> EQUIVALENCE .)
    RPAREN          reduce using rule 13 (COMPOUND -> EQUIVALENCE .)


state 2

    (10) COMPOUND -> CONJUNCTION .

    AND             reduce using rule 10 (COMPOUND -> CONJUNCTION .)
    OR              reduce using rule 10 (COMPOUND -> CONJUNCTION .)
    IMPLIES         reduce using rule 10 (COMPOUND -> CONJUNCTION .)
    EQUIV           reduce using rule 10 (COMPOUND -> CONJUNCTION .)
    $end            reduce using rule 10 (COMPOUND -> CONJUNCTION .)
    RPAREN          reduce using rule 10 (COMPOUND -> CONJUNCTION .)


state 3

    (6) ATOM -> INTEGER .

    AND             reduce using rule 6 (ATOM -> INTEGER .)
    OR              reduce using rule 6 (ATOM -> INTEGER .)
    IMPLIES         reduce using rule 6 (ATOM -> INTEGER .)
    EQUIV           reduce using rule 6 (ATOM -> INTEGER .)
    $end            reduce using rule 6 (ATOM -> INTEGER .)
    RPAREN          reduce using rule 6 (ATOM -> INTEGER .)


state 4

    (1) FORMULA -> ATOM .

    AND             reduce using rule 1 (FORMULA -> ATOM .)
    OR              reduce using rule 1 (FORMULA -> ATOM .)
    IMPLIES         reduce using rule 1 (FORMULA -> ATOM .)
    EQUIV           reduce using rule 1 (FORMULA -> ATOM .)
    $end            reduce using rule 1 (FORMULA -> ATOM .)
    RPAREN          reduce using rule 1 (FORMULA -> ATOM .)


state 5

    (14) NEGATION -> NEG . FORMULA
    (1) FORMULA -> . ATOM
    (2) FORMULA -> . BOOLEAN
    (3) FORMULA -> . COMPOUND
    (4) FORMULA -> . LPAREN FORMULA RPAREN
    (5) ATOM -> . IDENTIFIER
    (6) ATOM -> . INTEGER
    (7) BOOLEAN -> . TRUE
    (8) BOOLEAN -> . FALSE
    (9) COMPOUND -> . NEGATION
    (10) COMPOUND -> . CONJUNCTION
    (11) COMPOUND -> . DISJUNCTION
    (12) COMPOUND -> . IMPLICATION
    (13) COMPOUND -> . EQUIVALENCE
    (14) NEGATION -> . NEG FORMULA
    (15) CONJUNCTION -> . FORMULA AND FORMULA
    (16) DISJUNCTION -> . FORMULA OR FORMULA
    (17) IMPLICATION -> . FORMULA IMPLIES FORMULA
    (18) EQUIVALENCE -> . FORMULA EQUIV FORMULA

    LPAREN          shift and go to state 9
    IDENTIFIER      shift and go to state 13
    INTEGER         shift and go to state 3
    TRUE            shift and go to state 14
    FALSE           shift and go to state 7
    NEG             shift and go to state 5

    EQUIVALENCE                    shift and go to state 1
    DISJUNCTION                    shift and go to state 15
    ATOM                           shift and go to state 4
    NEGATION                       shift and go to state 6
    BOOLEAN                        shift and go to state 8
    COMPOUND                       shift and go to state 10
    FORMULA                        shift and go to state 16
    IMPLICATION                    shift and go to state 12
    CONJUNCTION                    shift and go to state 2

state 6

    (9) COMPOUND -> NEGATION .

    AND             reduce using rule 9 (COMPOUND -> NEGATION .)
    OR              reduce using rule 9 (COMPOUND -> NEGATION .)
    IMPLIES         reduce using rule 9 (COMPOUND -> NEGATION .)
    EQUIV           reduce using rule 9 (COMPOUND -> NEGATION .)
    $end            reduce using rule 9 (COMPOUND -> NEGATION .)
    RPAREN          reduce using rule 9 (COMPOUND -> NEGATION .)


state 7

    (8) BOOLEAN -> FALSE .

    AND             reduce using rule 8 (BOOLEAN -> FALSE .)
    OR              reduce using rule 8 (BOOLEAN -> FALSE .)
    IMPLIES         reduce using rule 8 (BOOLEAN -> FALSE .)
    EQUIV           reduce using rule 8 (BOOLEAN -> FALSE .)
    $end            reduce using rule 8 (BOOLEAN -> FALSE .)
    RPAREN          reduce using rule 8 (BOOLEAN -> FALSE .)


state 8

    (2) FORMULA -> BOOLEAN .

    AND             reduce using rule 2 (FORMULA -> BOOLEAN .)
    OR              reduce using rule 2 (FORMULA -> BOOLEAN .)
    IMPLIES         reduce using rule 2 (FORMULA -> BOOLEAN .)
    EQUIV           reduce using rule 2 (FORMULA -> BOOLEAN .)
    $end            reduce using rule 2 (FORMULA -> BOOLEAN .)
    RPAREN          reduce using rule 2 (FORMULA -> BOOLEAN .)


state 9

    (4) FORMULA -> LPAREN . FORMULA RPAREN
    (1) FORMULA -> . ATOM
    (2) FORMULA -> . BOOLEAN
    (3) FORMULA -> . COMPOUND
    (4) FORMULA -> . LPAREN FORMULA RPAREN
    (5) ATOM -> . IDENTIFIER
    (6) ATOM -> . INTEGER
    (7) BOOLEAN -> . TRUE
    (8) BOOLEAN -> . FALSE
    (9) COMPOUND -> . NEGATION
    (10) COMPOUND -> . CONJUNCTION
    (11) COMPOUND -> . DISJUNCTION
    (12) COMPOUND -> . IMPLICATION
    (13) COMPOUND -> . EQUIVALENCE
    (14) NEGATION -> . NEG FORMULA
    (15) CONJUNCTION -> . FORMULA AND FORMULA
    (16) DISJUNCTION -> . FORMULA OR FORMULA
    (17) IMPLICATION -> . FORMULA IMPLIES FORMULA
    (18) EQUIVALENCE -> . FORMULA EQUIV FORMULA

    LPAREN          shift and go to state 9
    IDENTIFIER      shift and go to state 13
    INTEGER         shift and go to state 3
    TRUE            shift and go to state 14
    FALSE           shift and go to state 7
    NEG             shift and go to state 5

    EQUIVALENCE                    shift and go to state 1
    DISJUNCTION                    shift and go to state 15
    ATOM                           shift and go to state 4
    NEGATION                       shift and go to state 6
    BOOLEAN                        shift and go to state 8
    COMPOUND                       shift and go to state 10
    FORMULA                        shift and go to state 17
    IMPLICATION                    shift and go to state 12
    CONJUNCTION                    shift and go to state 2

state 10

    (3) FORMULA -> COMPOUND .

    AND             reduce using rule 3 (FORMULA -> COMPOUND .)
    OR              reduce using rule 3 (FORMULA -> COMPOUND .)
    IMPLIES         reduce using rule 3 (FORMULA -> COMPOUND .)
    EQUIV           reduce using rule 3 (FORMULA -> COMPOUND .)
    $end            reduce using rule 3 (FORMULA -> COMPOUND .)
    RPAREN          reduce using rule 3 (FORMULA -> COMPOUND .)


state 11

    (0) S' -> FORMULA .
    (15) CONJUNCTION -> FORMULA . AND FORMULA
    (16) DISJUNCTION -> FORMULA . OR FORMULA
    (17) IMPLICATION -> FORMULA . IMPLIES FORMULA
    (18) EQUIVALENCE -> FORMULA . EQUIV FORMULA

    AND             shift and go to state 18
    OR              shift and go to state 20
    IMPLIES         shift and go to state 19
    EQUIV           shift and go to state 21


state 12

    (12) COMPOUND -> IMPLICATION .

    AND             reduce using rule 12 (COMPOUND -> IMPLICATION .)
    OR              reduce using rule 12 (COMPOUND -> IMPLICATION .)
    IMPLIES         reduce using rule 12 (COMPOUND -> IMPLICATION .)
    EQUIV           reduce using rule 12 (COMPOUND -> IMPLICATION .)
    $end            reduce using rule 12 (COMPOUND -> IMPLICATION .)
    RPAREN          reduce using rule 12 (COMPOUND -> IMPLICATION .)


state 13

    (5) ATOM -> IDENTIFIER .

    AND             reduce using rule 5 (ATOM -> IDENTIFIER .)
    OR              reduce using rule 5 (ATOM -> IDENTIFIER .)
    IMPLIES         reduce using rule 5 (ATOM -> IDENTIFIER .)
    EQUIV           reduce using rule 5 (ATOM -> IDENTIFIER .)
    $end            reduce using rule 5 (ATOM -> IDENTIFIER .)
    RPAREN          reduce using rule 5 (ATOM -> IDENTIFIER .)


state 14

    (7) BOOLEAN -> TRUE .

    AND             reduce using rule 7 (BOOLEAN -> TRUE .)
    OR              reduce using rule 7 (BOOLEAN -> TRUE .)
    IMPLIES         reduce using rule 7 (BOOLEAN -> TRUE .)
    EQUIV           reduce using rule 7 (BOOLEAN -> TRUE .)
    $end            reduce using rule 7 (BOOLEAN -> TRUE .)
    RPAREN          reduce using rule 7 (BOOLEAN -> TRUE .)


state 15

    (11) COMPOUND -> DISJUNCTION .

    AND             reduce using rule 11 (COMPOUND -> DISJUNCTION .)
    OR              reduce using rule 11 (COMPOUND -> DISJUNCTION .)
    IMPLIES         reduce using rule 11 (COMPOUND -> DISJUNCTION .)
    EQUIV           reduce using rule 11 (COMPOUND -> DISJUNCTION .)
    $end            reduce using rule 11 (COMPOUND -> DISJUNCTION .)
    RPAREN          reduce using rule 11 (COMPOUND -> DISJUNCTION .)


state 16

    (14) NEGATION -> NEG FORMULA .
    (15) CONJUNCTION -> FORMULA . AND FORMULA
    (16) DISJUNCTION -> FORMULA . OR FORMULA
    (17) IMPLICATION -> FORMULA . IMPLIES FORMULA
    (18) EQUIVALENCE -> FORMULA . EQUIV FORMULA

    AND             reduce using rule 14 (NEGATION -> NEG FORMULA .)
    OR              reduce using rule 14 (NEGATION -> NEG FORMULA .)
    IMPLIES         reduce using rule 14 (NEGATION -> NEG FORMULA .)
    EQUIV           reduce using rule 14 (NEGATION -> NEG FORMULA .)
    $end            reduce using rule 14 (NEGATION -> NEG FORMULA .)
    RPAREN          reduce using rule 14 (NEGATION -> NEG FORMULA .)

  ! AND             [ shift and go to state 18 ]
  ! OR              [ shift and go to state 20 ]
  ! IMPLIES         [ shift and go to state 19 ]
  ! EQUIV           [ shift and go to state 21 ]


state 17

    (4) FORMULA -> LPAREN FORMULA . RPAREN
    (15) CONJUNCTION -> FORMULA . AND FORMULA
    (16) DISJUNCTION -> FORMULA . OR FORMULA
    (17) IMPLICATION -> FORMULA . IMPLIES FORMULA
    (18) EQUIVALENCE -> FORMULA . EQUIV FORMULA

    RPAREN          shift and go to state 22
    AND             shift and go to state 18
    OR              shift and go to state 20
    IMPLIES         shift and go to state 19
    EQUIV           shift and go to state 21


state 18

    (15) CONJUNCTION -> FORMULA AND . FORMULA
    (1) FORMULA -> . ATOM
    (2) FORMULA -> . BOOLEAN
    (3) FORMULA -> . COMPOUND
    (4) FORMULA -> . LPAREN FORMULA RPAREN
    (5) ATOM -> . IDENTIFIER
    (6) ATOM -> . INTEGER
    (7) BOOLEAN -> . TRUE
    (8) BOOLEAN -> . FALSE
    (9) COMPOUND -> . NEGATION
    (10) COMPOUND -> . CONJUNCTION
    (11) COMPOUND -> . DISJUNCTION
    (12) COMPOUND -> . IMPLICATION
    (13) COMPOUND -> . EQUIVALENCE
    (14) NEGATION -> . NEG FORMULA
    (15) CONJUNCTION -> . FORMULA AND FORMULA
    (16) DISJUNCTION -> . FORMULA OR FORMULA
    (17) IMPLICATION -> . FORMULA IMPLIES FORMULA
    (18) EQUIVALENCE -> . FORMULA EQUIV FORMULA

    LPAREN          shift and go to state 9
    IDENTIFIER      shift and go to state 13
    INTEGER         shift and go to state 3
    TRUE            shift and go to state 14
    FALSE           shift and go to state 7
    NEG             shift and go to state 5

    EQUIVALENCE                    shift and go to state 1
    DISJUNCTION                    shift and go to state 15
    ATOM                           shift and go to state 4
    NEGATION                       shift and go to state 6
    BOOLEAN                        shift and go to state 8
    COMPOUND                       shift and go to state 10
    FORMULA                        shift and go to state 23
    IMPLICATION                    shift and go to state 12
    CONJUNCTION                    shift and go to state 2

state 19

    (17) IMPLICATION -> FORMULA IMPLIES . FORMULA
    (1) FORMULA -> . ATOM
    (2) FORMULA -> . BOOLEAN
    (3) FORMULA -> . COMPOUND
    (4) FORMULA -> . LPAREN FORMULA RPAREN
    (5) ATOM -> . IDENTIFIER
    (6) ATOM -> . INTEGER
    (7) BOOLEAN -> . TRUE
    (8) BOOLEAN -> . FALSE
    (9) COMPOUND -> . NEGATION
    (10) COMPOUND -> . CONJUNCTION
    (11) COMPOUND -> . DISJUNCTION
    (12) COMPOUND -> . IMPLICATION
    (13) COMPOUND -> . EQUIVALENCE
    (14) NEGATION -> . NEG FORMULA
    (15) CONJUNCTION -> . FORMULA AND FORMULA
    (16) DISJUNCTION -> . FORMULA OR FORMULA
    (17) IMPLICATION -> . FORMULA IMPLIES FORMULA
    (18) EQUIVALENCE -> . FORMULA EQUIV FORMULA

    LPAREN          shift and go to state 9
    IDENTIFIER      shift and go to state 13
    INTEGER         shift and go to state 3
    TRUE            shift and go to state 14
    FALSE           shift and go to state 7
    NEG             shift and go to state 5

    EQUIVALENCE                    shift and go to state 1
    DISJUNCTION                    shift and go to state 15
    ATOM                           shift and go to state 4
    NEGATION                       shift and go to state 6
    BOOLEAN                        shift and go to state 8
    COMPOUND                       shift and go to state 10
    FORMULA                        shift and go to state 24
    IMPLICATION                    shift and go to state 12
    CONJUNCTION                    shift and go to state 2

state 20

    (16) DISJUNCTION -> FORMULA OR . FORMULA
    (1) FORMULA -> . ATOM
    (2) FORMULA -> . BOOLEAN
    (3) FORMULA -> . COMPOUND
    (4) FORMULA -> . LPAREN FORMULA RPAREN
    (5) ATOM -> . IDENTIFIER
    (6) ATOM -> . INTEGER
    (7) BOOLEAN -> . TRUE
    (8) BOOLEAN -> . FALSE
    (9) COMPOUND -> . NEGATION
    (10) COMPOUND -> . CONJUNCTION
    (11) COMPOUND -> . DISJUNCTION
    (12) COMPOUND -> . IMPLICATION
    (13) COMPOUND -> . EQUIVALENCE
    (14) NEGATION -> . NEG FORMULA
    (15) CONJUNCTION -> . FORMULA AND FORMULA
    (16) DISJUNCTION -> . FORMULA OR FORMULA
    (17) IMPLICATION -> . FORMULA IMPLIES FORMULA
    (18) EQUIVALENCE -> . FORMULA EQUIV FORMULA

    LPAREN          shift and go to state 9
    IDENTIFIER      shift and go to state 13
    INTEGER         shift and go to state 3
    TRUE            shift and go to state 14
    FALSE           shift and go to state 7
    NEG             shift and go to state 5

    EQUIVALENCE                    shift and go to state 1
    DISJUNCTION                    shift and go to state 15
    ATOM                           shift and go to state 4
    NEGATION                       shift and go to state 6
    BOOLEAN                        shift and go to state 8
    COMPOUND                       shift and go to state 10
    FORMULA                        shift and go to state 25
    IMPLICATION                    shift and go to state 12
    CONJUNCTION                    shift and go to state 2

state 21

    (18) EQUIVALENCE -> FORMULA EQUIV . FORMULA
    (1) FORMULA -> . ATOM
    (2) FORMULA -> . BOOLEAN
    (3) FORMULA -> . COMPOUND
    (4) FORMULA -> . LPAREN FORMULA RPAREN
    (5) ATOM -> . IDENTIFIER
    (6) ATOM -> . INTEGER
    (7) BOOLEAN -> . TRUE
    (8) BOOLEAN -> . FALSE
    (9) COMPOUND -> . NEGATION
    (10) COMPOUND -> . CONJUNCTION
    (11) COMPOUND -> . DISJUNCTION
    (12) COMPOUND -> . IMPLICATION
    (13) COMPOUND -> . EQUIVALENCE
    (14) NEGATION -> . NEG FORMULA
    (15) CONJUNCTION -> . FORMULA AND FORMULA
    (16) DISJUNCTION -> . FORMULA OR FORMULA
    (17) IMPLICATION -> . FORMULA IMPLIES FORMULA
    (18) EQUIVALENCE -> . FORMULA EQUIV FORMULA

    LPAREN          shift and go to state 9
    IDENTIFIER      shift and go to state 13
    INTEGER         shift and go to state 3
    TRUE            shift and go to state 14
    FALSE           shift and go to state 7
    NEG             shift and go to state 5

    EQUIVALENCE                    shift and go to state 1
    DISJUNCTION                    shift and go to state 15
    ATOM                           shift and go to state 4
    NEGATION                       shift and go to state 6
    BOOLEAN                        shift and go to state 8
    COMPOUND                       shift and go to state 10
    FORMULA                        shift and go to state 26
    IMPLICATION                    shift and go to state 12
    CONJUNCTION                    shift and go to state 2

state 22

    (4) FORMULA -> LPAREN FORMULA RPAREN .

    AND             reduce using rule 4 (FORMULA -> LPAREN FORMULA RPAREN .)
    OR              reduce using rule 4 (FORMULA -> LPAREN FORMULA RPAREN .)
    IMPLIES         reduce using rule 4 (FORMULA -> LPAREN FORMULA RPAREN .)
    EQUIV           reduce using rule 4 (FORMULA -> LPAREN FORMULA RPAREN .)
    $end            reduce using rule 4 (FORMULA -> LPAREN FORMULA RPAREN .)
    RPAREN          reduce using rule 4 (FORMULA -> LPAREN FORMULA RPAREN .)


state 23

    (15) CONJUNCTION -> FORMULA AND FORMULA .
    (15) CONJUNCTION -> FORMULA . AND FORMULA
    (16) DISJUNCTION -> FORMULA . OR FORMULA
    (17) IMPLICATION -> FORMULA . IMPLIES FORMULA
    (18) EQUIVALENCE -> FORMULA . EQUIV FORMULA

    AND             reduce using rule 15 (CONJUNCTION -> FORMULA AND FORMULA .)
    OR              reduce using rule 15 (CONJUNCTION -> FORMULA AND FORMULA .)
    IMPLIES         reduce using rule 15 (CONJUNCTION -> FORMULA AND FORMULA .)
    EQUIV           reduce using rule 15 (CONJUNCTION -> FORMULA AND FORMULA .)
    $end            reduce using rule 15 (CONJUNCTION -> FORMULA AND FORMULA .)
    RPAREN          reduce using rule 15 (CONJUNCTION -> FORMULA AND FORMULA .)

  ! AND             [ shift and go to state 18 ]
  ! OR              [ shift and go to state 20 ]
  ! IMPLIES         [ shift and go to state 19 ]
  ! EQUIV           [ shift and go to state 21 ]


state 24

    (17) IMPLICATION -> FORMULA IMPLIES FORMULA .
    (15) CONJUNCTION -> FORMULA . AND FORMULA
    (16) DISJUNCTION -> FORMULA . OR FORMULA
    (17) IMPLICATION -> FORMULA . IMPLIES FORMULA
    (18) EQUIVALENCE -> FORMULA . EQUIV FORMULA

    EQUIV           reduce using rule 17 (IMPLICATION -> FORMULA IMPLIES FORMULA .)
    $end            reduce using rule 17 (IMPLICATION -> FORMULA IMPLIES FORMULA .)
    RPAREN          reduce using rule 17 (IMPLICATION -> FORMULA IMPLIES FORMULA .)
    AND             shift and go to state 18
    OR              shift and go to state 20
    IMPLIES         shift and go to state 19

  ! AND             [ reduce using rule 17 (IMPLICATION -> FORMULA IMPLIES FORMULA .) ]
  ! OR              [ reduce using rule 17 (IMPLICATION -> FORMULA IMPLIES FORMULA .) ]
  ! IMPLIES         [ reduce using rule 17 (IMPLICATION -> FORMULA IMPLIES FORMULA .) ]
  ! EQUIV           [ shift and go to state 21 ]


state 25

    (16) DISJUNCTION -> FORMULA OR FORMULA .
    (15) CONJUNCTION -> FORMULA . AND FORMULA
    (16) DISJUNCTION -> FORMULA . OR FORMULA
    (17) IMPLICATION -> FORMULA . IMPLIES FORMULA
    (18) EQUIVALENCE -> FORMULA . EQUIV FORMULA

    RPAREN          reduce using rule 16 (DISJUNCTION -> FORMULA OR FORMULA .)
    OR              reduce using rule 16 (DISJUNCTION -> FORMULA OR FORMULA .)
    IMPLIES         reduce using rule 16 (DISJUNCTION -> FORMULA OR FORMULA .)
    EQUIV           reduce using rule 16 (DISJUNCTION -> FORMULA OR FORMULA .)
    $end            reduce using rule 16 (DISJUNCTION -> FORMULA OR FORMULA .)
    AND             shift and go to state 18

  ! AND             [ reduce using rule 16 (DISJUNCTION -> FORMULA OR FORMULA .) ]
  ! OR              [ shift and go to state 20 ]
  ! IMPLIES         [ shift and go to state 19 ]
  ! EQUIV           [ shift and go to state 21 ]


state 26

    (18) EQUIVALENCE -> FORMULA EQUIV FORMULA .
    (15) CONJUNCTION -> FORMULA . AND FORMULA
    (16) DISJUNCTION -> FORMULA . OR FORMULA
    (17) IMPLICATION -> FORMULA . IMPLIES FORMULA
    (18) EQUIVALENCE -> FORMULA . EQUIV FORMULA

    $end            reduce using rule 18 (EQUIVALENCE -> FORMULA EQUIV FORMULA .)
    RPAREN          reduce using rule 18 (EQUIVALENCE -> FORMULA EQUIV FORMULA .)
    AND             shift and go to state 18
    OR              shift and go to state 20
    IMPLIES         shift and go to state 19
    EQUIV           shift and go to state 21

  ! AND             [ reduce using rule 18 (EQUIVALENCE -> FORMULA EQUIV FORMULA .) ]
  ! OR              [ reduce using rule 18 (EQUIVALENCE -> FORMULA EQUIV FORMULA .) ]
  ! IMPLIES         [ reduce using rule 18 (EQUIVALENCE -> FORMULA EQUIV FORMULA .) ]
  ! EQUIV           [ reduce using rule 18 (EQUIVALENCE -> FORMULA EQUIV FORMULA .) ]

