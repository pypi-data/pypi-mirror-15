# coding: utf-8

"""
RedfishvApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RedfishvApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_service_root(self, **kwargs):
        """
        retrieve list of root-level resources
        This object represents the root Redfish service.  All values for resources described  by this schema shall comply to the requirements as described in the Redfish specification. This object represents the root Redfish service.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_service_root(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ServiceRoot100ServiceRoot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_root" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='ServiceRoot100ServiceRoot',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_account_service(self, **kwargs):
        """
        retrieve account service information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account_service(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: AccountService100AccountService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_service" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/AccountService'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='AccountService100AccountService',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_accounts(self, **kwargs):
        """
        retrieve information about the accounts
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_accounts(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ManagerAccountCollectionManagerAccountCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/AccountService/Accounts'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='ManagerAccountCollectionManagerAccountCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_account(self, payload, **kwargs):
        """
        create a user with the provided information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_account(payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ManagerAccount100ManagerAccount payload:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_account" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `create_account`")

        resource_path = '/AccountService/Accounts'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_account(self, name, **kwargs):
        """
        retrieve information about the specified account
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_account(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :return: ManagerAccount100ManagerAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_account`")

        resource_path = '/AccountService/Accounts/{name}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='ManagerAccount100ManagerAccount',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def remove_account(self, name, **kwargs):
        """
        delete the specified account
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.remove_account(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_account" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `remove_account`")

        resource_path = '/AccountService/Accounts/{name}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def modify_account(self, name, payload, **kwargs):
        """
        update the user with the provided information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_account(name, payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name:  (required)
        :param ManagerAccount100ManagerAccount payload:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'payload']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_account" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `modify_account`")
        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `modify_account`")

        resource_path = '/AccountService/Accounts/{name}'.replace('{format}', 'json')
        method = 'PATCH'

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_roles(self, **kwargs):
        """
        retrieve list of roles
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_roles(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: RoleCollectionRoleCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_roles" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/AccountService/Roles'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='RoleCollectionRoleCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_role(self, identifier, **kwargs):
        """
        retrieve privileges for a role
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_role(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: Role100Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_role`")

        resource_path = '/AccountService/Roles/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Role100Role',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_chassis(self, **kwargs):
        """
        retrieve list of physical components
        Defines a collection of physical components managed by the service

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_chassis(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ChassisCollectionChassisCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_chassis" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/Chassis'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='ChassisCollectionChassisCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_chassis(self, identifier, **kwargs):
        """
        retrieve specific information for a physical component
        Retrieves a detailed information catalog for the physical component  specified by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_chassis(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: Chassis100Chassis
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chassis" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_chassis`")

        resource_path = '/Chassis/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Chassis100Chassis',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_power(self, identifier, **kwargs):
        """
        Retrieve power characteristics of a chassis
        defines a collection of power elements contained within a resource.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_power(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: Power100Power
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_power" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_power`")

        resource_path = '/Chassis/{identifier}/Power'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Power100Power',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_thermal(self, identifier, **kwargs):
        """
        Retrieve thermal characteristics of a chassis
        defines a collection of thermal elements contained within a resource.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_thermal(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: Thermal100Thermal
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_thermal" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_thermal`")

        resource_path = '/Chassis/{identifier}/Thermal'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Thermal100Thermal',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def event_service_root(self, **kwargs):
        """
        retrieve list of policies used by event service listeners
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.event_service_root(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: EventService100EventService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method event_service_root" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/EventService'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='EventService100EventService',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def test_event(self, **kwargs):
        """
        submit a test event action
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.test_event(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Body body: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_event" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/EventService/Actions/EventService.SubmitTestEvent'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_events_collection(self, **kwargs):
        """
        retrieve collection of subscribed events
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_collection(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: EventDestinationCollectionEventDestinationCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_collection" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/EventService/Subscriptions'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='EventDestinationCollectionEventDestinationCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_subscription(self, payload, **kwargs):
        """
        retrieve collection of subscribed events
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_subscription(payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EventDestination100EventDestination payload:  (required)
        :return: EventDestinationCollectionEventDestinationCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `create_subscription`")

        resource_path = '/EventService/Subscriptions'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='EventDestinationCollectionEventDestinationCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_event(self, index, **kwargs):
        """
        retrieve specific event subscription
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event(index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index:  (required)
        :return: EventDestination100EventDestination
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'index' is set
        if ('index' not in params) or (params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_event`")

        resource_path = '/EventService/Subscriptions/{index}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='EventDestination100EventDestination',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_event(self, index, **kwargs):
        """
        delete specific event subscription
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_event(index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str index:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['index']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_event" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'index' is set
        if ('index' not in params) or (params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `delete_event`")

        resource_path = '/EventService/Subscriptions/{index}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'index' in params:
            path_params['index'] = params['index']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_managers(self, **kwargs):
        """
        retrieve list of management servers
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_managers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ManagerCollectionManagerCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_managers" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/Managers'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='ManagerCollectionManagerCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_manager(self, identifier, **kwargs):
        """
        retrieve list of management servers
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_manager(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: Manager100Manager
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_manager" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_manager`")

        resource_path = '/Managers/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Manager100Manager',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_manager_ethernet_interfaces(self, identifier, **kwargs):
        """
        retrieve information about the ethernet interfaces
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_manager_ethernet_interfaces(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: EthernetInterfaceCollectionEthernetInterfaceCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_manager_ethernet_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_manager_ethernet_interfaces`")

        resource_path = '/Managers/{identifier}/EthernetInterfaces'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='EthernetInterfaceCollectionEthernetInterfaceCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_manager_ethernet_interface(self, identifier, index, **kwargs):
        """
        retrieve information about the specified ethernet interface
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_manager_ethernet_interface(identifier, index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :param str index:  (required)
        :return: EthernetInterface100EthernetInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'index']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_manager_ethernet_interface" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_manager_ethernet_interface`")
        # verify the required parameter 'index' is set
        if ('index' not in params) or (params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_manager_ethernet_interface`")

        resource_path = '/Managers/{identifier}/EthernetInterfaces/{index}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']
        if 'index' in params:
            path_params['index'] = params['index']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='EthernetInterface100EthernetInterface',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def unimplemented(self, identifier, index, **kwargs):
        """
        retrieve information about the serial interface
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unimplemented(identifier, index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :param str index:  (required)
        :return: SerialInterface100SerialInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'index']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unimplemented" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `unimplemented`")
        # verify the required parameter 'index' is set
        if ('index' not in params) or (params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `unimplemented`")

        resource_path = '/Managers/{identifier}/SerialInterfaces/{index}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']
        if 'index' in params:
            path_params['index'] = params['index']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SerialInterface100SerialInterface',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def unimplemented_1(self, identifier, index, **kwargs):
        """
        retrieve information about the virtual media
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unimplemented_1(identifier, index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :param str index:  (required)
        :return: VirtualMedia100VirtualMedia
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'index']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unimplemented_1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `unimplemented_1`")
        # verify the required parameter 'index' is set
        if ('index' not in params) or (params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `unimplemented_1`")

        resource_path = '/Managers/{identifier}/VirtualMedia/{index}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']
        if 'index' in params:
            path_params['index'] = params['index']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='VirtualMedia100VirtualMedia',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_registry(self, **kwargs):
        """
        Retrieve list of registries
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_registry(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: MessageRegistryFileCollectionMessageRegistryFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_registry" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/Registries'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='MessageRegistryFileCollectionMessageRegistryFileCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_registry_file_contents(self, identifier, **kwargs):
        """
        retrieve the content of a specific registry
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registry_file_contents(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: MessageRegistryFile100MessageRegistryFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registry_file_contents" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_registry_file_contents`")

        resource_path = '/Registries/en/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='MessageRegistryFile100MessageRegistryFile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_registry_file(self, identifier, **kwargs):
        """
        Retrieve information on a specific registry
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_registry_file(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: MessageRegistryFile100MessageRegistryFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registry_file" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_registry_file`")

        resource_path = '/Registries/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='MessageRegistryFile100MessageRegistryFile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_schema_content(self, identifier, **kwargs):
        """
        display the content of a schema json
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_schema_content(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: JsonSchemaFile100JsonSchemaFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema_content" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_schema_content`")

        resource_path = '/SchemaStore/en/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='JsonSchemaFile100JsonSchemaFile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_schemas(self, **kwargs):
        """
        retrieve list of schemas
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_schemas(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: JsonSchemaFileCollectionJsonSchemaFileCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_schemas" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/Schemas'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='JsonSchemaFileCollectionJsonSchemaFileCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_schema(self, identifier, **kwargs):
        """
        retrieve information for a specific schema
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_schema(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: JsonSchemaFile100JsonSchemaFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schema" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_schema`")

        resource_path = '/Schemas/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='JsonSchemaFile100JsonSchemaFile',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_session_service(self, **kwargs):
        """
        retrieve a list of sessions
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_session_service(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SessionService100SessionService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_session_service" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/SessionService'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SessionService100SessionService',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sessions(self, **kwargs):
        """
        retrieve a sessions description
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sessions(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SessionCollectionSessionCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sessions" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/SessionService/Sessions'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SessionCollectionSessionCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def post_session(self, payload, **kwargs):
        """
        create a new session
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_session(payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Session100Session payload:  (required)
        :return: Session100Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payload']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_session" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `post_session`")

        resource_path = '/SessionService/Sessions'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Session100Session',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_session_info(self, identifier, **kwargs):
        """
        retrieve session information
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_session_info(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: Session100Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_session_info" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_session_info`")

        resource_path = '/SessionService/Sessions/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Session100Session',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def do_logout_session(self, identifier, **kwargs):
        """
        logout of the session
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.do_logout_session(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: Session100Session
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method do_logout_session" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `do_logout_session`")

        resource_path = '/SessionService/Sessions/{identifier}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Session100Session',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_systems(self, **kwargs):
        """
        retrieve list of computer systems
        retrieve list of computer systems

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_systems(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: ComputerSystemCollectionComputerSystemCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_systems" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/Systems'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='ComputerSystemCollectionComputerSystemCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_system(self, identifier, **kwargs):
        """
        retrieve information for a specific computer systems (physical and/or virtual)
        defines a computer system and its respective properties.  A computer system represents a  machine (physical or virtual) and the local resources such as memory, cpu and other  devices that can be accessed from that machine.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_system(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier: node identifier (required)
        :return: ComputerSystem100ComputerSystem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_system`")

        resource_path = '/Systems/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='ComputerSystem100ComputerSystem',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_reset_types(self, identifier, **kwargs):
        """
        retrieve the list of reset types for the specified compute node
        Retrieve  a list of valid reset types for the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_reset_types(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: RackHDResetActionResetAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_reset_types" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_reset_types`")

        resource_path = '/Systems/{identifier}/Actions/ComputerSystem.Reset'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='RackHDResetActionResetAction',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def do_reset(self, identifier, payload, **kwargs):
        """
        reset a node
        Perform the reset specified in the post data arguments on the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.do_reset(identifier, payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :param RackHDResetActionResetAction payload:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'payload']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method do_reset" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `do_reset`")
        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `do_reset`")

        resource_path = '/Systems/{identifier}/Actions/ComputerSystem.Reset'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_boot_image(self, identifier, **kwargs):
        """
        retrieve the list of boot image types for the specified compute node
        Retrieve  a list of valid boot image types for the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_boot_image(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: RackHDBootImageBootImageList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_boot_image" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_boot_image`")

        resource_path = '/Systems/{identifier}/Actions/RackHD.BootImage'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='RackHDBootImageBootImageList',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def do_boot_image(self, identifier, payload, **kwargs):
        """
        install a boot image on a node
        Perform the boot image installation specified in the post data arguments on  the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.do_boot_image(identifier, payload, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :param RackHDBootImageBootImage payload:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'payload']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method do_boot_image" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `do_boot_image`")
        # verify the required parameter 'payload' is set
        if ('payload' not in params) or (params['payload'] is None):
            raise ValueError("Missing the required parameter `payload` when calling `do_boot_image`")

        resource_path = '/Systems/{identifier}/Actions/RackHD.BootImage'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'payload' in params:
            body_params = params['payload']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def unimplemented_2(self, identifier, **kwargs):
        """
        retrieve the simple storage collection
        Defines a collection of ethernet interfaces that are present on the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unimplemented_2(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: EthernetInterfaceCollectionEthernetInterfaceCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unimplemented_2" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `unimplemented_2`")

        resource_path = '/Systems/{identifier}/EthernetInterfaces'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='EthernetInterfaceCollectionEthernetInterfaceCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def unimplemented_3(self, identifier, index, **kwargs):
        """
        Retrieve the ethernet interface by device identifier
        Defines an ethernet interface present on the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unimplemented_3(identifier, index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :param str index:  (required)
        :return: EthernetInterface100EthernetInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'index']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unimplemented_3" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `unimplemented_3`")
        # verify the required parameter 'index' is set
        if ('index' not in params) or (params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `unimplemented_3`")

        resource_path = '/Systems/{identifier}/EthernetInterfaces/{index}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']
        if 'index' in params:
            path_params['index'] = params['index']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='EthernetInterface100EthernetInterface',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_log_service(self, identifier, **kwargs):
        """
        retrieve list of the logs for a computer system
        Defines a collection of log services that are available for the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_log_service(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: LogServiceCollectionLogServiceCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_log_service" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_log_service`")

        resource_path = '/Systems/{identifier}/LogServices'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='LogServiceCollectionLogServiceCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sel_log_service(self, identifier, **kwargs):
        """
        retrieve list of the logs for a computer system
        Defines a collection of SEL entries for the system described by identifier.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sel_log_service(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: LogService100LogService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sel_log_service" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_sel_log_service`")

        resource_path = '/Systems/{identifier}/LogServices/sel'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='LogService100LogService',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_sel_log_service_entries(self, identifier, **kwargs):
        """
        retrieve list of the logs entries for associated for log service
        Defines a collection of entries for the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_sel_log_service_entries(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: LogEntryCollectionLogEntryCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sel_log_service_entries" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_sel_log_service_entries`")

        resource_path = '/Systems/{identifier}/LogServices/sel/Entries'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='LogEntryCollectionLogEntryCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_sel_log_service_entry(self, identifier, entry_id, **kwargs):
        """
        retrieve log entry by logId associated for log service
        Defines a log entry specified by entryId within the LogService of the specified type for the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_sel_log_service_entry(identifier, entry_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :param str entry_id:  (required)
        :return: LogEntry100LogEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'entry_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sel_log_service_entry" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_sel_log_service_entry`")
        # verify the required parameter 'entry_id' is set
        if ('entry_id' not in params) or (params['entry_id'] is None):
            raise ValueError("Missing the required parameter `entry_id` when calling `get_sel_log_service_entry`")

        resource_path = '/Systems/{identifier}/LogServices/sel/Entries/{entryId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']
        if 'entry_id' in params:
            path_params['entryId'] = params['entry_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='LogEntry100LogEntry',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_system_processors(self, identifier, **kwargs):
        """
        retrieve the processor collection for the specified system identifier
        defines a collection of processors contained within a resource.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_system_processors(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: ProcessorCollectionProcessorCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_system_processors" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_system_processors`")

        resource_path = '/Systems/{identifier}/Processors'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='ProcessorCollectionProcessorCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_system_processor(self, identifier, socket, **kwargs):
        """
        retrieve a specified processor for the specified system identifier
        This represents the properties of a processor attached to a System.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_system_processor(identifier, socket, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :param str socket:  (required)
        :return: Processor100Processor
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'socket']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_processor" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_system_processor`")
        # verify the required parameter 'socket' is set
        if ('socket' not in params) or (params['socket'] is None):
            raise ValueError("Missing the required parameter `socket` when calling `get_system_processor`")

        resource_path = '/Systems/{identifier}/Processors/{socket}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']
        if 'socket' in params:
            path_params['socket'] = params['socket']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Processor100Processor',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_simple_storage(self, identifier, **kwargs):
        """
        retrieve the simple storage collection
        Defines a collection of simple storage collections that are present on the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_simple_storage(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: SimpleStorageCollectionSimpleStorageCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_simple_storage" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `list_simple_storage`")

        resource_path = '/Systems/{identifier}/SimpleStorage'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SimpleStorageCollectionSimpleStorageCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_simple_storage(self, identifier, index, **kwargs):
        """
        Retrieve the simple storage collection by device identifier
        Defines a collection of storage devices on the device specified by identifier that are present on the system described by identifier

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_simple_storage(identifier, index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :param str index:  (required)
        :return: SimpleStorage100SimpleStorage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier', 'index']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_simple_storage" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_simple_storage`")
        # verify the required parameter 'index' is set
        if ('index' not in params) or (params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_simple_storage`")

        resource_path = '/Systems/{identifier}/SimpleStorage/{index}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']
        if 'index' in params:
            path_params['index'] = params['index']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='SimpleStorage100SimpleStorage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def task_service_root(self, **kwargs):
        """
        retrieve list of all tasks
        This object represents the root Redfish service.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.task_service_root(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: TaskService100TaskService
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method task_service_root" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/TaskService'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='TaskService100TaskService',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_system_tasks(self, identifier, **kwargs):
        """
        retrieve list of tasks per system Id
        This object represents the root Redfish service.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_system_tasks(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: TaskCollectionTaskCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system_tasks" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_system_tasks`")

        resource_path = '/TaskService/Oem/Tasks/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='TaskCollectionTaskCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def list_tasks(self, **kwargs):
        """
        retrieve list of all tasks
        This object represents the root Redfish service.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_tasks(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: TaskCollectionTaskCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_tasks" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/TaskService/Tasks'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='TaskCollectionTaskCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_task(self, identifier, **kwargs):
        """
        retrieve a task entry by task Id
        This object represents the root Redfish service.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_task(identifier, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str identifier:  (required)
        :return: Task100Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['identifier']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_task" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'identifier' is set
        if ('identifier' not in params) or (params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_task`")

        resource_path = '/TaskService/Tasks/{identifier}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='Task100Task',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
