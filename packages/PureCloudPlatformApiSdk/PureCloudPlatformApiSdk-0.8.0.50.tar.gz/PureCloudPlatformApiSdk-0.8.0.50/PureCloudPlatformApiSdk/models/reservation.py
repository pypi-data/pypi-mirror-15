# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Reservation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Reservation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'reserved_tn': 'str',
            'reservation_expires': 'datetime',
            'phone_number_type': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'reserved_tn': 'reservedTn',
            'reservation_expires': 'reservationExpires',
            'phone_number_type': 'phoneNumberType'
        }

        self._id = None
        self._reserved_tn = None
        self._reservation_expires = None
        self._phone_number_type = None

    @property
    def id(self):
        """
        Gets the id of this Reservation.


        :return: The id of this Reservation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Reservation.


        :param id: The id of this Reservation.
        :type: str
        """
        self._id = id

    @property
    def reserved_tn(self):
        """
        Gets the reserved_tn of this Reservation.


        :return: The reserved_tn of this Reservation.
        :rtype: str
        """
        return self._reserved_tn

    @reserved_tn.setter
    def reserved_tn(self, reserved_tn):
        """
        Sets the reserved_tn of this Reservation.


        :param reserved_tn: The reserved_tn of this Reservation.
        :type: str
        """
        self._reserved_tn = reserved_tn

    @property
    def reservation_expires(self):
        """
        Gets the reservation_expires of this Reservation.
        Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The reservation_expires of this Reservation.
        :rtype: datetime
        """
        return self._reservation_expires

    @reservation_expires.setter
    def reservation_expires(self, reservation_expires):
        """
        Sets the reservation_expires of this Reservation.
        Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param reservation_expires: The reservation_expires of this Reservation.
        :type: datetime
        """
        self._reservation_expires = reservation_expires

    @property
    def phone_number_type(self):
        """
        Gets the phone_number_type of this Reservation.
        The type of phone number (eg us-domestic, toll-free, etc).

        :return: The phone_number_type of this Reservation.
        :rtype: str
        """
        return self._phone_number_type

    @phone_number_type.setter
    def phone_number_type(self, phone_number_type):
        """
        Sets the phone_number_type of this Reservation.
        The type of phone number (eg us-domestic, toll-free, etc).

        :param phone_number_type: The phone_number_type of this Reservation.
        :type: str
        """
        allowed_values = ["TOLL_FREE", "CN_DOMESTIC", "US_DOMESTIC"]
        if phone_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_number_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._phone_number_type = phone_number_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

