# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class WorkItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        WorkItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'work_item_exec_id': 'str',
            'work_item_config_id': 'str',
            'work_item_name': 'str'
        }

        self.attribute_map = {
            'work_item_exec_id': 'workItemExecId',
            'work_item_config_id': 'workItemConfigId',
            'work_item_name': 'workItemName'
        }

        self._work_item_exec_id = None
        self._work_item_config_id = None
        self._work_item_name = None

    @property
    def work_item_exec_id(self):
        """
        Gets the work_item_exec_id of this WorkItem.
        The work item execution id.

        :return: The work_item_exec_id of this WorkItem.
        :rtype: str
        """
        return self._work_item_exec_id

    @work_item_exec_id.setter
    def work_item_exec_id(self, work_item_exec_id):
        """
        Sets the work_item_exec_id of this WorkItem.
        The work item execution id.

        :param work_item_exec_id: The work_item_exec_id of this WorkItem.
        :type: str
        """
        self._work_item_exec_id = work_item_exec_id

    @property
    def work_item_config_id(self):
        """
        Gets the work_item_config_id of this WorkItem.
        The work item definition id.

        :return: The work_item_config_id of this WorkItem.
        :rtype: str
        """
        return self._work_item_config_id

    @work_item_config_id.setter
    def work_item_config_id(self, work_item_config_id):
        """
        Sets the work_item_config_id of this WorkItem.
        The work item definition id.

        :param work_item_config_id: The work_item_config_id of this WorkItem.
        :type: str
        """
        self._work_item_config_id = work_item_config_id

    @property
    def work_item_name(self):
        """
        Gets the work_item_name of this WorkItem.
        The work item displayable name.

        :return: The work_item_name of this WorkItem.
        :rtype: str
        """
        return self._work_item_name

    @work_item_name.setter
    def work_item_name(self, work_item_name):
        """
        Sets the work_item_name of this WorkItem.
        The work item displayable name.

        :param work_item_name: The work_item_name of this WorkItem.
        :type: str
        """
        self._work_item_name = work_item_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

