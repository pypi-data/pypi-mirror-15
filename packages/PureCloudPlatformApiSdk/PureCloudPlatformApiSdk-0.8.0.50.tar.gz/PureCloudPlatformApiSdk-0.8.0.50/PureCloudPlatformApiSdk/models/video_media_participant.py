# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class VideoMediaParticipant(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VideoMediaParticipant - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'address': 'str',
            'start_time': 'datetime',
            'connected_time': 'datetime',
            'end_time': 'datetime',
            'start_hold_time': 'datetime',
            'purpose': 'str',
            'state': 'str',
            'direction': 'str',
            'disconnect_type': 'str',
            'held': 'bool',
            'wrapup_required': 'bool',
            'wrapup_prompt': 'str',
            'user': 'UriReference',
            'queue': 'UriReference',
            'attributes': 'dict(str, str)',
            'error_info': 'ErrorBody',
            'script': 'UriReference',
            'wrapup_timeout_ms': 'int',
            'wrapup_skipped': 'bool',
            'audio_muted': 'bool',
            'video_muted': 'bool',
            'sharing_screen': 'bool',
            'peer_count': 'int',
            'context': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'address': 'address',
            'start_time': 'startTime',
            'connected_time': 'connectedTime',
            'end_time': 'endTime',
            'start_hold_time': 'startHoldTime',
            'purpose': 'purpose',
            'state': 'state',
            'direction': 'direction',
            'disconnect_type': 'disconnectType',
            'held': 'held',
            'wrapup_required': 'wrapupRequired',
            'wrapup_prompt': 'wrapupPrompt',
            'user': 'user',
            'queue': 'queue',
            'attributes': 'attributes',
            'error_info': 'errorInfo',
            'script': 'script',
            'wrapup_timeout_ms': 'wrapupTimeoutMs',
            'wrapup_skipped': 'wrapupSkipped',
            'audio_muted': 'audioMuted',
            'video_muted': 'videoMuted',
            'sharing_screen': 'sharingScreen',
            'peer_count': 'peerCount',
            'context': 'context'
        }

        self._id = None
        self._name = None
        self._address = None
        self._start_time = None
        self._connected_time = None
        self._end_time = None
        self._start_hold_time = None
        self._purpose = None
        self._state = None
        self._direction = None
        self._disconnect_type = None
        self._held = False
        self._wrapup_required = False
        self._wrapup_prompt = None
        self._user = None
        self._queue = None
        self._attributes = None
        self._error_info = None
        self._script = None
        self._wrapup_timeout_ms = None
        self._wrapup_skipped = False
        self._audio_muted = False
        self._video_muted = False
        self._sharing_screen = False
        self._peer_count = None
        self._context = None

    @property
    def id(self):
        """
        Gets the id of this VideoMediaParticipant.
        The unique participant ID.

        :return: The id of this VideoMediaParticipant.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VideoMediaParticipant.
        The unique participant ID.

        :param id: The id of this VideoMediaParticipant.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this VideoMediaParticipant.
        The display friendly name of the participant.

        :return: The name of this VideoMediaParticipant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VideoMediaParticipant.
        The display friendly name of the participant.

        :param name: The name of this VideoMediaParticipant.
        :type: str
        """
        self._name = name

    @property
    def address(self):
        """
        Gets the address of this VideoMediaParticipant.
        The participant address.

        :return: The address of this VideoMediaParticipant.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this VideoMediaParticipant.
        The participant address.

        :param address: The address of this VideoMediaParticipant.
        :type: str
        """
        self._address = address

    @property
    def start_time(self):
        """
        Gets the start_time of this VideoMediaParticipant.
        The time when this participant joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The start_time of this VideoMediaParticipant.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this VideoMediaParticipant.
        The time when this participant joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param start_time: The start_time of this VideoMediaParticipant.
        :type: datetime
        """
        self._start_time = start_time

    @property
    def connected_time(self):
        """
        Gets the connected_time of this VideoMediaParticipant.
        The time when this participant went connected on the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The connected_time of this VideoMediaParticipant.
        :rtype: datetime
        """
        return self._connected_time

    @connected_time.setter
    def connected_time(self, connected_time):
        """
        Sets the connected_time of this VideoMediaParticipant.
        The time when this participant went connected on the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param connected_time: The connected_time of this VideoMediaParticipant.
        :type: datetime
        """
        self._connected_time = connected_time

    @property
    def end_time(self):
        """
        Gets the end_time of this VideoMediaParticipant.
        The time when this participant when disconnected on the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The end_time of this VideoMediaParticipant.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this VideoMediaParticipant.
        The time when this participant when disconnected on the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param end_time: The end_time of this VideoMediaParticipant.
        :type: datetime
        """
        self._end_time = end_time

    @property
    def start_hold_time(self):
        """
        Gets the start_hold_time of this VideoMediaParticipant.
        The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :return: The start_hold_time of this VideoMediaParticipant.
        :rtype: datetime
        """
        return self._start_hold_time

    @start_hold_time.setter
    def start_hold_time(self, start_hold_time):
        """
        Sets the start_hold_time of this VideoMediaParticipant.
        The time when this participant's hold started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ

        :param start_hold_time: The start_hold_time of this VideoMediaParticipant.
        :type: datetime
        """
        self._start_hold_time = start_hold_time

    @property
    def purpose(self):
        """
        Gets the purpose of this VideoMediaParticipant.
        The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr

        :return: The purpose of this VideoMediaParticipant.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """
        Sets the purpose of this VideoMediaParticipant.
        The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr

        :param purpose: The purpose of this VideoMediaParticipant.
        :type: str
        """
        self._purpose = purpose

    @property
    def state(self):
        """
        Gets the state of this VideoMediaParticipant.
        The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting

        :return: The state of this VideoMediaParticipant.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this VideoMediaParticipant.
        The participant's state.  Values can be: 'alerting', 'connected', 'disconnected', 'dialing', 'contacting

        :param state: The state of this VideoMediaParticipant.
        :type: str
        """
        allowed_values = ["ALERTING", "DIALING", "CONTACTING", "OFFERING", "CONNECTED", "DISCONNECTED", "TERMINATED", "CONVERTING", "UPLOADING", "TRANSMITTING", "NONE"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state`, must be one of {0}"
                .format(allowed_values)
            )
        self._state = state

    @property
    def direction(self):
        """
        Gets the direction of this VideoMediaParticipant.
        The participant's direction.  Values can be: 'inbound' or 'outbound'

        :return: The direction of this VideoMediaParticipant.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this VideoMediaParticipant.
        The participant's direction.  Values can be: 'inbound' or 'outbound'

        :param direction: The direction of this VideoMediaParticipant.
        :type: str
        """
        allowed_values = ["INBOUND", "OUTBOUND"]
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction`, must be one of {0}"
                .format(allowed_values)
            )
        self._direction = direction

    @property
    def disconnect_type(self):
        """
        Gets the disconnect_type of this VideoMediaParticipant.
        The reason the participant was disconnected from the conversation.

        :return: The disconnect_type of this VideoMediaParticipant.
        :rtype: str
        """
        return self._disconnect_type

    @disconnect_type.setter
    def disconnect_type(self, disconnect_type):
        """
        Sets the disconnect_type of this VideoMediaParticipant.
        The reason the participant was disconnected from the conversation.

        :param disconnect_type: The disconnect_type of this VideoMediaParticipant.
        :type: str
        """
        allowed_values = ["ENDPOINT", "CLIENT", "SYSTEM", "TRANSFER", "TRANSFER_CONFERENCE", "TRANSFER_CONSULT", "ERROR", "PEER", "OTHER"]
        if disconnect_type not in allowed_values:
            raise ValueError(
                "Invalid value for `disconnect_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._disconnect_type = disconnect_type

    @property
    def held(self):
        """
        Gets the held of this VideoMediaParticipant.
        Value is true when the participant is on hold.

        :return: The held of this VideoMediaParticipant.
        :rtype: bool
        """
        return self._held

    @held.setter
    def held(self, held):
        """
        Sets the held of this VideoMediaParticipant.
        Value is true when the participant is on hold.

        :param held: The held of this VideoMediaParticipant.
        :type: bool
        """
        self._held = held

    @property
    def wrapup_required(self):
        """
        Gets the wrapup_required of this VideoMediaParticipant.
        Value is true when the participant requires wrap-up.

        :return: The wrapup_required of this VideoMediaParticipant.
        :rtype: bool
        """
        return self._wrapup_required

    @wrapup_required.setter
    def wrapup_required(self, wrapup_required):
        """
        Sets the wrapup_required of this VideoMediaParticipant.
        Value is true when the participant requires wrap-up.

        :param wrapup_required: The wrapup_required of this VideoMediaParticipant.
        :type: bool
        """
        self._wrapup_required = wrapup_required

    @property
    def wrapup_prompt(self):
        """
        Gets the wrapup_prompt of this VideoMediaParticipant.
        The wrap-up prompt indicating the type of wrap-up to be performed.

        :return: The wrapup_prompt of this VideoMediaParticipant.
        :rtype: str
        """
        return self._wrapup_prompt

    @wrapup_prompt.setter
    def wrapup_prompt(self, wrapup_prompt):
        """
        Sets the wrapup_prompt of this VideoMediaParticipant.
        The wrap-up prompt indicating the type of wrap-up to be performed.

        :param wrapup_prompt: The wrapup_prompt of this VideoMediaParticipant.
        :type: str
        """
        self._wrapup_prompt = wrapup_prompt

    @property
    def user(self):
        """
        Gets the user of this VideoMediaParticipant.
        The PureCloud user for this participant.

        :return: The user of this VideoMediaParticipant.
        :rtype: UriReference
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this VideoMediaParticipant.
        The PureCloud user for this participant.

        :param user: The user of this VideoMediaParticipant.
        :type: UriReference
        """
        self._user = user

    @property
    def queue(self):
        """
        Gets the queue of this VideoMediaParticipant.
        The PureCloud queue for this participant.

        :return: The queue of this VideoMediaParticipant.
        :rtype: UriReference
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """
        Sets the queue of this VideoMediaParticipant.
        The PureCloud queue for this participant.

        :param queue: The queue of this VideoMediaParticipant.
        :type: UriReference
        """
        self._queue = queue

    @property
    def attributes(self):
        """
        Gets the attributes of this VideoMediaParticipant.
        A list of ad-hoc attributes for the participant.

        :return: The attributes of this VideoMediaParticipant.
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this VideoMediaParticipant.
        A list of ad-hoc attributes for the participant.

        :param attributes: The attributes of this VideoMediaParticipant.
        :type: dict(str, str)
        """
        self._attributes = attributes

    @property
    def error_info(self):
        """
        Gets the error_info of this VideoMediaParticipant.
        If the conversation ends in error, contains additional error details.

        :return: The error_info of this VideoMediaParticipant.
        :rtype: ErrorBody
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info):
        """
        Sets the error_info of this VideoMediaParticipant.
        If the conversation ends in error, contains additional error details.

        :param error_info: The error_info of this VideoMediaParticipant.
        :type: ErrorBody
        """
        self._error_info = error_info

    @property
    def script(self):
        """
        Gets the script of this VideoMediaParticipant.
        The Engage script that should be used by this participant.

        :return: The script of this VideoMediaParticipant.
        :rtype: UriReference
        """
        return self._script

    @script.setter
    def script(self, script):
        """
        Sets the script of this VideoMediaParticipant.
        The Engage script that should be used by this participant.

        :param script: The script of this VideoMediaParticipant.
        :type: UriReference
        """
        self._script = script

    @property
    def wrapup_timeout_ms(self):
        """
        Gets the wrapup_timeout_ms of this VideoMediaParticipant.
        The amount of time the participant has to complete wrap-up.

        :return: The wrapup_timeout_ms of this VideoMediaParticipant.
        :rtype: int
        """
        return self._wrapup_timeout_ms

    @wrapup_timeout_ms.setter
    def wrapup_timeout_ms(self, wrapup_timeout_ms):
        """
        Sets the wrapup_timeout_ms of this VideoMediaParticipant.
        The amount of time the participant has to complete wrap-up.

        :param wrapup_timeout_ms: The wrapup_timeout_ms of this VideoMediaParticipant.
        :type: int
        """
        self._wrapup_timeout_ms = wrapup_timeout_ms

    @property
    def wrapup_skipped(self):
        """
        Gets the wrapup_skipped of this VideoMediaParticipant.
        Value is true when the participant has skipped wrap-up.

        :return: The wrapup_skipped of this VideoMediaParticipant.
        :rtype: bool
        """
        return self._wrapup_skipped

    @wrapup_skipped.setter
    def wrapup_skipped(self, wrapup_skipped):
        """
        Sets the wrapup_skipped of this VideoMediaParticipant.
        Value is true when the participant has skipped wrap-up.

        :param wrapup_skipped: The wrapup_skipped of this VideoMediaParticipant.
        :type: bool
        """
        self._wrapup_skipped = wrapup_skipped

    @property
    def audio_muted(self):
        """
        Gets the audio_muted of this VideoMediaParticipant.
        Value is true when audio is muted.

        :return: The audio_muted of this VideoMediaParticipant.
        :rtype: bool
        """
        return self._audio_muted

    @audio_muted.setter
    def audio_muted(self, audio_muted):
        """
        Sets the audio_muted of this VideoMediaParticipant.
        Value is true when audio is muted.

        :param audio_muted: The audio_muted of this VideoMediaParticipant.
        :type: bool
        """
        self._audio_muted = audio_muted

    @property
    def video_muted(self):
        """
        Gets the video_muted of this VideoMediaParticipant.
        Value is true when video is muted.

        :return: The video_muted of this VideoMediaParticipant.
        :rtype: bool
        """
        return self._video_muted

    @video_muted.setter
    def video_muted(self, video_muted):
        """
        Sets the video_muted of this VideoMediaParticipant.
        Value is true when video is muted.

        :param video_muted: The video_muted of this VideoMediaParticipant.
        :type: bool
        """
        self._video_muted = video_muted

    @property
    def sharing_screen(self):
        """
        Gets the sharing_screen of this VideoMediaParticipant.
        Value is true when screen sharing is enabled.

        :return: The sharing_screen of this VideoMediaParticipant.
        :rtype: bool
        """
        return self._sharing_screen

    @sharing_screen.setter
    def sharing_screen(self, sharing_screen):
        """
        Sets the sharing_screen of this VideoMediaParticipant.
        Value is true when screen sharing is enabled.

        :param sharing_screen: The sharing_screen of this VideoMediaParticipant.
        :type: bool
        """
        self._sharing_screen = sharing_screen

    @property
    def peer_count(self):
        """
        Gets the peer_count of this VideoMediaParticipant.
        The number of peers of this participant.

        :return: The peer_count of this VideoMediaParticipant.
        :rtype: int
        """
        return self._peer_count

    @peer_count.setter
    def peer_count(self, peer_count):
        """
        Sets the peer_count of this VideoMediaParticipant.
        The number of peers of this participant.

        :param peer_count: The peer_count of this VideoMediaParticipant.
        :type: int
        """
        self._peer_count = peer_count

    @property
    def context(self):
        """
        Gets the context of this VideoMediaParticipant.
        The context for this participant.

        :return: The context of this VideoMediaParticipant.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this VideoMediaParticipant.
        The context for this participant.

        :param context: The context of this VideoMediaParticipant.
        :type: str
        """
        self._context = context

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

