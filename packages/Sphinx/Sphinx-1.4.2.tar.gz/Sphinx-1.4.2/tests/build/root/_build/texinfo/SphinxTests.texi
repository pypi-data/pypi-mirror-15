\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename SphinxTests.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 1.4.1+/a162c01.@*
@end ifinfo
@settitle Sphinx Tests
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
@quotation
Sphinx <Tests> 0.6alpha1, May 25, 2016

Georg Brandl \and someone else

Copyright @copyright{} 2010-2016, Georg Brandl & Team
@end quotation

@end copying

@titlepage
@title Sphinx Tests
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top Sphinx Tests
@insertcopying
@end ifnottex

@c %**start of body
@anchor{contents doc}@anchor{4}
@c Sphinx Tests documentation master file, created by sphinx-quickstart on Wed Jun  4 23:49:58 2008.
@c You can adapt this file completely to your liking, but it should at least
@c contain the root `toctree` directive.

Contents:

@menu
* Extension API tests:: 
* Sphinx image handling:: 
* Image including source in subdir:: 
* Including in subdir:: 
* Testing downloadable files:: 
* Test file and literal inclusion:: 
* Literalinclude options:: 
* Docutils include with "literal":: 
* Testing various markup:: 
* Testing object descriptions:: 
* C items:: 
* Javascript items:: 
* References:: 
* Others:: 
* User markup:: 
* CPP domain:: 
* File with UTF-8 BOM:: 
* Test math extensions:: 
* Autodoc tests:: 
* reStructuredText Demonstration:: 
* Test for diverse extensions:: 
* Testing footnote and citation:: 
* Various kinds of lists:: 
* Generated section:: 
* Indices and tables:: 
* References: References<2>. 
* Test for issue #1157:: 
* Test for issue #1700:: 
* Test for indirect hyperlink targets:: 
* Python Module Index:: 
* Index:: 

@end menu

@node Extension API tests,Sphinx image handling,Top,Top
@anchor{extapi welcome-to-sphinx-tests-s-documentation}@anchor{5}@anchor{extapi doc}@anchor{6}@anchor{extapi extension-api-tests}@anchor{7}
@chapter Extension API tests


Testing directives:
@strong{from function: Foo}@strong{from class: Bar}
@node Sphinx image handling,Image including source in subdir,Extension API tests,Top
@anchor{images doc}@anchor{8}@anchor{images sphinx-image-handling}@anchor{9}
@chapter Sphinx image handling


@c first, a simple test with direct filename

@image{img,,,,png}

@c a non-existing image with direct filename

@c an image with path name (relative to this directory!)

@image{img1,,,,png}

@c an image with unspecified extension

@image{img,,,,png}

@c a non-existing image with .*

@c a non-local image URI

@c an image with subdir and unspecified extension

@image{simg,,,,png}

@c an SVG image (for HTML at least)

@c an image with more than 1 dot in its file name

@image{img.foo,,,,png}

@node Image including source in subdir,Including in subdir,Sphinx image handling,Top
@anchor{subdir/images image-including-source-in-subdir}@anchor{a}@anchor{subdir/images doc}@anchor{b}
@chapter Image including source in subdir


@image{img1,,,,png}

@image{rimg,,,,png}

@node Including in subdir,Testing downloadable files,Image including source in subdir,Top
@anchor{subdir/includes including-in-subdir}@anchor{c}@anchor{subdir/includes doc}@anchor{d}
@chapter Including in subdir


@c absolute filename

@example
print("line 1")
@end example

@c relative filename

@example
print("line 2")
@end example

Absolute @code{/img.png} download.

@c absolute image filename

@image{img,,,,png}

@c absolute include filename

@c This file is included from subdir/includes.txt.

This is an include file.

@node Testing downloadable files,Test file and literal inclusion,Including in subdir,Top
@anchor{includes doc}@anchor{e}@anchor{includes testing-downloadable-files}@anchor{f}
@chapter Testing downloadable files


Download @code{img.png} here.
Download @code{this} there.
Don't download @code{this}.

@node Test file and literal inclusion,Literalinclude options,Testing downloadable files,Top
@anchor{includes test-file-and-literal-inclusion}@anchor{10}
@chapter Test file and literal inclusion


@c This file is included by contents.txt.

@c Paths in included files are relative to the file that
@c includes them

@image{img2,,,,png}

@c This file is included by contents.txt.

@c Paths in included files are relative to the file that
@c includes them

@image{img2,,,,png}

@example
# Literally included file using Python highlighting
# -*- coding: utf-8 -*-

foo = "Including Unicode characters: üöä"

class Foo:
    pass

class Bar:
    def baz():
        pass

def bar(): pass
@end example

@c should give a warning

@verbatim
<SYSTEM MESSAGE: /Users/tkomiya/work/sphinx/tests/build/root/includes.txt:9: (WARNING/2) Encoding 'utf-8-sig' used for reading included file u'/Users/tkomiya/work/sphinx/tests/build/root/wrongenc.inc' seems to be wrong, try giving an :encoding: option>
@end verbatim

@c should succeed

@example
This file is encoded in latin-1 but at first read as utf-8.

Max Strauß aß in München eine Leberkässemmel.
@end example

This file is encoded in latin-1 but at first read as utf-8.

Max Strauß aß in München eine Leberkässemmel.

@node Literalinclude options,Docutils include with "literal",Test file and literal inclusion,Top
@anchor{includes literalinclude-options}@anchor{11}
@chapter Literalinclude options


@example
class Foo:
    pass
@end example

@example
    def baz():
        pass
@end example

@example
class Foo:
    pass
class Bar:
@end example

@example

foo = "Including Unicode characters: üöä"

@end example

@example
START CODE
# Literally included file using Python highlighting
# -*- coding: utf-8 -*-

foo = "Including Unicode characters: üöä"

class Foo:
    pass

class Bar:
    def baz():
        pass

def bar(): pass
END CODE
@end example

@example

foo = "Including Unicode characters: üöä"

class Foo:
    pass

class Bar:
    def baz():
        pass

def bar(): pass
@end example

@example
# Literally included file using Python highlighting
# -*- coding: utf-8 -*-

foo = "Including Unicode characters: üöä"

@end example

@example
--- literal_orig.inc
+++ literal.inc
@@@@ -1,12 +1,12 @@@@
 # Literally included file using Python highlighting
 # -*- coding: utf-8 -*-
 
-foo = "Including Unicode characters: üöä"  # This will be changed
+foo = "Including Unicode characters: üöä"
 
-class FooOrig:
+class Foo:
     pass
 
-class BarOrig:
+class Bar:
     def baz():
         pass
 
@end example

@example
Tabs include file test
----------------------

The next line has a tab:
-| |-
@end example

@example
Tabs include file test
----------------------

The next line has a tab:
-|      |-
@end example

@example
class Foo:
    pass
@end example

@example
class Foo:
    pass

@end example

@example

foo = "Including Unicode characters: üöä"

@end example

Test if dedenting before parsing works.

@example
    def baz():
        pass
@end example

@node Docutils include with "literal",Testing various markup,Literalinclude options,Top
@anchor{includes docutils-include-with-literal}@anchor{12}
@chapter Docutils include with "literal"


While not recommended, it should work (and leave quotes alone).

@example
Testing "quotes" in literal 'included' text.
@end example

@node Testing various markup,Testing object descriptions,Docutils include with "literal",Top
@anchor{markup testing-various-markup}@anchor{13}@anchor{markup doc}@anchor{14}
@chapter Testing various markup


@menu
* Meta markup:: 
* Generic reST:: 
* Inline markup:: 
* With:: 
* Tables:: 
* Figures:: 
* Version markup:: 
* Code blocks:: 
* Misc stuff:: 
* Index markup:: 
* Ö... Some strange characters: Ö Some strange characters. 
* Only directive:: 
* Any role:: 

@end menu

@node Meta markup,Generic reST,,Testing various markup
@anchor{markup meta-markup}@anchor{15}
@section Meta markup


@emph{Section author: Georg Brandl}

@emph{Module author: Georg Brandl}

@node Generic reST,Inline markup,Meta markup,Testing various markup
@anchor{markup generic-rest}@anchor{16}
@section Generic reST


A global substitution (the definition is in rst_epilog).
@anchor{markup label}@anchor{17}
@example
some code
@end example

Option list:


@table @option

@item @w{-}h

help

@item @w{-}@w{-}help

also help
@end table

Line block:


@display
line1@w{ }
@display
line2@w{ }
@display
line3@w{ }
@display
line4@w{ }
@end display
@end display
line5@w{ }
@end display
line6@w{ }
@display
line7@w{ }
@end display
@end display



@menu
* Body directives:: 
* Admonitions:: 

@end menu

@node Body directives,Admonitions,,Generic reST
@anchor{markup body-directives}@anchor{18}
@subsection Body directives


@subsubheading Title

Topic body.

@subsubheading Sidebar


@noindent
Sidebar subtitle


Sidebar body.

@subsubheading Test rubric


@quotation

Epigraph title

Epigraph body.


@center --- Author

@end quotation

@quotation

Highlights

Highlights body.
@end quotation

@quotation

Pull-quote

Pull quote body.
@end quotation

a

b

@example
with some @emph{markup} inside
@end example

@node Admonitions,,Body directives,Generic reST
@anchor{markup admonitions}@anchor{19}@anchor{markup admonition-section}@anchor{1a}
@subsection Admonitions


@cartouche
@quotation My Admonition 
Admonition text.
@end quotation
@end cartouche

@cartouche
@quotation Note 
Note text.
@end quotation
@end cartouche

@cartouche
@quotation Warning 
Warning text.
@end quotation
@end cartouche
@anchor{markup some-label}@anchor{1b}
@cartouche
@quotation Tip 
Tip text.
@end quotation
@end cartouche

Indirect hyperlink targets

@node Inline markup,With,Generic reST,Testing various markup
@anchor{markup inline-markup}@anchor{1c}@anchor{markup other-label}@anchor{1d}
@section Inline markup


@emph{Generic inline markup}

Adding n to test unescaping.


@itemize *

@item 
@code{command\n}

@item 
@emph{dfn\n}

@item 
guilabel with accelerator and \n

@item 
@code{kbd\n}

@item 
@code{mailheader\n}

@item 
@code{makevar\n}

@item 
@code{manpage\n}

@item 
@code{mimetype\n}

@item 
@code{newsgroup\n}

@item 
@code{program\n}

@item 
@code{regexp\n}

@item 
File ‣ Close\n

@item 
File ‣ Print

@item 
@code{a/@emph{varpart}/b\n}

@item 
@code{print @emph{i}\n}
@end itemize

@emph{Linking inline markup}


@itemize *

@item 
@geindex Python Enhancement Proposals; PEP 8
PEP 8@footnote{https://www.python.org/dev/peps/pep-0008}

@item 
@geindex Python Enhancement Proposals; PEP 8
Python Enhancement Proposal #8@footnote{https://www.python.org/dev/peps/pep-0008}

@item 
@geindex RFC; RFC 1
RFC 1@footnote{https://tools.ietf.org/html/rfc1.html}

@item 
@geindex RFC; RFC 1
Request for Comments #1@footnote{https://tools.ietf.org/html/rfc1.html}

@item 
@geindex HOME
@geindex environment variable; HOME
@ref{1e,,HOME}

@item 
@ref{1f,,with}

@item 
@ref{20,,try statement}

@item 
@ref{1a,,Admonitions}

@item 
@ref{1b,,here}

@item 
@ref{1b,,there}

@item 
@ref{21,,My caption of the figure}

@item 
@ref{22,,My caption of the figure}

@item 
@ref{23,,my table}

@item 
@ref{24,,my table}

@item 
@ref{25,,my ruby code}

@item 
@ref{26,,my ruby code}

@item 
Fig. %s

@item 
Fig. %s

@item 
Table %s

@item 
Table %s

@item 
Listing %s

@item 
Listing %s

@item 
@ref{d,,Including in subdir}

@item 
@code{:download:} is tested in includes.txt

@item 
@ref{27,,Python -c option}

@item 
This used to crash: @code{&option}
@end itemize

Test @abbr{abbr,abbreviation} and another @abbr{abbr}.

Testing the 
@geindex index
index role, also available with
@geindex title; explicit
explicit title.

@node With,Tables,Inline markup,Testing various markup
@anchor{markup with}@anchor{1f}@anchor{markup id1}@anchor{28}
@section With


(Empty section.)

@node Tables,Figures,With,Testing various markup
@anchor{markup tables}@anchor{29}
@section Tables

@anchor{markup my-table}@anchor{23}my table



@multitable {xxxxxx} {xxxxxxxxxxxxxxxxxx} {xxxxxx} 
@item

1

@tab


@itemize *

@item 
Block elems

@item 
In table
@end itemize

@tab

x

@item

2

@tab

Empty cells:

@tab

@end multitable

empty cell in table header



@multitable {xxxxxxx} {xxxxxxxx} 
@headitem



@tab

@item

1

@tab

2

@item

3

@tab

4

@end multitable


Tables with multirow and multicol:


@node Figures,Version markup,Tables,Testing various markup
@anchor{markup figures}@anchor{2a}
@section Figures

@anchor{markup my-figure}@anchor{21}

@float Figure

@image{img,,,,png}

@caption{My caption of the figure}

My description paragraph of the figure.

Description paragraph is wraped with legend node.

@end float



@float Figure

@image{rimg,,,,png}

@caption{figure with align option}

@end float



@float Figure

@image{rimg,,,,png}

@caption{figure with align & figwidth option}

@end float


@node Version markup,Code blocks,Figures,Testing various markup
@anchor{markup version-markup}@anchor{2b}
@section Version markup



New in version 0.6: Some funny @strong{stuff}.



Changed in version 0.6: Even more funny stuff.



Deprecated since version 0.6: Boring stuff.



New in version 1.2: First paragraph of versionadded.



Changed in version 1.2: First paragraph of versionchanged.

Second paragraph of versionchanged.


@node Code blocks,Misc stuff,Version markup,Testing various markup
@anchor{markup code-blocks}@anchor{2c}
@section Code blocks

@anchor{markup my-code-block}@anchor{25}

@float LiteralBlock

@caption{my ruby code}

@example
def ruby?
    false
end
@end example

@end float


@example
import sys

sys.stdout.write('hello world!\n')
@end example

@node Misc stuff,Index markup,Code blocks,Testing various markup
@anchor{markup misc-stuff}@anchor{2d}
@section Misc stuff


Stuff @footnote{
Like footnotes.
}

Reference lookup: @ref{2e,,[Ref1]} (defined in another file).
Reference lookup underscore: @ref{2f,,[Ref_1]}


@subsubheading See also


something, something else, something more


@table @asis

@item Google@footnote{http://www.google.com}

For everything.
@end table



@itemize *


@itemize *

@item 
This

@item 
is
@end itemize


@itemize *

@item 
a horizontal

@item 
list
@end itemize


@itemize *

@item 
with several
@end itemize


@itemize *

@item 
items
@end itemize
@end itemize

@subsubheading Side note


This is a side note.

This tests @code{role names in uppercase}.


@center LICENSE AGREEMENT



Terry Pratchett, Tolkien, Monty Python.



@table @asis
@anchor{markup term-anhlich}@anchor{30}
@geindex änhlich

@item änhlich

Dinge
@anchor{markup term-boson}@anchor{31}
@geindex boson

@item boson

Particle with integer spin.
@anchor{markup term-fermion}@anchor{32}
@geindex fermion

@item @emph{fermion}

Particle with half-integer spin.
@anchor{markup term-tauon}@anchor{33}
@geindex tauon

@item tauon@anchor{markup term-myon}@anchor{34}
@geindex myon

@itemx myon@anchor{markup term-electron}@anchor{35}
@geindex electron

@itemx electron

Examples for fermions.
@anchor{markup term-uber}@anchor{36}
@geindex über

@item über

Gewisse
@end table

@example
@anchor{markup grammar-token-try_stmt}@anchor{20}try_stmt  ::= try1_stmt | try2_stmt
@anchor{markup grammar-token-try1_stmt}@anchor{37}try1_stmt ::= "try" ":" suite
              ("except" [expression ["," target]] ":" suite)+
              ["else" ":" suite]
              ["finally" ":" suite]
@anchor{markup grammar-token-try2_stmt}@anchor{38}try2_stmt ::= "try" ":" suite
              "finally" ":" suite
@end example

@node Index markup,Ö Some strange characters,Misc stuff,Testing various markup

@section Index markup


@geindex entry
@geindex entry; pair
@geindex entry; double
@geindex index; entry; triple
@geindex keyword; with
@geindex from; to
@geindex fromalso; toalso

Invalid index markup...

@geindex Main
@geindex Other
@geindex entry; pair

@geindex Main
Main

@node Ö Some strange characters,Only directive,Index markup,Testing various markup
@anchor{markup olabel}@anchor{39}@anchor{markup o-some-strange-characters}@anchor{3a}
@section Ö... Some strange characters


Testing öäü...

@node Only directive,Any role,Ö Some strange characters,Testing various markup
@anchor{markup only-directive}@anchor{3b}
@section Only directive






@node Any role,,Only directive,Testing various markup
@anchor{markup any-role}@anchor{3c}
@section Any role


Test referencing to @ref{1f,,headings} and @ref{3d,,objects}.
Also @ref{1,,modules} and @ref{3e,,classes}.

More domains:


@itemize *

@item 
@ref{3f,,JS}

@item 
@ref{40,,C}

@item 
@ref{41,,myobj} (user markup)

@item 
@ref{42,,n;;Array}

@item 
@ref{43,,perl -c}
@end itemize

@node Testing object descriptions,C items,Testing various markup,Top
@anchor{objects testing-object-descriptions}@anchor{44}@anchor{objects doc}@anchor{45}
@chapter Testing object descriptions


@geindex func_without_module() (built-in function)
@anchor{objects func_without_module}@anchor{46}
@deffn {Function} func_without_module (a, b, *c[, d])

Does something.
@end deffn

@geindex func_without_body() (built-in function)
@anchor{objects func_without_body}@anchor{3d}
@deffn {Function} func_without_body ()
@end deffn

@geindex func_with_unknown_field() (built-in function)
@anchor{objects func_with_unknown_field}@anchor{47}
@deffn {Function} func_with_unknown_field ()

: :

: empty field name:

@*Field_name: 

@*Field_name all lower: 

@*FIELD_NAME: 

@*FIELD_NAME ALL CAPS: 

@*Field_Name: 

@*Field_Name All Word Caps: 

@*Field_name: 

@*Field_name First word cap: 

@*FIELd_name: 

@*FIELd_name PARTial caps: 
@end deffn


@deffn {Function} func_noindex ()
@end deffn

@geindex func_with_module() (in module foolib)
@anchor{objects foolib func_with_module}@anchor{48}
@deffn {Function} foolib.func_with_module ()
@end deffn

Referring to @code{func with no index}.
Referring to @code{nothing}.
@anchor{objects module-mod}@anchor{1}
@geindex mod (module)

@geindex func_in_module() (in module mod)
@anchor{objects mod func_in_module}@anchor{49}
@deffn {Function} mod.func_in_module ()
@end deffn

@geindex Cls (class in mod)
@anchor{objects mod Cls}@anchor{4a}
@deffn {Class} mod.Cls

@geindex meth1() (mod.Cls method)
@anchor{objects mod Cls meth1}@anchor{4b}
@deffn {Method} meth1 ()
@end deffn

@geindex meths() (mod.Cls static method)
@anchor{objects mod Cls meths}@anchor{4c}
@deffn {Static Method} meths ()
@end deffn

@geindex attr (mod.Cls attribute)
@anchor{objects mod Cls attr}@anchor{4d}
@deffn {Attribute} attr
@end deffn
@end deffn

@c explicit class given

@geindex meth2() (mod.Cls method)
@anchor{objects mod Cls meth2}@anchor{4e}
@deffn {Method} Cls.meth2 ()
@end deffn

@c explicit module given

@geindex Error
@anchor{objects errmod Error}@anchor{4f}
@deffn {Exception} errmod.Error (arg1, arg2)
@end deffn

@geindex var (in module mod)
@anchor{objects mod var}@anchor{50}
@deffn {Data} mod.var
@end deffn

@geindex func_without_module2() (built-in function)
@anchor{objects func_without_module2}@anchor{51}
@deffn {Function} func_without_module2 () -> annotation
@end deffn


@deffn {Object} long(parameter,   list)

@deffnx {Object} another one
@end deffn

@geindex TimeInt (built-in class)
@anchor{objects TimeInt}@anchor{52}
@deffn {Class} TimeInt

Has only one parameter (triggers special behavior...)

@*Parameters: 
@code{moo} (Moo) -- Moo

@end deffn

@geindex Time (built-in class)
@anchor{objects Time}@anchor{3e}
@deffn {Class} Time (hour, minute, isdst)

@*Parameters: 

@itemize *

@item 
@code{year} (@ref{52,,TimeInt}) -- The year.

@item 
@code{minute} (@ref{52,,TimeInt}) -- The minute.

@item 
@code{isdst} -- whether it's DST

@item 
@code{hour} (@code{DuplicateType}) -- Some parameter

@item 
@code{hour} -- Duplicate param.  Should not lead to crashes.

@item 
@code{extcls} (@ref{4a,,Cls}) -- A class from another module.
@end itemize


@*Returns: 
a new @ref{3e,,Time} instance


@*Return type: 
@ref{3e,,Time}


@*Raises: 
@code{ValueError} -- if the values are out of range


@*Variables: 

@itemize *

@item 
@code{hour} (@code{int}) -- like @emph{hour}

@item 
@code{minute} (@code{int}) -- like @emph{minute}
@end itemize

@end deffn

@node C items,Javascript items,Testing object descriptions,Top
@anchor{objects c-items}@anchor{53}
@chapter C items


@geindex Sphinx_DoSomething (C function)
@anchor{objects c Sphinx_DoSomething}@anchor{54}
@deffn {C Function} Sphinx_DoSomething ()
@end deffn

@geindex SphinxStruct.member (C member)
@anchor{objects c SphinxStruct member}@anchor{55}
@deffn {C Member} SphinxStruct.member
@end deffn

@geindex SPHINX_USE_PYTHON (C macro)
@anchor{objects c SPHINX_USE_PYTHON}@anchor{56}
@deffn {C Macro} SPHINX_USE_PYTHON
@end deffn

@geindex SphinxType (C type)
@anchor{objects c SphinxType}@anchor{40}
@deffn {C Type} SphinxType
@end deffn

@geindex sphinx_global (C variable)
@anchor{objects c sphinx_global}@anchor{57}
@deffn {C Variable} sphinx_global
@end deffn

@node Javascript items,References,C items,Top
@anchor{objects javascript-items}@anchor{58}
@chapter Javascript items


@geindex foo() (built-in function)
@anchor{objects foo}@anchor{59}
@deffn {JavaScript Function} foo ()
@end deffn

@geindex bar (global variable or constant)
@anchor{objects bar}@anchor{5a}
@deffn {JavaScript Data} bar
@end deffn

@c documenting the method of any object

@geindex bar.baz() (bar method)
@anchor{objects bar baz}@anchor{3f}
@deffn {JavaScript Function} bar.baz (href, callback[, errback])

@*Arguments: 

@itemize *

@item 
@code{href} (@code{string}) -- The location of the resource.

@item 
@code{callback} -- Get's called with the data returned by the resource.
@end itemize


@*Throws: 
@code{InvalidHref} -- If the @cite{href} is invalid.


@*Returns: 
@cite{undefined}

@end deffn

@geindex bar.spam (bar attribute)
@anchor{objects bar spam}@anchor{5b}
@deffn {JavaScript Attribute} bar.spam
@end deffn

@node References,Others,Javascript items,Top
@anchor{objects references}@anchor{5c}
@chapter References


Referencing @ref{4a,,mod.Cls} or @ref{4a,,mod.Cls} should be the same.

With target: @ref{54,,Sphinx_DoSomething()} (parentheses are handled),
@ref{55,,SphinxStruct.member}, @ref{56,,SPHINX_USE_PYTHON},
@ref{40,,SphinxType *} (pointer is handled), @ref{57,,sphinx_global}.

Without target: @code{CFunction()}. @code{malloc()}.

@ref{59,,foo()}
@ref{59,,foo()}

@ref{5a,,bar}
@ref{3f,,bar.baz()}
@ref{3f,,bar.baz()}
@ref{3f,,baz()}

@ref{3f,,bar.baz}

@node Others,User markup,References,Top
@anchor{objects others}@anchor{5d}
@chapter Others


@geindex environment variable; HOME
@anchor{objects envvar-HOME}@anchor{1e}
@deffn {Environment Variable} HOME
@end deffn

@geindex python command line option; -c command
@anchor{objects cmdoption-python-c}@anchor{27}
@deffn {Program Option} @w{-}c command
@end deffn

@geindex perl command line option; -c
@anchor{objects cmdoption-perl-c}@anchor{43}
@deffn {Program Option} @w{-}c
@end deffn

@geindex perl command line option; +p
@anchor{objects cmdoption-perl-arg-+p}@anchor{5e}
@deffn {Option} +p
@end deffn

@geindex perl command line option; arg
@anchor{objects cmdoption-perl-arg-arg}@anchor{5f}
@deffn {Option} arg
@end deffn

Link to @ref{5e,,perl +p} and @ref{5f,,arg}

@geindex hg command line option; commit
@anchor{objects cmdoption-hg-arg-commit}@anchor{60}
@deffn {Option} commit
@end deffn

@geindex git-commit command line option; -p
@anchor{objects cmdoption-git-commit-p}@anchor{61}
@deffn {Option} @w{-}p
@end deffn

Link to @ref{60,,hg commit} and @ref{61,,git commit -p}.

@node User markup,CPP domain,Others,Top
@anchor{objects user-markup}@anchor{62}
@chapter User markup


@geindex myobj (userdesc)
@anchor{objects userdesc-myobj}@anchor{41}
@deffn {User Desc} myobj (parameter)

Description of userdesc.
@end deffn

Referencing @ref{41,,myobj}.

@node CPP domain,File with UTF-8 BOM,User markup,Top
@anchor{objects cpp-domain}@anchor{63}
@chapter CPP domain


@geindex n;;Array (C++ class)
@anchor{objects _CPPv2N1n5ArrayE}@anchor{42}@anchor{objects n Array}@anchor{64}
@deffn {C++ Class} n::Array

@geindex n;;Array;;operator[] (C++ function)
@geindex n;;Array;;operator[] (C++ function)
@anchor{objects _CPPv2N1n5ArrayixEj}@anchor{65}@anchor{objects n Array subscript-operator__unsigned}@anchor{66}
@deffn {C++ Function} T &operator[] (unsigned j)
@anchor{objects _CPPv2NK1n5ArrayixEj}@anchor{67}@anchor{objects n Array subscript-operator__unsignedC}@anchor{68}
@deffnx {C++ Function} const T &operator[] (unsigned j) const
@end deffn
@end deffn

@node File with UTF-8 BOM,Test math extensions,CPP domain,Top
@anchor{bom doc}@anchor{69}@anchor{bom file-with-utf-8-bom}@anchor{6a}
@chapter File with UTF-8 BOM


This file has a UTF-8 "BOM".

@node Test math extensions,Autodoc tests,File with UTF-8 BOM,Top
@anchor{math test-math-extensions}@anchor{6b}@anchor{math doc}@anchor{6c}
@chapter Test math extensions @math{E = m c^2}


This is inline math: @math{a^2 + b^2 = c^2}.


@example
a^2 + b^2 = c^2
@end example



@example
a + 1 < b
@end example

@anchor{math equation-foo}@anchor{6d}@anchor{math foo}@anchor{6e}

@example
e^@{i\pi@} = 1
@end example



@example
e^@{ix@} = \cos x + i\sin x
@end example



@example
n \in \mathbb N
@end example



@example
a + 1 < b
@end example


Referencing equation @ref{6e,,foo}.

@node Autodoc tests,reStructuredText Demonstration,Test math extensions,Top
@anchor{autodoc autodoc-tests}@anchor{6f}@anchor{autodoc doc}@anchor{70}
@chapter Autodoc tests


Just testing a few autodoc possibilities...
@anchor{autodoc module-util}@anchor{3}
@geindex util (module)

@menu
* Sphinx test suite utilities:: 
* test_autodoc:: 

@end menu

@node Sphinx test suite utilities,test_autodoc,,Autodoc tests
@anchor{autodoc sphinx-test-suite-utilities}@anchor{71}
@section Sphinx test suite utilities


@*copyright: 
Copyright 2007-2016 by the Sphinx team, see AUTHORS.


@*license: 
BSD, see LICENSE for details.

@anchor{autodoc module-test_autodoc}@anchor{2}
@geindex test_autodoc (module)

@node test_autodoc,,Sphinx test suite utilities,Autodoc tests
@anchor{autodoc test-autodoc}@anchor{72}
@section test_autodoc


Test the autodoc extension.  This tests mainly the Documenters; the auto
directives are tested in a test source file translated by test_build.

@*copyright: 
Copyright 2007-2016 by the Sphinx team, see AUTHORS.


@*license: 
BSD, see LICENSE for details.


@geindex Class (class in test_autodoc)
@anchor{autodoc test_autodoc Class}@anchor{73}
@deffn {Class} test_autodoc.Class (arg)

Class to document.

@geindex attr (test_autodoc.Class attribute)
@anchor{autodoc test_autodoc Class attr}@anchor{74}
@deffn {Attribute} attr = 'bar'

should be documented -- süß
@end deffn

@geindex descr (test_autodoc.Class attribute)
@anchor{autodoc test_autodoc Class descr}@anchor{75}
@deffn {Attribute} descr

Descriptor instance docstring.
@end deffn

@geindex docattr (test_autodoc.Class attribute)
@anchor{autodoc test_autodoc Class docattr}@anchor{76}
@deffn {Attribute} docattr = 'baz'

should likewise be documented -- süß
@end deffn

@geindex excludemeth() (test_autodoc.Class method)
@anchor{autodoc test_autodoc Class excludemeth}@anchor{77}
@deffn {Method} excludemeth ()

Method that should be excluded.
@end deffn

@geindex inst_attr_comment (test_autodoc.Class attribute)
@anchor{autodoc test_autodoc Class inst_attr_comment}@anchor{78}
@deffn {Attribute} inst_attr_comment = None

a documented instance attribute
@end deffn

@geindex inst_attr_inline (test_autodoc.Class attribute)
@anchor{autodoc test_autodoc Class inst_attr_inline}@anchor{79}
@deffn {Attribute} inst_attr_inline = None

an inline documented instance attr
@end deffn

@geindex inst_attr_string (test_autodoc.Class attribute)
@anchor{autodoc test_autodoc Class inst_attr_string}@anchor{7a}
@deffn {Attribute} inst_attr_string = None

a documented instance attribute
@end deffn

@geindex mdocattr (test_autodoc.Class attribute)
@anchor{autodoc test_autodoc Class mdocattr}@anchor{7b}
@deffn {Attribute} mdocattr = <StringIO.StringIO instance>

should be documented as well - süß
@end deffn

@geindex meth() (test_autodoc.Class method)
@anchor{autodoc test_autodoc Class meth}@anchor{7c}
@deffn {Method} meth ()

Function.
@end deffn

@geindex moore() (test_autodoc.Class class method)
@anchor{autodoc test_autodoc Class moore}@anchor{7d}
@deffn {Class Method} moore (a, e, f) -> happiness
@end deffn

@geindex prop (test_autodoc.Class attribute)
@anchor{autodoc test_autodoc Class prop}@anchor{7e}
@deffn {Attribute} prop

Property.
@end deffn

@geindex skipmeth() (test_autodoc.Class method)
@anchor{autodoc test_autodoc Class skipmeth}@anchor{7f}
@deffn {Method} skipmeth ()

Method that should be skipped.
@end deffn

@geindex udocattr (test_autodoc.Class attribute)
@anchor{autodoc test_autodoc Class udocattr}@anchor{80}
@deffn {Attribute} udocattr = 'quux'

should be documented as well - süß
@end deffn
@end deffn

@geindex function() (in module test_autodoc)
@anchor{autodoc test_autodoc function}@anchor{81}
@deffn {Function} test_autodoc.function (foo, *args, **kwds)

Return spam.
@end deffn

@geindex Class (class in test_autodoc)

@deffn {Class} test_autodoc.Class (arg)

Class to document.

Additional content.

@geindex attr (test_autodoc.Class attribute)

@deffn {Attribute} attr = 'bar'

should be documented -- süß
@end deffn

@geindex descr (test_autodoc.Class attribute)

@deffn {Attribute} descr

Descriptor instance docstring.
@end deffn

@geindex docattr (test_autodoc.Class attribute)

@deffn {Attribute} docattr = 'baz'

should likewise be documented -- süß
@end deffn

@geindex excludemeth() (test_autodoc.Class method)

@deffn {Method} excludemeth ()

Method that should be excluded.
@end deffn

@geindex inheritedmeth() (test_autodoc.Class method)
@anchor{autodoc test_autodoc Class inheritedmeth}@anchor{82}
@deffn {Method} inheritedmeth ()

Inherited function.
@end deffn

@geindex inst_attr_comment (test_autodoc.Class attribute)

@deffn {Attribute} inst_attr_comment = None

a documented instance attribute
@end deffn

@geindex inst_attr_inline (test_autodoc.Class attribute)

@deffn {Attribute} inst_attr_inline = None

an inline documented instance attr
@end deffn

@geindex inst_attr_string (test_autodoc.Class attribute)

@deffn {Attribute} inst_attr_string = None

a documented instance attribute
@end deffn

@geindex mdocattr (test_autodoc.Class attribute)

@deffn {Attribute} mdocattr = <StringIO.StringIO instance>

should be documented as well - süß
@end deffn

@geindex meth() (test_autodoc.Class method)

@deffn {Method} meth ()

Function.
@end deffn

@geindex moore() (test_autodoc.Class class method)

@deffn {Class Method} moore (a, e, f) -> happiness
@end deffn

@geindex prop (test_autodoc.Class attribute)

@deffn {Attribute} prop

Property.
@end deffn

@geindex skipmeth() (test_autodoc.Class method)

@deffn {Method} skipmeth ()

Method that should be skipped.
@end deffn

@geindex udocattr (test_autodoc.Class attribute)

@deffn {Attribute} udocattr = 'quux'

should be documented as well - süß
@end deffn
@end deffn

@geindex Outer (class in test_autodoc)
@anchor{autodoc test_autodoc Outer}@anchor{83}
@deffn {Class} test_autodoc.Outer

Foo

@geindex Outer.Inner (class in test_autodoc)
@anchor{autodoc test_autodoc Outer Inner}@anchor{84}
@deffn {Class} Inner

Foo

@geindex meth() (test_autodoc.Outer.Inner method)
@anchor{autodoc test_autodoc Outer Inner meth}@anchor{85}
@deffn {Method} meth ()

Foo
@end deffn
@end deffn
@end deffn

@geindex docattr (test_autodoc.Class attribute)

@deffn {Attribute} Class.docattr = 'baz'

should likewise be documented -- süß
@end deffn

@geindex CustomEx
@anchor{autodoc test_autodoc CustomEx}@anchor{86}
@deffn {Exception} test_autodoc.CustomEx

My custom exception.

@geindex f() (test_autodoc.CustomEx method)
@anchor{autodoc test_autodoc CustomEx f}@anchor{87}
@deffn {Method} f ()

Exception method.
@end deffn
@end deffn

@geindex CustomDict (class in test_autodoc)
@anchor{autodoc test_autodoc CustomDict}@anchor{88}
@deffn {Class} test_autodoc.CustomDict

Bases: @code{dict}

Docstring.
@end deffn

@geindex MarkupError (class in autodoc_fodder)
@anchor{autodoc autodoc_fodder MarkupError}@anchor{89}
@deffn {Class} autodoc_fodder.MarkupError

@cartouche
@quotation Note 
This is a docstring with a
@end quotation
@end cartouche

@verbatim
<SYSTEM MESSAGE: /Users/tkomiya/work/sphinx/tests/build/root/autodoc_fodder.py:docstring of autodoc_fodder.MarkupError:2: (WARNING/2) Explicit markup ends without a blank line; unexpected unindent.>
@end verbatim

small markup error which should have
correct location information.
@end deffn

@geindex InstAttCls (class in test_autodoc)
@anchor{autodoc test_autodoc InstAttCls}@anchor{8a}
@deffn {Class} test_autodoc.InstAttCls

Class with documented class and instance attributes.

All members (5 total)

@geindex ca1 (test_autodoc.InstAttCls attribute)
@anchor{autodoc test_autodoc InstAttCls ca1}@anchor{8b}
@deffn {Attribute} ca1 = 'a'

Doc comment for class attribute InstAttCls.ca1.
It can have multiple lines.
@end deffn

@geindex ca2 (test_autodoc.InstAttCls attribute)
@anchor{autodoc test_autodoc InstAttCls ca2}@anchor{8c}
@deffn {Attribute} ca2 = 'b'

Doc comment for InstAttCls.ca2. One line only.
@end deffn

@geindex ca3 (test_autodoc.InstAttCls attribute)
@anchor{autodoc test_autodoc InstAttCls ca3}@anchor{8d}
@deffn {Attribute} ca3 = 'c'

Docstring for class attribute InstAttCls.ca3.
@end deffn

@geindex ia1 (test_autodoc.InstAttCls attribute)
@anchor{autodoc test_autodoc InstAttCls ia1}@anchor{8e}
@deffn {Attribute} ia1 = None

Doc comment for instance attribute InstAttCls.ia1
@end deffn

@geindex ia2 (test_autodoc.InstAttCls attribute)
@anchor{autodoc test_autodoc InstAttCls ia2}@anchor{8f}
@deffn {Attribute} ia2 = None

Docstring for instance attribute InstAttCls.ia2.
@end deffn
@end deffn

@geindex InstAttCls (class in test_autodoc)

@deffn {Class} test_autodoc.InstAttCls

Class with documented class and instance attributes.

Specific members (2 total)

@geindex ca1 (test_autodoc.InstAttCls attribute)

@deffn {Attribute} ca1 = 'a'

Doc comment for class attribute InstAttCls.ca1.
It can have multiple lines.
@end deffn

@geindex ia1 (test_autodoc.InstAttCls attribute)

@deffn {Attribute} ia1 = None

Doc comment for instance attribute InstAttCls.ia1
@end deffn
@end deffn
@anchor{autodoc module-autodoc_missing_imports}@anchor{0}
@geindex autodoc_missing_imports (module)

@heading Dedication

For Docutils users & co-developers.

@heading Abstract

This document is a demonstration of the reStructuredText markup
language, containing examples of all basic reStructuredText
constructs and many advanced constructs.

@node reStructuredText Demonstration,Test for diverse extensions,Autodoc tests,Top
@anchor{metadata restructuredtext-demonstration}@anchor{90}@anchor{metadata doc}@anchor{91}
@chapter reStructuredText Demonstration


@c Above is the document title, and below is the subtitle.
@c They are transformed from section titles after parsing.

@menu
* Examples of Syntax Constructs:: 

@end menu

@node Examples of Syntax Constructs,,,reStructuredText Demonstration
@anchor{metadata examples-of-syntax-constructs}@anchor{92}
@section Examples of Syntax Constructs


@c bibliographic fields (which also require a transform):

@node Test for diverse extensions,Testing footnote and citation,reStructuredText Demonstration,Top
@anchor{extensions doc}@anchor{93}@anchor{extensions test-for-diverse-extensions}@anchor{94}
@chapter Test for diverse extensions


@menu
* extlinks:: 
* todo:: 

@end menu

@node extlinks,todo,,Test for diverse extensions
@anchor{extensions extlinks}@anchor{95}
@section extlinks


Test diverse links: issue 1000@footnote{http://bugs.python.org/issue1000} and @indicateurl{http://python.org/dev/}, also with
explicit caption@footnote{http://bugs.python.org/issue1042}.

@node todo,,extlinks,Test for diverse extensions
@anchor{extensions todo}@anchor{96}
@section todo


@menu
* list of all todos:: 

@end menu

@node list of all todos,,,todo
@anchor{extensions list-of-all-todos}@anchor{97}
@subsection list of all todos


@node Testing footnote and citation,Various kinds of lists,Test for diverse extensions,Top
@anchor{footnote testing-footnote-and-citation}@anchor{98}@anchor{footnote doc}@anchor{99}
@chapter Testing footnote and citation


@c #1058 footnote-backlinks-do-not-work

@menu
* numbered footnote:: 
* auto-numbered footnote:: 
* named footnote:: 
* citation:: 
* footnotes in table:: 
* footenotes:: 
* missing target:: 

@end menu

@node numbered footnote,auto-numbered footnote,,Testing footnote and citation
@anchor{footnote numbered-footnote}@anchor{9a}
@section numbered footnote


@footnote{
numbered
}

@node auto-numbered footnote,named footnote,numbered footnote,Testing footnote and citation
@anchor{footnote auto-numbered-footnote}@anchor{9b}
@section auto-numbered footnote


@footnote{
auto numbered
}

@node named footnote,citation,auto-numbered footnote,Testing footnote and citation
@anchor{footnote named-footnote}@anchor{9c}
@section named footnote


@footnote{
named
}

@node citation,footnotes in table,named footnote,Testing footnote and citation
@anchor{footnote citation}@anchor{9d}
@section citation


@ref{9e,,[bar]}

@node footnotes in table,footenotes,citation,Testing footnote and citation
@anchor{footnote footnotes-in-table}@anchor{9f}
@section footnotes in table

Table caption @footnote{
footnotes in table caption
}



@multitable {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} 
@headitem

name @footnote{
footnotes in table
}

@tab

desription

@item

VIDIOC_CROPCAP

@tab

Information about VIDIOC_CROPCAP

@end multitable


@node footenotes,missing target,footnotes in table,Testing footnote and citation
@anchor{footnote footenotes}@anchor{a0}
@section footenotes


@subsubheading Citations

@anchor{footnote bar}@anchor{9e}@w{(bar)} 
cite

@node missing target,,footenotes,Testing footnote and citation
@anchor{footnote missing-target}@anchor{a1}
@section missing target


[missing] citation

@node Various kinds of lists,Generated section,Testing footnote and citation,Top
@anchor{lists doc}@anchor{a2}@anchor{lists various-kinds-of-lists}@anchor{a3}
@chapter Various kinds of lists


@menu
* nested enumerated lists:: 
* enumerated lists with non-default start values:: 
* enumerated lists using letters:: 
* definition lists:: 

@end menu

@node nested enumerated lists,enumerated lists with non-default start values,,Various kinds of lists
@anchor{lists nested-enumerated-lists}@anchor{a4}
@section nested enumerated lists



@enumerate 

@item 
one

@item 
two


@enumerate 

@item 
two.1

@item 
two.2
@end enumerate

@item 
three
@end enumerate

@node enumerated lists with non-default start values,enumerated lists using letters,nested enumerated lists,Various kinds of lists
@anchor{lists enumerated-lists-with-non-default-start-values}@anchor{a5}
@section enumerated lists with non-default start values



@enumerate 0

@item 
zero

@item 
one
@end enumerate


__________________________________________________________________



@enumerate 

@item 
one

@item 
two
@end enumerate


__________________________________________________________________



@enumerate 2

@item 
two

@item 
three
@end enumerate

@node enumerated lists using letters,definition lists,enumerated lists with non-default start values,Various kinds of lists
@anchor{lists enumerated-lists-using-letters}@anchor{a6}
@section enumerated lists using letters



@enumerate a

@item 
a

@item 
b

@item 
c

@item 
d
@end enumerate


__________________________________________________________________



@enumerate 24

@item 
x

@item 
y

@item 
z

@item 
@{
@end enumerate

@node definition lists,,enumerated lists using letters,Various kinds of lists
@anchor{lists definition-lists}@anchor{a7}
@section definition lists



@table @asis

@item term1

description

@item term2 (@strong{stronged partially})

description
@end table

@node Generated section,Indices and tables,Various kinds of lists,Top
@anchor{otherext doc}@anchor{a8}@anchor{otherext id1}@anchor{a9}
@chapter Generated section


@node Indices and tables,References<2>,Generated section,Top
@anchor{contents indices-and-tables}@anchor{aa}
@unnumbered Indices and tables



@itemize *

@item 
genindex

@item 
modindex

@item 
search
@end itemize

@node References<2>,Test for issue #1157,Indices and tables,Top
@anchor{contents references}@anchor{ab}
@unnumbered References

@anchor{contents ref1}@anchor{ac}@w{(Ref1)} 
Reference target.
@anchor{contents ref-1}@anchor{ad}@w{(Ref_1)} 
Reference target 2.

@node Test for issue #1157,Test for issue #1700,References<2>,Top
@anchor{contents test-for-issue-1157}@anchor{ae}
@unnumbered Test for issue #1157


This used to crash:

@node Test for issue #1700,Test for indirect hyperlink targets,Test for issue #1157,Top
@anchor{contents test-for-issue-1700}@anchor{af}
@unnumbered Test for issue #1700


@ref{b0,,Table of Contents}

@node Test for indirect hyperlink targets,Python Module Index,Test for issue #1700,Top
@anchor{contents test-for-indirect-hyperlink-targets}@anchor{b1}
@unnumbered Test for indirect hyperlink targets


@ref{1b,,indirect hyperref}

@node Python Module Index,Index,Test for indirect hyperlink targets,Top
@unnumbered Python Module Index


@menu
* autodoc_missing_imports: 0. 
* mod: 1. Module synopsis.
* test_autodoc: 2. 
* util: 3. 
@end menu


@node Index,,Python Module Index,Top
@unnumbered Index


@printindex ge

@anchor{b0}@w{                              }
@anchor{markup ref-1}@w{                              }
@anchor{24}@w{                              }
@anchor{26}@w{                              }
@anchor{22}@w{                              }
@anchor{markup ref1}@w{                              }
@anchor{markup my-table-name}@w{                              }
@anchor{2e}@w{                              }
@anchor{2f}@w{                              }
@anchor{markup my-figure-name}@w{                              }
@anchor{contents mastertoc}@w{                              }
@anchor{markup my-code-block-name}@w{                              }

@c %**end of body
@bye
